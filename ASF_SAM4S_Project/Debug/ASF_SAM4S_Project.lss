
ASF_SAM4S_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b98  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407b98  00407b98  0000fb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000088c  20000000  00407ba0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000f0  2000088c  0040842c  0001088c  2**2
                  ALLOC
  4 .stack        00003004  2000097c  0040851c  0001088c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0001088c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000108b6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010964  00000000  00000000  00010911  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002dd8  00000000  00000000  00021275  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006a35  00000000  00000000  0002404d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cd8  00000000  00000000  0002aa82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c38  00000000  00000000  0002b75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007efa  00000000  00000000  0002c392  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010597  00000000  00000000  0003428c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052d59  00000000  00000000  00044823  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002688  00000000  00000000  0009757c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003980 	.word	0x20003980
  400004:	00400e05 	.word	0x00400e05
  400008:	00400e01 	.word	0x00400e01
  40000c:	00400e01 	.word	0x00400e01
  400010:	00400e01 	.word	0x00400e01
  400014:	00400e01 	.word	0x00400e01
  400018:	00400e01 	.word	0x00400e01
	...
  40002c:	00400e01 	.word	0x00400e01
  400030:	00400e01 	.word	0x00400e01
  400034:	00000000 	.word	0x00000000
  400038:	00400e01 	.word	0x00400e01
  40003c:	00400e01 	.word	0x00400e01
  400040:	00400e01 	.word	0x00400e01
  400044:	00400e01 	.word	0x00400e01
  400048:	00400e01 	.word	0x00400e01
  40004c:	00400e01 	.word	0x00400e01
  400050:	00400e01 	.word	0x00400e01
  400054:	00400e01 	.word	0x00400e01
  400058:	00400e01 	.word	0x00400e01
  40005c:	00400e01 	.word	0x00400e01
  400060:	00400e01 	.word	0x00400e01
  400064:	00400e01 	.word	0x00400e01
  400068:	00000000 	.word	0x00000000
  40006c:	004009c9 	.word	0x004009c9
  400070:	004009dd 	.word	0x004009dd
  400074:	004009f1 	.word	0x004009f1
  400078:	00400e01 	.word	0x00400e01
  40007c:	00400e01 	.word	0x00400e01
	...
  400088:	00400e01 	.word	0x00400e01
  40008c:	00400e01 	.word	0x00400e01
  400090:	00400e01 	.word	0x00400e01
  400094:	00400e01 	.word	0x00400e01
  400098:	00400e01 	.word	0x00400e01
  40009c:	00400e01 	.word	0x00400e01
  4000a0:	00400e01 	.word	0x00400e01
  4000a4:	00400e01 	.word	0x00400e01
  4000a8:	00400e01 	.word	0x00400e01
  4000ac:	00400e01 	.word	0x00400e01
  4000b0:	00400e01 	.word	0x00400e01
  4000b4:	00400e01 	.word	0x00400e01
  4000b8:	00400e01 	.word	0x00400e01
  4000bc:	00400e01 	.word	0x00400e01
  4000c0:	00400e01 	.word	0x00400e01
  4000c4:	00400e01 	.word	0x00400e01
  4000c8:	00400e01 	.word	0x00400e01

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000088c 	.word	0x2000088c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00407ba0 	.word	0x00407ba0

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	00407ba0 	.word	0x00407ba0
  400114:	20000890 	.word	0x20000890
  400118:	00407ba0 	.word	0x00407ba0
  40011c:	00000000 	.word	0x00000000

00400120 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400120:	b570      	push	{r4, r5, r6, lr}
  400122:	b082      	sub	sp, #8
  400124:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400126:	ac02      	add	r4, sp, #8
  400128:	2302      	movs	r3, #2
  40012a:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40012e:	4d09      	ldr	r5, [pc, #36]	; (400154 <ssd1306_write_command+0x34>)
  400130:	4628      	mov	r0, r5
  400132:	4621      	mov	r1, r4
  400134:	4b08      	ldr	r3, [pc, #32]	; (400158 <ssd1306_write_command+0x38>)
  400136:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400138:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40013c:	4b07      	ldr	r3, [pc, #28]	; (40015c <ssd1306_write_command+0x3c>)
  40013e:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400140:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  400142:	2056      	movs	r0, #86	; 0x56
  400144:	4b06      	ldr	r3, [pc, #24]	; (400160 <ssd1306_write_command+0x40>)
  400146:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400148:	4628      	mov	r0, r5
  40014a:	4621      	mov	r1, r4
  40014c:	4b05      	ldr	r3, [pc, #20]	; (400164 <ssd1306_write_command+0x44>)
  40014e:	4798      	blx	r3
#endif
}
  400150:	b002      	add	sp, #8
  400152:	bd70      	pop	{r4, r5, r6, pc}
  400154:	40008000 	.word	0x40008000
  400158:	0040038d 	.word	0x0040038d
  40015c:	400e1200 	.word	0x400e1200
  400160:	20000001 	.word	0x20000001
  400164:	004003bd 	.word	0x004003bd

00400168 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  400168:	b5f0      	push	{r4, r5, r6, r7, lr}
  40016a:	b085      	sub	sp, #20
  40016c:	4d25      	ldr	r5, [pc, #148]	; (400204 <ssd1306_init+0x9c>)
  40016e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  400172:	636e      	str	r6, [r5, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  400174:	2056      	movs	r0, #86	; 0x56
  400176:	4c24      	ldr	r4, [pc, #144]	; (400208 <ssd1306_init+0xa0>)
  400178:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40017a:	632e      	str	r6, [r5, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  40017c:	2056      	movs	r0, #86	; 0x56
  40017e:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  400180:	2702      	movs	r7, #2
  400182:	ae04      	add	r6, sp, #16
  400184:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  400188:	4c20      	ldr	r4, [pc, #128]	; (40020c <ssd1306_init+0xa4>)
  40018a:	4620      	mov	r0, r4
  40018c:	4b20      	ldr	r3, [pc, #128]	; (400210 <ssd1306_init+0xa8>)
  40018e:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  400190:	2500      	movs	r5, #0
  400192:	9500      	str	r5, [sp, #0]
  400194:	4620      	mov	r0, r4
  400196:	4631      	mov	r1, r6
  400198:	462a      	mov	r2, r5
  40019a:	4b1e      	ldr	r3, [pc, #120]	; (400214 <ssd1306_init+0xac>)
  40019c:	4e1e      	ldr	r6, [pc, #120]	; (400218 <ssd1306_init+0xb0>)
  40019e:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4001a0:	2301      	movs	r3, #1
  4001a2:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4001a4:	20a8      	movs	r0, #168	; 0xa8
  4001a6:	4c1d      	ldr	r4, [pc, #116]	; (40021c <ssd1306_init+0xb4>)
  4001a8:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4001aa:	201f      	movs	r0, #31
  4001ac:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4001ae:	20d3      	movs	r0, #211	; 0xd3
  4001b0:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4001b2:	4628      	mov	r0, r5
  4001b4:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  4001b6:	2040      	movs	r0, #64	; 0x40
  4001b8:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4001ba:	20a1      	movs	r0, #161	; 0xa1
  4001bc:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4001be:	20c8      	movs	r0, #200	; 0xc8
  4001c0:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4001c2:	20da      	movs	r0, #218	; 0xda
  4001c4:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4001c6:	4638      	mov	r0, r7
  4001c8:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4001ca:	2081      	movs	r0, #129	; 0x81
  4001cc:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4001ce:	208f      	movs	r0, #143	; 0x8f
  4001d0:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4001d2:	20a4      	movs	r0, #164	; 0xa4
  4001d4:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4001d6:	20a6      	movs	r0, #166	; 0xa6
  4001d8:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4001da:	20d5      	movs	r0, #213	; 0xd5
  4001dc:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4001de:	2080      	movs	r0, #128	; 0x80
  4001e0:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4001e2:	208d      	movs	r0, #141	; 0x8d
  4001e4:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4001e6:	2014      	movs	r0, #20
  4001e8:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4001ea:	20db      	movs	r0, #219	; 0xdb
  4001ec:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4001ee:	2040      	movs	r0, #64	; 0x40
  4001f0:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4001f2:	20d9      	movs	r0, #217	; 0xd9
  4001f4:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4001f6:	20f1      	movs	r0, #241	; 0xf1
  4001f8:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4001fa:	20af      	movs	r0, #175	; 0xaf
  4001fc:	47a0      	blx	r4

	ssd1306_display_on();
}
  4001fe:	b005      	add	sp, #20
  400200:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	400e1200 	.word	0x400e1200
  400208:	20000001 	.word	0x20000001
  40020c:	40008000 	.word	0x40008000
  400210:	004002bd 	.word	0x004002bd
  400214:	004c4b40 	.word	0x004c4b40
  400218:	00400311 	.word	0x00400311
  40021c:	00400121 	.word	0x00400121

00400220 <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  400220:	b500      	push	{lr}
  400222:	b085      	sub	sp, #20
	twi_options_t opts = {
  400224:	2300      	movs	r3, #0
  400226:	9303      	str	r3, [sp, #12]
  400228:	4b07      	ldr	r3, [pc, #28]	; (400248 <at30tse_init+0x28>)
  40022a:	9301      	str	r3, [sp, #4]
  40022c:	f242 7310 	movw	r3, #10000	; 0x2710
  400230:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400232:	2013      	movs	r0, #19
  400234:	4b05      	ldr	r3, [pc, #20]	; (40024c <at30tse_init+0x2c>)
  400236:	4798      	blx	r3
		.speed = BOARD_TWI_SPEED,
		.smbus = 0
	};

	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  400238:	4805      	ldr	r0, [pc, #20]	; (400250 <at30tse_init+0x30>)
  40023a:	a901      	add	r1, sp, #4
  40023c:	4b05      	ldr	r3, [pc, #20]	; (400254 <at30tse_init+0x34>)
  40023e:	4798      	blx	r3
}
  400240:	b005      	add	sp, #20
  400242:	f85d fb04 	ldr.w	pc, [sp], #4
  400246:	bf00      	nop
  400248:	07270e00 	.word	0x07270e00
  40024c:	00400b79 	.word	0x00400b79
  400250:	40018000 	.word	0x40018000
  400254:	00400d31 	.word	0x00400d31

00400258 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400258:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40025a:	480e      	ldr	r0, [pc, #56]	; (400294 <sysclk_init+0x3c>)
  40025c:	4b0e      	ldr	r3, [pc, #56]	; (400298 <sysclk_init+0x40>)
  40025e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400260:	2000      	movs	r0, #0
  400262:	213e      	movs	r1, #62	; 0x3e
  400264:	4b0d      	ldr	r3, [pc, #52]	; (40029c <sysclk_init+0x44>)
  400266:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400268:	4c0d      	ldr	r4, [pc, #52]	; (4002a0 <sysclk_init+0x48>)
  40026a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40026c:	2800      	cmp	r0, #0
  40026e:	d0fc      	beq.n	40026a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400270:	4b0c      	ldr	r3, [pc, #48]	; (4002a4 <sysclk_init+0x4c>)
  400272:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400274:	4a0c      	ldr	r2, [pc, #48]	; (4002a8 <sysclk_init+0x50>)
  400276:	4b0d      	ldr	r3, [pc, #52]	; (4002ac <sysclk_init+0x54>)
  400278:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40027a:	4c0d      	ldr	r4, [pc, #52]	; (4002b0 <sysclk_init+0x58>)
  40027c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40027e:	2800      	cmp	r0, #0
  400280:	d0fc      	beq.n	40027c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400282:	2010      	movs	r0, #16
  400284:	4b0b      	ldr	r3, [pc, #44]	; (4002b4 <sysclk_init+0x5c>)
  400286:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400288:	4b0b      	ldr	r3, [pc, #44]	; (4002b8 <sysclk_init+0x60>)
  40028a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40028c:	4801      	ldr	r0, [pc, #4]	; (400294 <sysclk_init+0x3c>)
  40028e:	4b02      	ldr	r3, [pc, #8]	; (400298 <sysclk_init+0x40>)
  400290:	4798      	blx	r3
  400292:	bd10      	pop	{r4, pc}
  400294:	07270e00 	.word	0x07270e00
  400298:	00400fcd 	.word	0x00400fcd
  40029c:	00400af5 	.word	0x00400af5
  4002a0:	00400b49 	.word	0x00400b49
  4002a4:	00400b59 	.word	0x00400b59
  4002a8:	20133f01 	.word	0x20133f01
  4002ac:	400e0400 	.word	0x400e0400
  4002b0:	00400b69 	.word	0x00400b69
  4002b4:	00400a91 	.word	0x00400a91
  4002b8:	00400eb9 	.word	0x00400eb9

004002bc <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4002bc:	b510      	push	{r4, lr}
  4002be:	4604      	mov	r4, r0
	spi_enable_clock(p_spi);
  4002c0:	4b10      	ldr	r3, [pc, #64]	; (400304 <spi_master_init+0x48>)
  4002c2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4002c4:	2380      	movs	r3, #128	; 0x80
  4002c6:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4002c8:	6863      	ldr	r3, [r4, #4]
  4002ca:	f043 0301 	orr.w	r3, r3, #1
  4002ce:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4002d0:	6863      	ldr	r3, [r4, #4]
  4002d2:	f043 0310 	orr.w	r3, r3, #16
  4002d6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4002d8:	6863      	ldr	r3, [r4, #4]
  4002da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4002de:	6063      	str	r3, [r4, #4]
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4002e0:	4620      	mov	r0, r4
  4002e2:	2100      	movs	r1, #0
  4002e4:	4b08      	ldr	r3, [pc, #32]	; (400308 <spi_master_init+0x4c>)
  4002e6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4002e8:	6863      	ldr	r3, [r4, #4]
  4002ea:	f023 0302 	bic.w	r3, r3, #2
  4002ee:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4002f0:	6863      	ldr	r3, [r4, #4]
  4002f2:	f023 0304 	bic.w	r3, r3, #4
  4002f6:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4002f8:	4620      	mov	r0, r4
  4002fa:	2100      	movs	r1, #0
  4002fc:	4b03      	ldr	r3, [pc, #12]	; (40030c <spi_master_init+0x50>)
  4002fe:	4798      	blx	r3
  400300:	bd10      	pop	{r4, pc}
  400302:	bf00      	nop
  400304:	00400bd1 	.word	0x00400bd1
  400308:	00400be1 	.word	0x00400be1
  40030c:	00400bf9 	.word	0x00400bf9

00400310 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400312:	4605      	mov	r5, r0
  400314:	460c      	mov	r4, r1
  400316:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  400318:	4618      	mov	r0, r3
  40031a:	4914      	ldr	r1, [pc, #80]	; (40036c <spi_master_setup_device+0x5c>)
  40031c:	4b14      	ldr	r3, [pc, #80]	; (400370 <spi_master_setup_device+0x60>)
  40031e:	4798      	blx	r3
  400320:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400322:	4628      	mov	r0, r5
  400324:	6821      	ldr	r1, [r4, #0]
  400326:	2200      	movs	r2, #0
  400328:	4613      	mov	r3, r2
  40032a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 400388 <spi_master_setup_device+0x78>
  40032e:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400330:	4628      	mov	r0, r5
  400332:	6821      	ldr	r1, [r4, #0]
  400334:	2208      	movs	r2, #8
  400336:	4b0f      	ldr	r3, [pc, #60]	; (400374 <spi_master_setup_device+0x64>)
  400338:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  40033a:	4628      	mov	r0, r5
  40033c:	6821      	ldr	r1, [r4, #0]
  40033e:	b2fa      	uxtb	r2, r7
  400340:	4b0d      	ldr	r3, [pc, #52]	; (400378 <spi_master_setup_device+0x68>)
  400342:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400344:	4628      	mov	r0, r5
  400346:	6821      	ldr	r1, [r4, #0]
  400348:	2208      	movs	r2, #8
  40034a:	4b0c      	ldr	r3, [pc, #48]	; (40037c <spi_master_setup_device+0x6c>)
  40034c:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40034e:	4628      	mov	r0, r5
  400350:	6821      	ldr	r1, [r4, #0]
  400352:	0872      	lsrs	r2, r6, #1
  400354:	4b0a      	ldr	r3, [pc, #40]	; (400380 <spi_master_setup_device+0x70>)
  400356:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400358:	f086 0201 	eor.w	r2, r6, #1
  40035c:	4628      	mov	r0, r5
  40035e:	6821      	ldr	r1, [r4, #0]
  400360:	f002 0201 	and.w	r2, r2, #1
  400364:	4b07      	ldr	r3, [pc, #28]	; (400384 <spi_master_setup_device+0x74>)
  400366:	4798      	blx	r3
  400368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40036a:	bf00      	nop
  40036c:	07270e00 	.word	0x07270e00
  400370:	00400ca5 	.word	0x00400ca5
  400374:	00400c91 	.word	0x00400c91
  400378:	00400cbd 	.word	0x00400cbd
  40037c:	00400c4d 	.word	0x00400c4d
  400380:	00400c0d 	.word	0x00400c0d
  400384:	00400c2d 	.word	0x00400c2d
  400388:	00400cd5 	.word	0x00400cd5

0040038c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40038c:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40038e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400390:	f013 0f04 	tst.w	r3, #4
  400394:	d005      	beq.n	4003a2 <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400396:	6809      	ldr	r1, [r1, #0]
  400398:	290f      	cmp	r1, #15
  40039a:	d80b      	bhi.n	4003b4 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40039c:	4b06      	ldr	r3, [pc, #24]	; (4003b8 <spi_select_device+0x2c>)
  40039e:	4798      	blx	r3
  4003a0:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4003a2:	680b      	ldr	r3, [r1, #0]
  4003a4:	2b03      	cmp	r3, #3
  4003a6:	d805      	bhi.n	4003b4 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4003a8:	2201      	movs	r2, #1
  4003aa:	fa02 f103 	lsl.w	r1, r2, r3
  4003ae:	43c9      	mvns	r1, r1
  4003b0:	4b01      	ldr	r3, [pc, #4]	; (4003b8 <spi_select_device+0x2c>)
  4003b2:	4798      	blx	r3
  4003b4:	bd08      	pop	{r3, pc}
  4003b6:	bf00      	nop
  4003b8:	00400be1 	.word	0x00400be1

004003bc <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  4003bc:	b510      	push	{r4, lr}
  4003be:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4003c0:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  4003c2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4003c6:	d0fb      	beq.n	4003c0 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  4003c8:	4620      	mov	r0, r4
  4003ca:	210f      	movs	r1, #15
  4003cc:	4b02      	ldr	r3, [pc, #8]	; (4003d8 <spi_deselect_device+0x1c>)
  4003ce:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4003d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4003d4:	6023      	str	r3, [r4, #0]
  4003d6:	bd10      	pop	{r4, pc}
  4003d8:	00400be1 	.word	0x00400be1

004003dc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4003dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003e0:	460c      	mov	r4, r1
  4003e2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
  4003e4:	b960      	cbnz	r0, 400400 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
  4003e6:	2a00      	cmp	r2, #0
  4003e8:	dd0e      	ble.n	400408 <_read+0x2c>
  4003ea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4003ec:	4e09      	ldr	r6, [pc, #36]	; (400414 <_read+0x38>)
  4003ee:	4d0a      	ldr	r5, [pc, #40]	; (400418 <_read+0x3c>)
  4003f0:	6830      	ldr	r0, [r6, #0]
  4003f2:	4621      	mov	r1, r4
  4003f4:	682b      	ldr	r3, [r5, #0]
  4003f6:	4798      	blx	r3
		ptr++;
  4003f8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4003fa:	42bc      	cmp	r4, r7
  4003fc:	d1f8      	bne.n	4003f0 <_read+0x14>
  4003fe:	e006      	b.n	40040e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400400:	f04f 30ff 	mov.w	r0, #4294967295
  400404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
  400408:	2000      	movs	r0, #0
  40040a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40040e:	4640      	mov	r0, r8
	}
	return nChars;
}
  400410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400414:	20000970 	.word	0x20000970
  400418:	20000968 	.word	0x20000968

0040041c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40041c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400420:	460e      	mov	r6, r1
  400422:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400424:	3801      	subs	r0, #1
  400426:	2802      	cmp	r0, #2
  400428:	d80f      	bhi.n	40044a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
  40042a:	b192      	cbz	r2, 400452 <_write+0x36>
  40042c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40042e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 40046c <_write+0x50>
  400432:	4f0d      	ldr	r7, [pc, #52]	; (400468 <_write+0x4c>)
  400434:	f8d8 0000 	ldr.w	r0, [r8]
  400438:	5d31      	ldrb	r1, [r6, r4]
  40043a:	683b      	ldr	r3, [r7, #0]
  40043c:	4798      	blx	r3
  40043e:	2800      	cmp	r0, #0
  400440:	db0a      	blt.n	400458 <_write+0x3c>
			return -1;
		}
		++nChars;
  400442:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400444:	42a5      	cmp	r5, r4
  400446:	d1f5      	bne.n	400434 <_write+0x18>
  400448:	e00a      	b.n	400460 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40044a:	f04f 30ff 	mov.w	r0, #4294967295
  40044e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
  400452:	2000      	movs	r0, #0
  400454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400458:	f04f 30ff 	mov.w	r0, #4294967295
  40045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
  400460:	4620      	mov	r0, r4
	}
	return nChars;
}
  400462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400466:	bf00      	nop
  400468:	2000096c 	.word	0x2000096c
  40046c:	20000970 	.word	0x20000970

00400470 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  400472:	4838      	ldr	r0, [pc, #224]	; (400554 <board_init+0xe4>)
  400474:	4b38      	ldr	r3, [pc, #224]	; (400558 <board_init+0xe8>)
  400476:	4798      	blx	r3
  400478:	200b      	movs	r0, #11
  40047a:	4c38      	ldr	r4, [pc, #224]	; (40055c <board_init+0xec>)
  40047c:	47a0      	blx	r4
  40047e:	200c      	movs	r0, #12
  400480:	47a0      	blx	r4
  400482:	200d      	movs	r0, #13
  400484:	47a0      	blx	r4
  400486:	4b36      	ldr	r3, [pc, #216]	; (400560 <board_init+0xf0>)
  400488:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40048c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40048e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400490:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400494:	4c33      	ldr	r4, [pc, #204]	; (400564 <board_init+0xf4>)
  400496:	2504      	movs	r5, #4
  400498:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40049a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40049e:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4004a0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4004a4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4004a6:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4004a8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4004ac:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4004ae:	f022 0204 	bic.w	r2, r2, #4
  4004b2:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4004b4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4004b6:	f022 0204 	bic.w	r2, r2, #4
  4004ba:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4004c0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004c2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4004cc:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004ce:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004d0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4004d8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004da:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4004e0:	4821      	ldr	r0, [pc, #132]	; (400568 <board_init+0xf8>)
  4004e2:	210c      	movs	r1, #12
  4004e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4004e8:	4b20      	ldr	r3, [pc, #128]	; (40056c <board_init+0xfc>)
  4004ea:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4004ec:	4f20      	ldr	r7, [pc, #128]	; (400570 <board_init+0x100>)
  4004ee:	2003      	movs	r0, #3
  4004f0:	4639      	mov	r1, r7
  4004f2:	4e20      	ldr	r6, [pc, #128]	; (400574 <board_init+0x104>)
  4004f4:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4004f6:	4628      	mov	r0, r5
  4004f8:	4639      	mov	r1, r7
  4004fa:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4004fc:	200c      	movs	r0, #12
  4004fe:	4639      	mov	r1, r7
  400500:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400502:	200d      	movs	r0, #13
  400504:	4639      	mov	r1, r7
  400506:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400508:	200e      	movs	r0, #14
  40050a:	4639      	mov	r1, r7
  40050c:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  40050e:	2009      	movs	r0, #9
  400510:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400514:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  400516:	200a      	movs	r0, #10
  400518:	4917      	ldr	r1, [pc, #92]	; (400578 <board_init+0x108>)
  40051a:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  40051c:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  400520:	2055      	movs	r0, #85	; 0x55
  400522:	4639      	mov	r1, r7
  400524:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  400526:	205f      	movs	r0, #95	; 0x5f
  400528:	4639      	mov	r1, r7
  40052a:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  40052c:	205b      	movs	r0, #91	; 0x5b
  40052e:	4913      	ldr	r1, [pc, #76]	; (40057c <board_init+0x10c>)
  400530:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400532:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400534:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400538:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40053a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40053c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400540:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400542:	f023 0304 	bic.w	r3, r3, #4
  400546:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400548:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40054a:	f023 0304 	bic.w	r3, r3, #4
  40054e:	6763      	str	r3, [r4, #116]	; 0x74
  400550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400552:	bf00      	nop
  400554:	400e1450 	.word	0x400e1450
  400558:	00400df9 	.word	0x00400df9
  40055c:	00400b79 	.word	0x00400b79
  400560:	400e1200 	.word	0x400e1200
  400564:	400e0e00 	.word	0x400e0e00
  400568:	400e1000 	.word	0x400e1000
  40056c:	00400841 	.word	0x00400841
  400570:	08000001 	.word	0x08000001
  400574:	0040071d 	.word	0x0040071d
  400578:	10000001 	.word	0x10000001
  40057c:	28000001 	.word	0x28000001

00400580 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400580:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400582:	2401      	movs	r4, #1
  400584:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400586:	2400      	movs	r4, #0
  400588:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  40058a:	f240 2502 	movw	r5, #514	; 0x202
  40058e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  400592:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400596:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  40059a:	6845      	ldr	r5, [r0, #4]
  40059c:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  40059e:	0052      	lsls	r2, r2, #1
  4005a0:	fbb1 f1f2 	udiv	r1, r1, r2
  4005a4:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  4005a6:	022d      	lsls	r5, r5, #8
  4005a8:	b2ad      	uxth	r5, r5
  4005aa:	432b      	orrs	r3, r5
  4005ac:	6043      	str	r3, [r0, #4]
	return 0;
}
  4005ae:	4620      	mov	r0, r4
  4005b0:	bc30      	pop	{r4, r5}
  4005b2:	4770      	bx	lr

004005b4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  4005b4:	6843      	ldr	r3, [r0, #4]
  4005b6:	4319      	orrs	r1, r3
  4005b8:	01d2      	lsls	r2, r2, #7
  4005ba:	b2d3      	uxtb	r3, r2
  4005bc:	4319      	orrs	r1, r3
  4005be:	6041      	str	r1, [r0, #4]
  4005c0:	4770      	bx	lr
  4005c2:	bf00      	nop

004005c4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  4005c4:	2301      	movs	r3, #1
  4005c6:	fa03 f101 	lsl.w	r1, r3, r1
  4005ca:	6101      	str	r1, [r0, #16]
  4005cc:	4770      	bx	lr
  4005ce:	bf00      	nop

004005d0 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4005d0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4005d4:	0052      	lsls	r2, r2, #1
  4005d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005da:	fbb3 f3f2 	udiv	r3, r3, r2
  4005de:	3b01      	subs	r3, #1
  4005e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
  4005e4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  4005e8:	4770      	bx	lr
  4005ea:	bf00      	nop

004005ec <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4005ec:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4005ee:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  4005f0:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4005f4:	d02e      	beq.n	400654 <pio_set_peripheral+0x68>
  4005f6:	d808      	bhi.n	40060a <pio_set_peripheral+0x1e>
  4005f8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4005fc:	d014      	beq.n	400628 <pio_set_peripheral+0x3c>
  4005fe:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400602:	d01d      	beq.n	400640 <pio_set_peripheral+0x54>
  400604:	2900      	cmp	r1, #0
  400606:	d135      	bne.n	400674 <pio_set_peripheral+0x88>
  400608:	e035      	b.n	400676 <pio_set_peripheral+0x8a>
  40060a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40060e:	d032      	beq.n	400676 <pio_set_peripheral+0x8a>
  400610:	d803      	bhi.n	40061a <pio_set_peripheral+0x2e>
  400612:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400616:	d027      	beq.n	400668 <pio_set_peripheral+0x7c>
  400618:	e02c      	b.n	400674 <pio_set_peripheral+0x88>
  40061a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40061e:	d02a      	beq.n	400676 <pio_set_peripheral+0x8a>
  400620:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400624:	d027      	beq.n	400676 <pio_set_peripheral+0x8a>
  400626:	e025      	b.n	400674 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400628:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40062a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40062c:	43d3      	mvns	r3, r2
  40062e:	4021      	ands	r1, r4
  400630:	4019      	ands	r1, r3
  400632:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400634:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400636:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400638:	4021      	ands	r1, r4
  40063a:	400b      	ands	r3, r1
  40063c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40063e:	e019      	b.n	400674 <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400640:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400642:	4313      	orrs	r3, r2
  400644:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400646:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400648:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40064a:	400b      	ands	r3, r1
  40064c:	ea23 0302 	bic.w	r3, r3, r2
  400650:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400652:	e00f      	b.n	400674 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400654:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400656:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400658:	400b      	ands	r3, r1
  40065a:	ea23 0302 	bic.w	r3, r3, r2
  40065e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400660:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400662:	4313      	orrs	r3, r2
  400664:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400666:	e005      	b.n	400674 <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400668:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40066a:	4313      	orrs	r3, r2
  40066c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40066e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400670:	4313      	orrs	r3, r2
  400672:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400674:	6042      	str	r2, [r0, #4]
}
  400676:	f85d 4b04 	ldr.w	r4, [sp], #4
  40067a:	4770      	bx	lr

0040067c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40067c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40067e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400682:	bf14      	ite	ne
  400684:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400686:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400688:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40068c:	bf14      	ite	ne
  40068e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400690:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400692:	f012 0f02 	tst.w	r2, #2
  400696:	d002      	beq.n	40069e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400698:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40069c:	e004      	b.n	4006a8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40069e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4006a2:	bf18      	it	ne
  4006a4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4006a8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4006aa:	6001      	str	r1, [r0, #0]
  4006ac:	4770      	bx	lr
  4006ae:	bf00      	nop

004006b0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4006b0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4006b2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006b4:	9c01      	ldr	r4, [sp, #4]
  4006b6:	b10c      	cbz	r4, 4006bc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4006b8:	6641      	str	r1, [r0, #100]	; 0x64
  4006ba:	e000      	b.n	4006be <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006bc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4006be:	b10b      	cbz	r3, 4006c4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4006c0:	6501      	str	r1, [r0, #80]	; 0x50
  4006c2:	e000      	b.n	4006c6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4006c4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4006c6:	b10a      	cbz	r2, 4006cc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4006c8:	6301      	str	r1, [r0, #48]	; 0x30
  4006ca:	e000      	b.n	4006ce <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4006cc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4006ce:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4006d0:	6001      	str	r1, [r0, #0]
}
  4006d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006d6:	4770      	bx	lr

004006d8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4006d8:	f012 0f10 	tst.w	r2, #16
  4006dc:	d010      	beq.n	400700 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4006de:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4006e2:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4006e6:	bf14      	ite	ne
  4006e8:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4006ec:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4006f0:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4006f4:	bf14      	ite	ne
  4006f6:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4006fa:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4006fe:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400700:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400704:	4770      	bx	lr
  400706:	bf00      	nop

00400708 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400708:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40070a:	6401      	str	r1, [r0, #64]	; 0x40
  40070c:	4770      	bx	lr
  40070e:	bf00      	nop

00400710 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400710:	6441      	str	r1, [r0, #68]	; 0x44
  400712:	4770      	bx	lr

00400714 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400714:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400716:	4770      	bx	lr

00400718 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400718:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40071a:	4770      	bx	lr

0040071c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40071c:	b570      	push	{r4, r5, r6, lr}
  40071e:	b082      	sub	sp, #8
  400720:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400722:	0944      	lsrs	r4, r0, #5
  400724:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  400728:	f204 7407 	addw	r4, r4, #1799	; 0x707
  40072c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40072e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
  400732:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  400736:	d047      	beq.n	4007c8 <pio_configure_pin+0xac>
  400738:	d809      	bhi.n	40074e <pio_configure_pin+0x32>
  40073a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  40073e:	d021      	beq.n	400784 <pio_configure_pin+0x68>
  400740:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  400744:	d02f      	beq.n	4007a6 <pio_configure_pin+0x8a>
  400746:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  40074a:	d16f      	bne.n	40082c <pio_configure_pin+0x110>
  40074c:	e009      	b.n	400762 <pio_configure_pin+0x46>
  40074e:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  400752:	d055      	beq.n	400800 <pio_configure_pin+0xe4>
  400754:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  400758:	d052      	beq.n	400800 <pio_configure_pin+0xe4>
  40075a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  40075e:	d044      	beq.n	4007ea <pio_configure_pin+0xce>
  400760:	e064      	b.n	40082c <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400762:	f000 001f 	and.w	r0, r0, #31
  400766:	2401      	movs	r4, #1
  400768:	4084      	lsls	r4, r0
  40076a:	4630      	mov	r0, r6
  40076c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400770:	4622      	mov	r2, r4
  400772:	4b30      	ldr	r3, [pc, #192]	; (400834 <pio_configure_pin+0x118>)
  400774:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400776:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40077a:	bf14      	ite	ne
  40077c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40077e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400780:	2001      	movs	r0, #1
  400782:	e054      	b.n	40082e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400784:	f000 001f 	and.w	r0, r0, #31
  400788:	2401      	movs	r4, #1
  40078a:	4084      	lsls	r4, r0
  40078c:	4630      	mov	r0, r6
  40078e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400792:	4622      	mov	r2, r4
  400794:	4b27      	ldr	r3, [pc, #156]	; (400834 <pio_configure_pin+0x118>)
  400796:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400798:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40079c:	bf14      	ite	ne
  40079e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007a0:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007a2:	2001      	movs	r0, #1
  4007a4:	e043      	b.n	40082e <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4007a6:	f000 001f 	and.w	r0, r0, #31
  4007aa:	2401      	movs	r4, #1
  4007ac:	4084      	lsls	r4, r0
  4007ae:	4630      	mov	r0, r6
  4007b0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4007b4:	4622      	mov	r2, r4
  4007b6:	4b1f      	ldr	r3, [pc, #124]	; (400834 <pio_configure_pin+0x118>)
  4007b8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007ba:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007be:	bf14      	ite	ne
  4007c0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007c2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007c4:	2001      	movs	r0, #1
  4007c6:	e032      	b.n	40082e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4007c8:	f000 001f 	and.w	r0, r0, #31
  4007cc:	2401      	movs	r4, #1
  4007ce:	4084      	lsls	r4, r0
  4007d0:	4630      	mov	r0, r6
  4007d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007d6:	4622      	mov	r2, r4
  4007d8:	4b16      	ldr	r3, [pc, #88]	; (400834 <pio_configure_pin+0x118>)
  4007da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007e0:	bf14      	ite	ne
  4007e2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007e4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007e6:	2001      	movs	r0, #1
  4007e8:	e021      	b.n	40082e <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4007ea:	f000 011f 	and.w	r1, r0, #31
  4007ee:	2401      	movs	r4, #1
  4007f0:	4630      	mov	r0, r6
  4007f2:	fa04 f101 	lsl.w	r1, r4, r1
  4007f6:	462a      	mov	r2, r5
  4007f8:	4b0f      	ldr	r3, [pc, #60]	; (400838 <pio_configure_pin+0x11c>)
  4007fa:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4007fc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4007fe:	e016      	b.n	40082e <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400800:	f000 011f 	and.w	r1, r0, #31
  400804:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400806:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40080a:	ea05 0304 	and.w	r3, r5, r4
  40080e:	9300      	str	r3, [sp, #0]
  400810:	4630      	mov	r0, r6
  400812:	fa04 f101 	lsl.w	r1, r4, r1
  400816:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40081a:	bf14      	ite	ne
  40081c:	2200      	movne	r2, #0
  40081e:	2201      	moveq	r2, #1
  400820:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400824:	4d05      	ldr	r5, [pc, #20]	; (40083c <pio_configure_pin+0x120>)
  400826:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  400828:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40082a:	e000      	b.n	40082e <pio_configure_pin+0x112>

	default:
		return 0;
  40082c:	2000      	movs	r0, #0
	}

	return 1;
}
  40082e:	b002      	add	sp, #8
  400830:	bd70      	pop	{r4, r5, r6, pc}
  400832:	bf00      	nop
  400834:	004005ed 	.word	0x004005ed
  400838:	0040067d 	.word	0x0040067d
  40083c:	004006b1 	.word	0x004006b1

00400840 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400840:	b5f0      	push	{r4, r5, r6, r7, lr}
  400842:	b083      	sub	sp, #12
  400844:	4607      	mov	r7, r0
  400846:	460e      	mov	r6, r1
  400848:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40084a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  40084e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  400852:	d038      	beq.n	4008c6 <pio_configure_pin_group+0x86>
  400854:	d809      	bhi.n	40086a <pio_configure_pin_group+0x2a>
  400856:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  40085a:	d01c      	beq.n	400896 <pio_configure_pin_group+0x56>
  40085c:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  400860:	d025      	beq.n	4008ae <pio_configure_pin_group+0x6e>
  400862:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  400866:	d150      	bne.n	40090a <pio_configure_pin_group+0xca>
  400868:	e009      	b.n	40087e <pio_configure_pin_group+0x3e>
  40086a:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  40086e:	d03a      	beq.n	4008e6 <pio_configure_pin_group+0xa6>
  400870:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  400874:	d037      	beq.n	4008e6 <pio_configure_pin_group+0xa6>
  400876:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  40087a:	d030      	beq.n	4008de <pio_configure_pin_group+0x9e>
  40087c:	e045      	b.n	40090a <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40087e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400882:	4632      	mov	r2, r6
  400884:	4b22      	ldr	r3, [pc, #136]	; (400910 <pio_configure_pin_group+0xd0>)
  400886:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400888:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40088c:	bf14      	ite	ne
  40088e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400890:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400892:	2001      	movs	r0, #1
  400894:	e03a      	b.n	40090c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400896:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40089a:	4632      	mov	r2, r6
  40089c:	4b1c      	ldr	r3, [pc, #112]	; (400910 <pio_configure_pin_group+0xd0>)
  40089e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008a0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008a4:	bf14      	ite	ne
  4008a6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008a8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008aa:	2001      	movs	r0, #1
  4008ac:	e02e      	b.n	40090c <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4008ae:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4008b2:	4632      	mov	r2, r6
  4008b4:	4b16      	ldr	r3, [pc, #88]	; (400910 <pio_configure_pin_group+0xd0>)
  4008b6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008b8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008bc:	bf14      	ite	ne
  4008be:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008c0:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008c2:	2001      	movs	r0, #1
  4008c4:	e022      	b.n	40090c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4008c6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4008ca:	4632      	mov	r2, r6
  4008cc:	4b10      	ldr	r3, [pc, #64]	; (400910 <pio_configure_pin_group+0xd0>)
  4008ce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008d0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008d4:	bf14      	ite	ne
  4008d6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008d8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008da:	2001      	movs	r0, #1
  4008dc:	e016      	b.n	40090c <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4008de:	4b0d      	ldr	r3, [pc, #52]	; (400914 <pio_configure_pin_group+0xd4>)
  4008e0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4008e2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4008e4:	e012      	b.n	40090c <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4008e6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4008ea:	f005 0301 	and.w	r3, r5, #1
  4008ee:	9300      	str	r3, [sp, #0]
  4008f0:	4638      	mov	r0, r7
  4008f2:	4631      	mov	r1, r6
  4008f4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4008f8:	bf14      	ite	ne
  4008fa:	2200      	movne	r2, #0
  4008fc:	2201      	moveq	r2, #1
  4008fe:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400902:	4c05      	ldr	r4, [pc, #20]	; (400918 <pio_configure_pin_group+0xd8>)
  400904:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400906:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400908:	e000      	b.n	40090c <pio_configure_pin_group+0xcc>

	default:
		return 0;
  40090a:	2000      	movs	r0, #0
	}

	return 1;
}
  40090c:	b003      	add	sp, #12
  40090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400910:	004005ed 	.word	0x004005ed
  400914:	0040067d 	.word	0x0040067d
  400918:	004006b1 	.word	0x004006b1

0040091c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40091c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400920:	4681      	mov	r9, r0
  400922:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400924:	4b14      	ldr	r3, [pc, #80]	; (400978 <pio_handler_process+0x5c>)
  400926:	4798      	blx	r3
  400928:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40092a:	4648      	mov	r0, r9
  40092c:	4b13      	ldr	r3, [pc, #76]	; (40097c <pio_handler_process+0x60>)
  40092e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400930:	4005      	ands	r5, r0
  400932:	d017      	beq.n	400964 <pio_handler_process+0x48>
  400934:	4f12      	ldr	r7, [pc, #72]	; (400980 <pio_handler_process+0x64>)
  400936:	f107 040c 	add.w	r4, r7, #12
  40093a:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40093c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  400940:	42b3      	cmp	r3, r6
  400942:	d10a      	bne.n	40095a <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400944:	f854 1c08 	ldr.w	r1, [r4, #-8]
  400948:	4229      	tst	r1, r5
  40094a:	d006      	beq.n	40095a <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40094c:	6823      	ldr	r3, [r4, #0]
  40094e:	4630      	mov	r0, r6
  400950:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400952:	f854 3c08 	ldr.w	r3, [r4, #-8]
  400956:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40095a:	42bc      	cmp	r4, r7
  40095c:	d002      	beq.n	400964 <pio_handler_process+0x48>
  40095e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400960:	2d00      	cmp	r5, #0
  400962:	d1eb      	bne.n	40093c <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400964:	4b07      	ldr	r3, [pc, #28]	; (400984 <pio_handler_process+0x68>)
  400966:	681b      	ldr	r3, [r3, #0]
  400968:	b123      	cbz	r3, 400974 <pio_handler_process+0x58>
		if (pio_capture_handler) {
  40096a:	4b07      	ldr	r3, [pc, #28]	; (400988 <pio_handler_process+0x6c>)
  40096c:	681b      	ldr	r3, [r3, #0]
  40096e:	b10b      	cbz	r3, 400974 <pio_handler_process+0x58>
			pio_capture_handler(p_pio);
  400970:	4648      	mov	r0, r9
  400972:	4798      	blx	r3
  400974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400978:	00400715 	.word	0x00400715
  40097c:	00400719 	.word	0x00400719
  400980:	200008b0 	.word	0x200008b0
  400984:	20000974 	.word	0x20000974
  400988:	200008ac 	.word	0x200008ac

0040098c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40098e:	4c0b      	ldr	r4, [pc, #44]	; (4009bc <pio_handler_set+0x30>)
  400990:	6824      	ldr	r4, [r4, #0]
  400992:	2c06      	cmp	r4, #6
  400994:	d810      	bhi.n	4009b8 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  400996:	4f0a      	ldr	r7, [pc, #40]	; (4009c0 <pio_handler_set+0x34>)
  400998:	0126      	lsls	r6, r4, #4
  40099a:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
  40099c:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  40099e:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
  4009a0:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
  4009a2:	9906      	ldr	r1, [sp, #24]
  4009a4:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
  4009a6:	3401      	adds	r4, #1
  4009a8:	4904      	ldr	r1, [pc, #16]	; (4009bc <pio_handler_set+0x30>)
  4009aa:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4009ac:	4611      	mov	r1, r2
  4009ae:	461a      	mov	r2, r3
  4009b0:	4b04      	ldr	r3, [pc, #16]	; (4009c4 <pio_handler_set+0x38>)
  4009b2:	4798      	blx	r3

	return 0;
  4009b4:	2000      	movs	r0, #0
  4009b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4009b8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4009ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009bc:	200008a8 	.word	0x200008a8
  4009c0:	200008b0 	.word	0x200008b0
  4009c4:	004006d9 	.word	0x004006d9

004009c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4009ca:	4802      	ldr	r0, [pc, #8]	; (4009d4 <PIOA_Handler+0xc>)
  4009cc:	210b      	movs	r1, #11
  4009ce:	4b02      	ldr	r3, [pc, #8]	; (4009d8 <PIOA_Handler+0x10>)
  4009d0:	4798      	blx	r3
  4009d2:	bd08      	pop	{r3, pc}
  4009d4:	400e0e00 	.word	0x400e0e00
  4009d8:	0040091d 	.word	0x0040091d

004009dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4009de:	4802      	ldr	r0, [pc, #8]	; (4009e8 <PIOB_Handler+0xc>)
  4009e0:	210c      	movs	r1, #12
  4009e2:	4b02      	ldr	r3, [pc, #8]	; (4009ec <PIOB_Handler+0x10>)
  4009e4:	4798      	blx	r3
  4009e6:	bd08      	pop	{r3, pc}
  4009e8:	400e1000 	.word	0x400e1000
  4009ec:	0040091d 	.word	0x0040091d

004009f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4009f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4009f2:	4802      	ldr	r0, [pc, #8]	; (4009fc <PIOC_Handler+0xc>)
  4009f4:	210d      	movs	r1, #13
  4009f6:	4b02      	ldr	r3, [pc, #8]	; (400a00 <PIOC_Handler+0x10>)
  4009f8:	4798      	blx	r3
  4009fa:	bd08      	pop	{r3, pc}
  4009fc:	400e1200 	.word	0x400e1200
  400a00:	0040091d 	.word	0x0040091d

00400a04 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400a08:	4605      	mov	r5, r0
  400a0a:	460c      	mov	r4, r1
  400a0c:	4691      	mov	r9, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400a0e:	4b1b      	ldr	r3, [pc, #108]	; (400a7c <pio_handler_set_priority+0x78>)
  400a10:	4798      	blx	r3
  400a12:	4680      	mov	r8, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400a14:	4628      	mov	r0, r5
  400a16:	f04f 31ff 	mov.w	r1, #4294967295
  400a1a:	4b19      	ldr	r3, [pc, #100]	; (400a80 <pio_handler_set_priority+0x7c>)
  400a1c:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400a1e:	4628      	mov	r0, r5
  400a20:	4b18      	ldr	r3, [pc, #96]	; (400a84 <pio_handler_set_priority+0x80>)
  400a22:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400a24:	b2e7      	uxtb	r7, r4
  400a26:	f007 031f 	and.w	r3, r7, #31
  400a2a:	2601      	movs	r6, #1
  400a2c:	409e      	lsls	r6, r3
  400a2e:	0963      	lsrs	r3, r4, #5
  400a30:	009b      	lsls	r3, r3, #2
  400a32:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400a36:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  400a3a:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400a3e:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400a42:	2c00      	cmp	r4, #0
  400a44:	da09      	bge.n	400a5a <pio_handler_set_priority+0x56>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400a46:	f007 070f 	and.w	r7, r7, #15
  400a4a:	ea4f 1909 	mov.w	r9, r9, lsl #4
  400a4e:	fa5f f989 	uxtb.w	r9, r9
  400a52:	4a0d      	ldr	r2, [pc, #52]	; (400a88 <pio_handler_set_priority+0x84>)
  400a54:	f802 9007 	strb.w	r9, [r2, r7]
  400a58:	e009      	b.n	400a6e <pio_handler_set_priority+0x6a>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400a5a:	ea4f 1909 	mov.w	r9, r9, lsl #4
  400a5e:	fa5f f989 	uxtb.w	r9, r9
  400a62:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  400a66:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  400a6a:	f884 9300 	strb.w	r9, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400a6e:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400a70:	4628      	mov	r0, r5
  400a72:	4641      	mov	r1, r8
  400a74:	4b05      	ldr	r3, [pc, #20]	; (400a8c <pio_handler_set_priority+0x88>)
  400a76:	4798      	blx	r3
  400a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a7c:	00400719 	.word	0x00400719
  400a80:	00400711 	.word	0x00400711
  400a84:	00400715 	.word	0x00400715
  400a88:	e000ed14 	.word	0xe000ed14
  400a8c:	00400709 	.word	0x00400709

00400a90 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400a90:	4b17      	ldr	r3, [pc, #92]	; (400af0 <pmc_switch_mck_to_pllack+0x60>)
  400a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  400a98:	4310      	orrs	r0, r2
  400a9a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a9e:	f013 0f08 	tst.w	r3, #8
  400aa2:	d109      	bne.n	400ab8 <pmc_switch_mck_to_pllack+0x28>
  400aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400aa8:	4911      	ldr	r1, [pc, #68]	; (400af0 <pmc_switch_mck_to_pllack+0x60>)
  400aaa:	e001      	b.n	400ab0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400aac:	3b01      	subs	r3, #1
  400aae:	d019      	beq.n	400ae4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ab0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ab2:	f012 0f08 	tst.w	r2, #8
  400ab6:	d0f9      	beq.n	400aac <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ab8:	4b0d      	ldr	r3, [pc, #52]	; (400af0 <pmc_switch_mck_to_pllack+0x60>)
  400aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400abc:	f022 0203 	bic.w	r2, r2, #3
  400ac0:	f042 0202 	orr.w	r2, r2, #2
  400ac4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ac6:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400ac8:	f010 0008 	ands.w	r0, r0, #8
  400acc:	d10c      	bne.n	400ae8 <pmc_switch_mck_to_pllack+0x58>
  400ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ad2:	4907      	ldr	r1, [pc, #28]	; (400af0 <pmc_switch_mck_to_pllack+0x60>)
  400ad4:	e001      	b.n	400ada <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ad6:	3b01      	subs	r3, #1
  400ad8:	d008      	beq.n	400aec <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ada:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400adc:	f012 0f08 	tst.w	r2, #8
  400ae0:	d0f9      	beq.n	400ad6 <pmc_switch_mck_to_pllack+0x46>
  400ae2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400ae4:	2001      	movs	r0, #1
  400ae6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400ae8:	2000      	movs	r0, #0
  400aea:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400aec:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400aee:	4770      	bx	lr
  400af0:	400e0400 	.word	0x400e0400

00400af4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400af4:	b138      	cbz	r0, 400b06 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400af6:	4911      	ldr	r1, [pc, #68]	; (400b3c <pmc_switch_mainck_to_xtal+0x48>)
  400af8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400afa:	4a11      	ldr	r2, [pc, #68]	; (400b40 <pmc_switch_mainck_to_xtal+0x4c>)
  400afc:	401a      	ands	r2, r3
  400afe:	4b11      	ldr	r3, [pc, #68]	; (400b44 <pmc_switch_mainck_to_xtal+0x50>)
  400b00:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b02:	620b      	str	r3, [r1, #32]
  400b04:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b06:	4a0d      	ldr	r2, [pc, #52]	; (400b3c <pmc_switch_mainck_to_xtal+0x48>)
  400b08:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b0a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400b0e:	f023 0303 	bic.w	r3, r3, #3
  400b12:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400b16:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400b1a:	0209      	lsls	r1, r1, #8
  400b1c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b1e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b20:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b22:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b24:	f013 0f01 	tst.w	r3, #1
  400b28:	d0fb      	beq.n	400b22 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b2a:	4a04      	ldr	r2, [pc, #16]	; (400b3c <pmc_switch_mainck_to_xtal+0x48>)
  400b2c:	6a13      	ldr	r3, [r2, #32]
  400b2e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400b36:	6213      	str	r3, [r2, #32]
  400b38:	4770      	bx	lr
  400b3a:	bf00      	nop
  400b3c:	400e0400 	.word	0x400e0400
  400b40:	fec8fffc 	.word	0xfec8fffc
  400b44:	01370002 	.word	0x01370002

00400b48 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b48:	4b02      	ldr	r3, [pc, #8]	; (400b54 <pmc_osc_is_ready_mainck+0xc>)
  400b4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b4c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b50:	4770      	bx	lr
  400b52:	bf00      	nop
  400b54:	400e0400 	.word	0x400e0400

00400b58 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b5c:	4b01      	ldr	r3, [pc, #4]	; (400b64 <pmc_disable_pllack+0xc>)
  400b5e:	629a      	str	r2, [r3, #40]	; 0x28
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	400e0400 	.word	0x400e0400

00400b68 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b68:	4b02      	ldr	r3, [pc, #8]	; (400b74 <pmc_is_locked_pllack+0xc>)
  400b6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b6c:	f000 0002 	and.w	r0, r0, #2
  400b70:	4770      	bx	lr
  400b72:	bf00      	nop
  400b74:	400e0400 	.word	0x400e0400

00400b78 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400b78:	2822      	cmp	r0, #34	; 0x22
  400b7a:	d820      	bhi.n	400bbe <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  400b7c:	281f      	cmp	r0, #31
  400b7e:	d80d      	bhi.n	400b9c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b80:	4b12      	ldr	r3, [pc, #72]	; (400bcc <pmc_enable_periph_clk+0x54>)
  400b82:	699a      	ldr	r2, [r3, #24]
  400b84:	2301      	movs	r3, #1
  400b86:	4083      	lsls	r3, r0
  400b88:	401a      	ands	r2, r3
  400b8a:	4293      	cmp	r3, r2
  400b8c:	d019      	beq.n	400bc2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b8e:	2301      	movs	r3, #1
  400b90:	fa03 f000 	lsl.w	r0, r3, r0
  400b94:	4b0d      	ldr	r3, [pc, #52]	; (400bcc <pmc_enable_periph_clk+0x54>)
  400b96:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b98:	2000      	movs	r0, #0
  400b9a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b9c:	4b0b      	ldr	r3, [pc, #44]	; (400bcc <pmc_enable_periph_clk+0x54>)
  400b9e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  400ba2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ba4:	2301      	movs	r3, #1
  400ba6:	4083      	lsls	r3, r0
  400ba8:	401a      	ands	r2, r3
  400baa:	4293      	cmp	r3, r2
  400bac:	d00b      	beq.n	400bc6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400bae:	2301      	movs	r3, #1
  400bb0:	fa03 f000 	lsl.w	r0, r3, r0
  400bb4:	4b05      	ldr	r3, [pc, #20]	; (400bcc <pmc_enable_periph_clk+0x54>)
  400bb6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400bba:	2000      	movs	r0, #0
  400bbc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400bbe:	2001      	movs	r0, #1
  400bc0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400bc2:	2000      	movs	r0, #0
  400bc4:	4770      	bx	lr
  400bc6:	2000      	movs	r0, #0
}
  400bc8:	4770      	bx	lr
  400bca:	bf00      	nop
  400bcc:	400e0400 	.word	0x400e0400

00400bd0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400bd0:	b508      	push	{r3, lr}
  400bd2:	2015      	movs	r0, #21
  400bd4:	4b01      	ldr	r3, [pc, #4]	; (400bdc <spi_enable_clock+0xc>)
  400bd6:	4798      	blx	r3
  400bd8:	bd08      	pop	{r3, pc}
  400bda:	bf00      	nop
  400bdc:	00400b79 	.word	0x00400b79

00400be0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400be0:	6843      	ldr	r3, [r0, #4]
  400be2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400be6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400be8:	6843      	ldr	r3, [r0, #4]
  400bea:	0409      	lsls	r1, r1, #16
  400bec:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400bf0:	430b      	orrs	r3, r1
  400bf2:	6043      	str	r3, [r0, #4]
  400bf4:	4770      	bx	lr
  400bf6:	bf00      	nop

00400bf8 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400bf8:	6843      	ldr	r3, [r0, #4]
  400bfa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400bfe:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400c00:	6843      	ldr	r3, [r0, #4]
  400c02:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  400c06:	6041      	str	r1, [r0, #4]
  400c08:	4770      	bx	lr
  400c0a:	bf00      	nop

00400c0c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400c0c:	b132      	cbz	r2, 400c1c <spi_set_clock_polarity+0x10>
  400c0e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400c12:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c14:	f043 0301 	orr.w	r3, r3, #1
  400c18:	6303      	str	r3, [r0, #48]	; 0x30
  400c1a:	4770      	bx	lr
  400c1c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400c20:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c22:	f023 0301 	bic.w	r3, r3, #1
  400c26:	6303      	str	r3, [r0, #48]	; 0x30
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop

00400c2c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400c2c:	b132      	cbz	r2, 400c3c <spi_set_clock_phase+0x10>
  400c2e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400c32:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c34:	f043 0302 	orr.w	r3, r3, #2
  400c38:	6303      	str	r3, [r0, #48]	; 0x30
  400c3a:	4770      	bx	lr
  400c3c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400c40:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c42:	f023 0302 	bic.w	r3, r3, #2
  400c46:	6303      	str	r3, [r0, #48]	; 0x30
  400c48:	4770      	bx	lr
  400c4a:	bf00      	nop

00400c4c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400c4c:	2a04      	cmp	r2, #4
  400c4e:	d10a      	bne.n	400c66 <spi_configure_cs_behavior+0x1a>
  400c50:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400c54:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c56:	f023 0308 	bic.w	r3, r3, #8
  400c5a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400c5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c5e:	f043 0304 	orr.w	r3, r3, #4
  400c62:	6303      	str	r3, [r0, #48]	; 0x30
  400c64:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400c66:	b952      	cbnz	r2, 400c7e <spi_configure_cs_behavior+0x32>
  400c68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400c6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c6e:	f023 0308 	bic.w	r3, r3, #8
  400c72:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400c74:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c76:	f023 0304 	bic.w	r3, r3, #4
  400c7a:	6303      	str	r3, [r0, #48]	; 0x30
  400c7c:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400c7e:	2a08      	cmp	r2, #8
  400c80:	d105      	bne.n	400c8e <spi_configure_cs_behavior+0x42>
  400c82:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400c86:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c88:	f043 0308 	orr.w	r3, r3, #8
  400c8c:	6303      	str	r3, [r0, #48]	; 0x30
  400c8e:	4770      	bx	lr

00400c90 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400c90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400c94:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400c9a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400c9c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c9e:	431a      	orrs	r2, r3
  400ca0:	630a      	str	r2, [r1, #48]	; 0x30
  400ca2:	4770      	bx	lr

00400ca4 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400ca4:	1e43      	subs	r3, r0, #1
  400ca6:	4419      	add	r1, r3
  400ca8:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400cac:	1e43      	subs	r3, r0, #1
  400cae:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400cb0:	bf94      	ite	ls
  400cb2:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  400cb4:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
  400cb8:	b200      	sxth	r0, r0
  400cba:	4770      	bx	lr

00400cbc <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400cbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400cc0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400cc6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400cc8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400cca:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  400cce:	630a      	str	r2, [r1, #48]	; 0x30
  400cd0:	4770      	bx	lr
  400cd2:	bf00      	nop

00400cd4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400cd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400cd8:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400cda:	b280      	uxth	r0, r0
  400cdc:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400cde:	6b08      	ldr	r0, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
  400ce0:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400ce4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400ce8:	630a      	str	r2, [r1, #48]	; 0x30
  400cea:	4770      	bx	lr

00400cec <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400cec:	4b0f      	ldr	r3, [pc, #60]	; (400d2c <twi_set_speed+0x40>)
  400cee:	4299      	cmp	r1, r3
  400cf0:	d819      	bhi.n	400d26 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400cf2:	0049      	lsls	r1, r1, #1
  400cf4:	fbb2 f2f1 	udiv	r2, r2, r1
  400cf8:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400cfa:	2aff      	cmp	r2, #255	; 0xff
  400cfc:	d907      	bls.n	400d0e <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400cfe:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
  400d00:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400d02:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d04:	2aff      	cmp	r2, #255	; 0xff
  400d06:	d903      	bls.n	400d10 <twi_set_speed+0x24>
  400d08:	2b07      	cmp	r3, #7
  400d0a:	d1f9      	bne.n	400d00 <twi_set_speed+0x14>
  400d0c:	e000      	b.n	400d10 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400d0e:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400d10:	0211      	lsls	r1, r2, #8
  400d12:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400d14:	041b      	lsls	r3, r3, #16
  400d16:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400d1a:	430b      	orrs	r3, r1
  400d1c:	b2d2      	uxtb	r2, r2
  400d1e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400d20:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400d22:	2000      	movs	r0, #0
  400d24:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400d26:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400d28:	4770      	bx	lr
  400d2a:	bf00      	nop
  400d2c:	00061a80 	.word	0x00061a80

00400d30 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400d30:	b538      	push	{r3, r4, r5, lr}
  400d32:	4604      	mov	r4, r0
  400d34:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400d36:	f04f 33ff 	mov.w	r3, #4294967295
  400d3a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400d3c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400d3e:	2380      	movs	r3, #128	; 0x80
  400d40:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400d42:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400d44:	2308      	movs	r3, #8
  400d46:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400d48:	2320      	movs	r3, #32
  400d4a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400d4c:	2304      	movs	r3, #4
  400d4e:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400d50:	6849      	ldr	r1, [r1, #4]
  400d52:	682a      	ldr	r2, [r5, #0]
  400d54:	4b05      	ldr	r3, [pc, #20]	; (400d6c <twi_master_init+0x3c>)
  400d56:	4798      	blx	r3
  400d58:	2801      	cmp	r0, #1
  400d5a:	bf14      	ite	ne
  400d5c:	2000      	movne	r0, #0
  400d5e:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400d60:	7a6b      	ldrb	r3, [r5, #9]
  400d62:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400d64:	bf04      	itt	eq
  400d66:	2340      	moveq	r3, #64	; 0x40
  400d68:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400d6a:	bd38      	pop	{r3, r4, r5, pc}
  400d6c:	00400ced 	.word	0x00400ced

00400d70 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400d70:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400d72:	23ac      	movs	r3, #172	; 0xac
  400d74:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400d76:	680a      	ldr	r2, [r1, #0]
  400d78:	684b      	ldr	r3, [r1, #4]
  400d7a:	fbb2 f3f3 	udiv	r3, r2, r3
  400d7e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400d80:	1e5c      	subs	r4, r3, #1
  400d82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400d86:	4294      	cmp	r4, r2
  400d88:	d80a      	bhi.n	400da0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400d8a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400d8c:	688b      	ldr	r3, [r1, #8]
  400d8e:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400d90:	f240 2302 	movw	r3, #514	; 0x202
  400d94:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400d98:	2350      	movs	r3, #80	; 0x50
  400d9a:	6003      	str	r3, [r0, #0]

	return 0;
  400d9c:	2000      	movs	r0, #0
  400d9e:	e000      	b.n	400da2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400da0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400da2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400da6:	4770      	bx	lr

00400da8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400da8:	6943      	ldr	r3, [r0, #20]
  400daa:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400dae:	bf1a      	itte	ne
  400db0:	61c1      	strne	r1, [r0, #28]
	return 0;
  400db2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400db4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400db6:	4770      	bx	lr

00400db8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400db8:	6943      	ldr	r3, [r0, #20]
  400dba:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400dbe:	bf1d      	ittte	ne
  400dc0:	6983      	ldrne	r3, [r0, #24]
  400dc2:	700b      	strbne	r3, [r1, #0]
	return 0;
  400dc4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400dc6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400dc8:	4770      	bx	lr
  400dca:	bf00      	nop

00400dcc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400dcc:	6943      	ldr	r3, [r0, #20]
  400dce:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400dd2:	bf1d      	ittte	ne
  400dd4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400dd8:	61c1      	strne	r1, [r0, #28]
	return 0;
  400dda:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400ddc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400dde:	4770      	bx	lr

00400de0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400de0:	6943      	ldr	r3, [r0, #20]
  400de2:	f013 0f01 	tst.w	r3, #1
  400de6:	d005      	beq.n	400df4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400de8:	6983      	ldr	r3, [r0, #24]
  400dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400dee:	600b      	str	r3, [r1, #0]

	return 0;
  400df0:	2000      	movs	r0, #0
  400df2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400df4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400df6:	4770      	bx	lr

00400df8 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dfc:	6043      	str	r3, [r0, #4]
  400dfe:	4770      	bx	lr

00400e00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400e00:	e7fe      	b.n	400e00 <Dummy_Handler>
  400e02:	bf00      	nop

00400e04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400e04:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400e06:	4b20      	ldr	r3, [pc, #128]	; (400e88 <Reset_Handler+0x84>)
  400e08:	4a20      	ldr	r2, [pc, #128]	; (400e8c <Reset_Handler+0x88>)
  400e0a:	429a      	cmp	r2, r3
  400e0c:	d912      	bls.n	400e34 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400e0e:	4b20      	ldr	r3, [pc, #128]	; (400e90 <Reset_Handler+0x8c>)
  400e10:	4a1d      	ldr	r2, [pc, #116]	; (400e88 <Reset_Handler+0x84>)
  400e12:	429a      	cmp	r2, r3
  400e14:	d21f      	bcs.n	400e56 <Reset_Handler+0x52>
  400e16:	1d13      	adds	r3, r2, #4
  400e18:	4c1e      	ldr	r4, [pc, #120]	; (400e94 <Reset_Handler+0x90>)
  400e1a:	1ae4      	subs	r4, r4, r3
  400e1c:	f024 0403 	bic.w	r4, r4, #3
  400e20:	3404      	adds	r4, #4
  400e22:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  400e24:	4610      	mov	r0, r2
  400e26:	4919      	ldr	r1, [pc, #100]	; (400e8c <Reset_Handler+0x88>)
  400e28:	585a      	ldr	r2, [r3, r1]
  400e2a:	501a      	str	r2, [r3, r0]
  400e2c:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400e2e:	42a3      	cmp	r3, r4
  400e30:	d1fa      	bne.n	400e28 <Reset_Handler+0x24>
  400e32:	e010      	b.n	400e56 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400e34:	4b14      	ldr	r3, [pc, #80]	; (400e88 <Reset_Handler+0x84>)
  400e36:	4a15      	ldr	r2, [pc, #84]	; (400e8c <Reset_Handler+0x88>)
  400e38:	429a      	cmp	r2, r3
  400e3a:	d20c      	bcs.n	400e56 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400e3c:	4a14      	ldr	r2, [pc, #80]	; (400e90 <Reset_Handler+0x8c>)
  400e3e:	4619      	mov	r1, r3
  400e40:	1ad3      	subs	r3, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400e42:	4815      	ldr	r0, [pc, #84]	; (400e98 <Reset_Handler+0x94>)
  400e44:	4418      	add	r0, r3
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400e46:	b133      	cbz	r3, 400e56 <Reset_Handler+0x52>
  400e48:	4613      	mov	r3, r2
  400e4a:	1a9c      	subs	r4, r3, r2
			*pDest-- = *pSrc--;
  400e4c:	5824      	ldr	r4, [r4, r0]
  400e4e:	f843 4d04 	str.w	r4, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400e52:	4299      	cmp	r1, r3
  400e54:	d1f9      	bne.n	400e4a <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400e56:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400e58:	4b10      	ldr	r3, [pc, #64]	; (400e9c <Reset_Handler+0x98>)
  400e5a:	4a11      	ldr	r2, [pc, #68]	; (400ea0 <Reset_Handler+0x9c>)
  400e5c:	429a      	cmp	r2, r3
  400e5e:	d20b      	bcs.n	400e78 <Reset_Handler+0x74>
  400e60:	1f13      	subs	r3, r2, #4
  400e62:	4910      	ldr	r1, [pc, #64]	; (400ea4 <Reset_Handler+0xa0>)
  400e64:	1ac9      	subs	r1, r1, r3
  400e66:	f021 0103 	bic.w	r1, r1, #3
  400e6a:	1d1a      	adds	r2, r3, #4
  400e6c:	4411      	add	r1, r2
		*pDest++ = 0;
  400e6e:	2200      	movs	r2, #0
  400e70:	f843 2f04 	str.w	r2, [r3, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400e74:	428b      	cmp	r3, r1
  400e76:	d1fb      	bne.n	400e70 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400e78:	4b0b      	ldr	r3, [pc, #44]	; (400ea8 <Reset_Handler+0xa4>)
  400e7a:	4a0c      	ldr	r2, [pc, #48]	; (400eac <Reset_Handler+0xa8>)
  400e7c:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400e7e:	4b0c      	ldr	r3, [pc, #48]	; (400eb0 <Reset_Handler+0xac>)
  400e80:	4798      	blx	r3

	/* Branch to main function */
	main();
  400e82:	4b0c      	ldr	r3, [pc, #48]	; (400eb4 <Reset_Handler+0xb0>)
  400e84:	4798      	blx	r3
  400e86:	e7fe      	b.n	400e86 <Reset_Handler+0x82>
  400e88:	20000000 	.word	0x20000000
  400e8c:	00407ba0 	.word	0x00407ba0
  400e90:	2000088c 	.word	0x2000088c
  400e94:	2000088f 	.word	0x2000088f
  400e98:	00407b9c 	.word	0x00407b9c
  400e9c:	2000097c 	.word	0x2000097c
  400ea0:	2000088c 	.word	0x2000088c
  400ea4:	20000977 	.word	0x20000977
  400ea8:	e000ed00 	.word	0xe000ed00
  400eac:	00400000 	.word	0x00400000
  400eb0:	00401fd5 	.word	0x00401fd5
  400eb4:	00401501 	.word	0x00401501

00400eb8 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400eb8:	4b3d      	ldr	r3, [pc, #244]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ebc:	f003 0303 	and.w	r3, r3, #3
  400ec0:	2b03      	cmp	r3, #3
  400ec2:	d85d      	bhi.n	400f80 <SystemCoreClockUpdate+0xc8>
  400ec4:	e8df f003 	tbb	[pc, r3]
  400ec8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400ecc:	4b39      	ldr	r3, [pc, #228]	; (400fb4 <SystemCoreClockUpdate+0xfc>)
  400ece:	695b      	ldr	r3, [r3, #20]
  400ed0:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ed4:	bf14      	ite	ne
  400ed6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400eda:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400ede:	4b36      	ldr	r3, [pc, #216]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400ee0:	601a      	str	r2, [r3, #0]
  400ee2:	e04d      	b.n	400f80 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ee4:	4b32      	ldr	r3, [pc, #200]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400ee6:	6a1b      	ldr	r3, [r3, #32]
  400ee8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400eec:	d003      	beq.n	400ef6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400eee:	4a33      	ldr	r2, [pc, #204]	; (400fbc <SystemCoreClockUpdate+0x104>)
  400ef0:	4b31      	ldr	r3, [pc, #196]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400ef2:	601a      	str	r2, [r3, #0]
  400ef4:	e044      	b.n	400f80 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ef6:	4a32      	ldr	r2, [pc, #200]	; (400fc0 <SystemCoreClockUpdate+0x108>)
  400ef8:	4b2f      	ldr	r3, [pc, #188]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400efa:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400efc:	4b2c      	ldr	r3, [pc, #176]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400efe:	6a1b      	ldr	r3, [r3, #32]
  400f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f04:	2b10      	cmp	r3, #16
  400f06:	d002      	beq.n	400f0e <SystemCoreClockUpdate+0x56>
  400f08:	2b20      	cmp	r3, #32
  400f0a:	d004      	beq.n	400f16 <SystemCoreClockUpdate+0x5e>
  400f0c:	e038      	b.n	400f80 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400f0e:	4a2d      	ldr	r2, [pc, #180]	; (400fc4 <SystemCoreClockUpdate+0x10c>)
  400f10:	4b29      	ldr	r3, [pc, #164]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400f12:	601a      	str	r2, [r3, #0]
			break;
  400f14:	e034      	b.n	400f80 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400f16:	4a29      	ldr	r2, [pc, #164]	; (400fbc <SystemCoreClockUpdate+0x104>)
  400f18:	4b27      	ldr	r3, [pc, #156]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400f1a:	601a      	str	r2, [r3, #0]
			break;
  400f1c:	e030      	b.n	400f80 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400f1e:	4b24      	ldr	r3, [pc, #144]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400f20:	6a1b      	ldr	r3, [r3, #32]
  400f22:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f26:	d003      	beq.n	400f30 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400f28:	4a24      	ldr	r2, [pc, #144]	; (400fbc <SystemCoreClockUpdate+0x104>)
  400f2a:	4b23      	ldr	r3, [pc, #140]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400f2c:	601a      	str	r2, [r3, #0]
  400f2e:	e012      	b.n	400f56 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f30:	4a23      	ldr	r2, [pc, #140]	; (400fc0 <SystemCoreClockUpdate+0x108>)
  400f32:	4b21      	ldr	r3, [pc, #132]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400f34:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400f36:	4b1e      	ldr	r3, [pc, #120]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400f38:	6a1b      	ldr	r3, [r3, #32]
  400f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f3e:	2b10      	cmp	r3, #16
  400f40:	d002      	beq.n	400f48 <SystemCoreClockUpdate+0x90>
  400f42:	2b20      	cmp	r3, #32
  400f44:	d004      	beq.n	400f50 <SystemCoreClockUpdate+0x98>
  400f46:	e006      	b.n	400f56 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400f48:	4a1e      	ldr	r2, [pc, #120]	; (400fc4 <SystemCoreClockUpdate+0x10c>)
  400f4a:	4b1b      	ldr	r3, [pc, #108]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400f4c:	601a      	str	r2, [r3, #0]
					break;
  400f4e:	e002      	b.n	400f56 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400f50:	4a1a      	ldr	r2, [pc, #104]	; (400fbc <SystemCoreClockUpdate+0x104>)
  400f52:	4b19      	ldr	r3, [pc, #100]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400f54:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400f56:	4b16      	ldr	r3, [pc, #88]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f5a:	f003 0303 	and.w	r3, r3, #3
  400f5e:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400f60:	4b13      	ldr	r3, [pc, #76]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400f62:	bf07      	ittee	eq
  400f64:	6a98      	ldreq	r0, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400f66:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400f68:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400f6a:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  400f6c:	4b12      	ldr	r3, [pc, #72]	; (400fb8 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400f6e:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400f72:	681a      	ldr	r2, [r3, #0]
  400f74:	fb00 2202 	mla	r2, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400f78:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400f7a:	fbb2 f2f1 	udiv	r2, r2, r1
  400f7e:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400f80:	4b0b      	ldr	r3, [pc, #44]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f84:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f88:	2b70      	cmp	r3, #112	; 0x70
  400f8a:	d107      	bne.n	400f9c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400f8c:	4b0a      	ldr	r3, [pc, #40]	; (400fb8 <SystemCoreClockUpdate+0x100>)
  400f8e:	681a      	ldr	r2, [r3, #0]
  400f90:	490d      	ldr	r1, [pc, #52]	; (400fc8 <SystemCoreClockUpdate+0x110>)
  400f92:	fba1 0202 	umull	r0, r2, r1, r2
  400f96:	0852      	lsrs	r2, r2, #1
  400f98:	601a      	str	r2, [r3, #0]
  400f9a:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400f9c:	4b04      	ldr	r3, [pc, #16]	; (400fb0 <SystemCoreClockUpdate+0xf8>)
  400f9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400fa0:	4b05      	ldr	r3, [pc, #20]	; (400fb8 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400fa2:	f3c1 1102 	ubfx	r1, r1, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400fa6:	681a      	ldr	r2, [r3, #0]
  400fa8:	40ca      	lsrs	r2, r1
  400faa:	601a      	str	r2, [r3, #0]
  400fac:	4770      	bx	lr
  400fae:	bf00      	nop
  400fb0:	400e0400 	.word	0x400e0400
  400fb4:	400e1410 	.word	0x400e1410
  400fb8:	2000000c 	.word	0x2000000c
  400fbc:	00b71b00 	.word	0x00b71b00
  400fc0:	003d0900 	.word	0x003d0900
  400fc4:	007a1200 	.word	0x007a1200
  400fc8:	aaaaaaab 	.word	0xaaaaaaab

00400fcc <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400fcc:	4b1a      	ldr	r3, [pc, #104]	; (401038 <system_init_flash+0x6c>)
  400fce:	4298      	cmp	r0, r3
  400fd0:	d807      	bhi.n	400fe2 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400fd6:	4a19      	ldr	r2, [pc, #100]	; (40103c <system_init_flash+0x70>)
  400fd8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fda:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400fde:	6013      	str	r3, [r2, #0]
  400fe0:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400fe2:	4b17      	ldr	r3, [pc, #92]	; (401040 <system_init_flash+0x74>)
  400fe4:	4298      	cmp	r0, r3
  400fe6:	d806      	bhi.n	400ff6 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fe8:	4b16      	ldr	r3, [pc, #88]	; (401044 <system_init_flash+0x78>)
  400fea:	4a14      	ldr	r2, [pc, #80]	; (40103c <system_init_flash+0x70>)
  400fec:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fee:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ff2:	6013      	str	r3, [r2, #0]
  400ff4:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400ff6:	4b14      	ldr	r3, [pc, #80]	; (401048 <system_init_flash+0x7c>)
  400ff8:	4298      	cmp	r0, r3
  400ffa:	d806      	bhi.n	40100a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ffc:	4b13      	ldr	r3, [pc, #76]	; (40104c <system_init_flash+0x80>)
  400ffe:	4a0f      	ldr	r2, [pc, #60]	; (40103c <system_init_flash+0x70>)
  401000:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401002:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401006:	6013      	str	r3, [r2, #0]
  401008:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40100a:	4b11      	ldr	r3, [pc, #68]	; (401050 <system_init_flash+0x84>)
  40100c:	4298      	cmp	r0, r3
  40100e:	d806      	bhi.n	40101e <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401010:	4b10      	ldr	r3, [pc, #64]	; (401054 <system_init_flash+0x88>)
  401012:	4a0a      	ldr	r2, [pc, #40]	; (40103c <system_init_flash+0x70>)
  401014:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401016:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40101a:	6013      	str	r3, [r2, #0]
  40101c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40101e:	4b0e      	ldr	r3, [pc, #56]	; (401058 <system_init_flash+0x8c>)
  401020:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401022:	bf94      	ite	ls
  401024:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401028:	4b0c      	ldrhi	r3, [pc, #48]	; (40105c <system_init_flash+0x90>)
  40102a:	4a04      	ldr	r2, [pc, #16]	; (40103c <system_init_flash+0x70>)
  40102c:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40102e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401032:	6013      	str	r3, [r2, #0]
  401034:	4770      	bx	lr
  401036:	bf00      	nop
  401038:	01312cff 	.word	0x01312cff
  40103c:	400e0a00 	.word	0x400e0a00
  401040:	026259ff 	.word	0x026259ff
  401044:	04000100 	.word	0x04000100
  401048:	039386ff 	.word	0x039386ff
  40104c:	04000200 	.word	0x04000200
  401050:	04c4b3ff 	.word	0x04c4b3ff
  401054:	04000300 	.word	0x04000300
  401058:	05f5e0ff 	.word	0x05f5e0ff
  40105c:	04000500 	.word	0x04000500

00401060 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401060:	4b09      	ldr	r3, [pc, #36]	; (401088 <_sbrk+0x28>)
  401062:	681b      	ldr	r3, [r3, #0]
  401064:	b913      	cbnz	r3, 40106c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401066:	4a09      	ldr	r2, [pc, #36]	; (40108c <_sbrk+0x2c>)
  401068:	4b07      	ldr	r3, [pc, #28]	; (401088 <_sbrk+0x28>)
  40106a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40106c:	4b06      	ldr	r3, [pc, #24]	; (401088 <_sbrk+0x28>)
  40106e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401070:	181a      	adds	r2, r3, r0
  401072:	4907      	ldr	r1, [pc, #28]	; (401090 <_sbrk+0x30>)
  401074:	4291      	cmp	r1, r2
  401076:	db04      	blt.n	401082 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401078:	4610      	mov	r0, r2
  40107a:	4a03      	ldr	r2, [pc, #12]	; (401088 <_sbrk+0x28>)
  40107c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40107e:	4618      	mov	r0, r3
  401080:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401082:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401086:	4770      	bx	lr
  401088:	20000920 	.word	0x20000920
  40108c:	20003980 	.word	0x20003980
  401090:	20027ffc 	.word	0x20027ffc

00401094 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401094:	f04f 30ff 	mov.w	r0, #4294967295
  401098:	4770      	bx	lr
  40109a:	bf00      	nop

0040109c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40109c:	2000      	movs	r0, #0
  40109e:	4770      	bx	lr

004010a0 <Blowfish_Encrypt>:

   return y;
}


void Blowfish_Encrypt(BLOWFISH_CTX *ctx, unsigned long *xl, unsigned long *xr){
  4010a0:	b4f0      	push	{r4, r5, r6, r7}
  unsigned long  Xl;
  unsigned long  Xr;
  unsigned long  temp;
  short       i;

  Xl = *xl;
  4010a2:	680d      	ldr	r5, [r1, #0]
  Xr = *xr;
  4010a4:	6816      	ldr	r6, [r2, #0]
  4010a6:	1f04      	subs	r4, r0, #4
  4010a8:	f100 0c3c 	add.w	ip, r0, #60	; 0x3c

  for (i = 0; i < N; ++i) {
    Xl = Xl ^ ctx->P[i];
  4010ac:	f854 3f04 	ldr.w	r3, [r4, #4]!
  4010b0:	406b      	eors	r3, r5
   c = (unsigned short)(x & 0xFF);
   x >>= 8;
   b = (unsigned short)(x & 0xFF);
   x >>= 8;
   a = (unsigned short)(x & 0xFF);
   y = ctx->S[0][a] + ctx->S[1][b];
  4010b2:	0e1f      	lsrs	r7, r3, #24
  4010b4:	3712      	adds	r7, #18
  4010b6:	f3c3 4507 	ubfx	r5, r3, #16, #8
  4010ba:	f505 7589 	add.w	r5, r5, #274	; 0x112
  4010be:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  4010c2:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
  4010c6:	443d      	add	r5, r7
   y = y ^ ctx->S[2][c];
  4010c8:	f3c3 2707 	ubfx	r7, r3, #8, #8
  4010cc:	f207 2712 	addw	r7, r7, #530	; 0x212
  4010d0:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  4010d4:	407d      	eors	r5, r7
   y = y + ctx->S[3][d];
  4010d6:	b2df      	uxtb	r7, r3
  4010d8:	f207 3712 	addw	r7, r7, #786	; 0x312
  4010dc:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  4010e0:	443d      	add	r5, r7
  Xl = *xl;
  Xr = *xr;

  for (i = 0; i < N; ++i) {
    Xl = Xl ^ ctx->P[i];
    Xr = F(ctx, Xl) ^ Xr;
  4010e2:	4075      	eors	r5, r6
  short       i;

  Xl = *xl;
  Xr = *xr;

  for (i = 0; i < N; ++i) {
  4010e4:	4564      	cmp	r4, ip
  4010e6:	d001      	beq.n	4010ec <Blowfish_Encrypt+0x4c>
    Xl = Xl ^ ctx->P[i];
  4010e8:	461e      	mov	r6, r3
  4010ea:	e7df      	b.n	4010ac <Blowfish_Encrypt+0xc>

  temp = Xl;
  Xl = Xr;
  Xr = temp;

  Xr = Xr ^ ctx->P[N];
  4010ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
  4010ee:	406c      	eors	r4, r5
  Xl = Xl ^ ctx->P[N + 1];
  4010f0:	6c40      	ldr	r0, [r0, #68]	; 0x44
  4010f2:	4043      	eors	r3, r0

  *xl = Xl;
  4010f4:	600b      	str	r3, [r1, #0]
  *xr = Xr;
  4010f6:	6014      	str	r4, [r2, #0]
}
  4010f8:	bcf0      	pop	{r4, r5, r6, r7}
  4010fa:	4770      	bx	lr

004010fc <Blowfish_Decrypt>:


void Blowfish_Decrypt(BLOWFISH_CTX *ctx, unsigned long *xl, unsigned long *xr){
  4010fc:	b4f0      	push	{r4, r5, r6, r7}
  unsigned long  Xl;
  unsigned long  Xr;
  unsigned long  temp;
  short       i;

  Xl = *xl;
  4010fe:	680d      	ldr	r5, [r1, #0]
  Xr = *xr;
  401100:	6816      	ldr	r6, [r2, #0]
  401102:	4604      	mov	r4, r0
  401104:	f1a0 0c40 	sub.w	ip, r0, #64	; 0x40

  for (i = N + 1; i > 1; --i) {
    Xl = Xl ^ ctx->P[i];
  401108:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40110a:	406b      	eors	r3, r5
   c = (unsigned short)(x & 0xFF);
   x >>= 8;
   b = (unsigned short)(x & 0xFF);
   x >>= 8;
   a = (unsigned short)(x & 0xFF);
   y = ctx->S[0][a] + ctx->S[1][b];
  40110c:	0e1f      	lsrs	r7, r3, #24
  40110e:	3712      	adds	r7, #18
  401110:	f3c3 4507 	ubfx	r5, r3, #16, #8
  401114:	f505 7589 	add.w	r5, r5, #274	; 0x112
  401118:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  40111c:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
  401120:	443d      	add	r5, r7
   y = y ^ ctx->S[2][c];
  401122:	f3c3 2707 	ubfx	r7, r3, #8, #8
  401126:	f207 2712 	addw	r7, r7, #530	; 0x212
  40112a:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  40112e:	407d      	eors	r5, r7
   y = y + ctx->S[3][d];
  401130:	b2df      	uxtb	r7, r3
  401132:	f207 3712 	addw	r7, r7, #786	; 0x312
  401136:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  40113a:	443d      	add	r5, r7
  Xl = *xl;
  Xr = *xr;

  for (i = N + 1; i > 1; --i) {
    Xl = Xl ^ ctx->P[i];
    Xr = F(ctx, Xl) ^ Xr;
  40113c:	4075      	eors	r5, r6
  40113e:	3c04      	subs	r4, #4
  short       i;

  Xl = *xl;
  Xr = *xr;

  for (i = N + 1; i > 1; --i) {
  401140:	4564      	cmp	r4, ip
  401142:	d001      	beq.n	401148 <Blowfish_Decrypt+0x4c>
    Xl = Xl ^ ctx->P[i];
  401144:	461e      	mov	r6, r3
  401146:	e7df      	b.n	401108 <Blowfish_Decrypt+0xc>
  /* Exchange Xl and Xr */
  temp = Xl;
  Xl = Xr;
  Xr = temp;

  Xr = Xr ^ ctx->P[1];
  401148:	6844      	ldr	r4, [r0, #4]
  40114a:	406c      	eors	r4, r5
  Xl = Xl ^ ctx->P[0];
  40114c:	6800      	ldr	r0, [r0, #0]
  40114e:	4043      	eors	r3, r0

  *xl = Xl;
  401150:	600b      	str	r3, [r1, #0]
  *xr = Xr;
  401152:	6014      	str	r4, [r2, #0]
}
  401154:	bcf0      	pop	{r4, r5, r6, r7}
  401156:	4770      	bx	lr

00401158 <Blowfish_Init>:


void Blowfish_Init(BLOWFISH_CTX *ctx, unsigned char *key, int keyLen) {
  401158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40115c:	b082      	sub	sp, #8
  40115e:	4605      	mov	r5, r0
  401160:	f04f 0800 	mov.w	r8, #0
  401164:	46c2      	mov	sl, r8
  401166:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 401234 <Blowfish_Init+0xdc>
  40116a:	4684      	mov	ip, r0
  40116c:	e016      	b.n	40119c <Blowfish_Init+0x44>
  40116e:	4666      	mov	r6, ip
  401170:	18fc      	adds	r4, r7, r3
  int i, j, k;
  unsigned long data, datal, datar;

  for (i = 0; i < 4; i++) {
    for (j = 0; j < 256; j++)
      ctx->S[i][j] = ORIG_S[i][j];
  401172:	f85e 0003 	ldr.w	r0, [lr, r3]
  401176:	64a0      	str	r0, [r4, #72]	; 0x48
  401178:	3304      	adds	r3, #4
void Blowfish_Init(BLOWFISH_CTX *ctx, unsigned char *key, int keyLen) {
  int i, j, k;
  unsigned long data, datal, datar;

  for (i = 0; i < 4; i++) {
    for (j = 0; j < 256; j++)
  40117a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  40117e:	d1f6      	bne.n	40116e <Blowfish_Init+0x16>
  401180:	f508 6880 	add.w	r8, r8, #1024	; 0x400

void Blowfish_Init(BLOWFISH_CTX *ctx, unsigned char *key, int keyLen) {
  int i, j, k;
  unsigned long data, datal, datar;

  for (i = 0; i < 4; i++) {
  401184:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
  401188:	d108      	bne.n	40119c <Blowfish_Init+0x44>
  40118a:	f04f 0e00 	mov.w	lr, #0
  40118e:	4673      	mov	r3, lr
  *xl = Xl;
  *xr = Xr;
}


void Blowfish_Init(BLOWFISH_CTX *ctx, unsigned char *key, int keyLen) {
  401190:	f04f 0904 	mov.w	r9, #4
  401194:	46f0      	mov	r8, lr
      data = (data << 8) | key[j];
      j = j + 1;
      if (j >= keyLen)
        j = 0;
    }
    ctx->P[i] = ORIG_P[i] ^ data;
  401196:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 401238 <Blowfish_Init+0xe0>
  40119a:	e018      	b.n	4011ce <Blowfish_Init+0x76>
  *xl = Xl;
  *xr = Xr;
}


void Blowfish_Init(BLOWFISH_CTX *ctx, unsigned char *key, int keyLen) {
  40119c:	4653      	mov	r3, sl
  40119e:	eb09 0e08 	add.w	lr, r9, r8
  4011a2:	eb08 0705 	add.w	r7, r8, r5
  4011a6:	e7e2      	b.n	40116e <Blowfish_Init+0x16>

  j = 0;
  for (i = 0; i < N + 2; ++i) {
    data = 0x00000000;
    for (k = 0; k < 4; ++k) {
      data = (data << 8) | key[j];
  4011a8:	5ccf      	ldrb	r7, [r1, r3]
  4011aa:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
      j = j + 1;
  4011ae:	3301      	adds	r3, #1
      if (j >= keyLen)
        j = 0;
  4011b0:	4293      	cmp	r3, r2
  4011b2:	bfa8      	it	ge
  4011b4:	2300      	movge	r3, #0
  }

  j = 0;
  for (i = 0; i < N + 2; ++i) {
    data = 0x00000000;
    for (k = 0; k < 4; ++k) {
  4011b6:	3801      	subs	r0, #1
  4011b8:	d1f6      	bne.n	4011a8 <Blowfish_Init+0x50>
      data = (data << 8) | key[j];
      j = j + 1;
      if (j >= keyLen)
        j = 0;
    }
    ctx->P[i] = ORIG_P[i] ^ data;
  4011ba:	f85e 000c 	ldr.w	r0, [lr, ip]
  4011be:	4060      	eors	r0, r4
  4011c0:	f845 000e 	str.w	r0, [r5, lr]
  4011c4:	f10e 0e04 	add.w	lr, lr, #4
    for (j = 0; j < 256; j++)
      ctx->S[i][j] = ORIG_S[i][j];
  }

  j = 0;
  for (i = 0; i < N + 2; ++i) {
  4011c8:	f1be 0f48 	cmp.w	lr, #72	; 0x48
  4011cc:	d002      	beq.n	4011d4 <Blowfish_Init+0x7c>
  *xl = Xl;
  *xr = Xr;
}


void Blowfish_Init(BLOWFISH_CTX *ctx, unsigned char *key, int keyLen) {
  4011ce:	4648      	mov	r0, r9
  4011d0:	4644      	mov	r4, r8
  4011d2:	e7e9      	b.n	4011a8 <Blowfish_Init+0x50>
        j = 0;
    }
    ctx->P[i] = ORIG_P[i] ^ data;
  }

  datal = 0x00000000;
  4011d4:	2300      	movs	r3, #0
  4011d6:	9301      	str	r3, [sp, #4]
  datar = 0x00000000;
  4011d8:	9300      	str	r3, [sp, #0]
  4011da:	f106 0848 	add.w	r8, r6, #72	; 0x48
  4011de:	4634      	mov	r4, r6

  for (i = 0; i < N + 2; i += 2) {
    Blowfish_Encrypt(ctx, &datal, &datar);
  4011e0:	4f13      	ldr	r7, [pc, #76]	; (401230 <Blowfish_Init+0xd8>)
  4011e2:	4628      	mov	r0, r5
  4011e4:	a901      	add	r1, sp, #4
  4011e6:	466a      	mov	r2, sp
  4011e8:	47b8      	blx	r7
    ctx->P[i] = datal;
  4011ea:	9b01      	ldr	r3, [sp, #4]
  4011ec:	6023      	str	r3, [r4, #0]
    ctx->P[i + 1] = datar;
  4011ee:	9b00      	ldr	r3, [sp, #0]
  4011f0:	6063      	str	r3, [r4, #4]
  4011f2:	3408      	adds	r4, #8
  }

  datal = 0x00000000;
  datar = 0x00000000;

  for (i = 0; i < N + 2; i += 2) {
  4011f4:	4544      	cmp	r4, r8
  4011f6:	d1f4      	bne.n	4011e2 <Blowfish_Init+0x8a>
  4011f8:	f506 5980 	add.w	r9, r6, #4096	; 0x1000
    }
    ctx->P[i] = ORIG_P[i] ^ data;
  }

  datal = 0x00000000;
  datar = 0x00000000;
  4011fc:	f04f 0800 	mov.w	r8, #0
    ctx->P[i + 1] = datar;
  }

  for (i = 0; i < 4; ++i) {
    for (j = 0; j < 256; j += 2) {
      Blowfish_Encrypt(ctx, &datal, &datar);
  401200:	4f0b      	ldr	r7, [pc, #44]	; (401230 <Blowfish_Init+0xd8>)
  401202:	e010      	b.n	401226 <Blowfish_Init+0xce>
  401204:	4628      	mov	r0, r5
  401206:	a901      	add	r1, sp, #4
  401208:	466a      	mov	r2, sp
  40120a:	47b8      	blx	r7
  40120c:	1933      	adds	r3, r6, r4
      ctx->S[i][j] = datal;
  40120e:	9a01      	ldr	r2, [sp, #4]
  401210:	649a      	str	r2, [r3, #72]	; 0x48
      ctx->S[i][j + 1] = datar;
  401212:	9a00      	ldr	r2, [sp, #0]
  401214:	64da      	str	r2, [r3, #76]	; 0x4c
  401216:	3408      	adds	r4, #8
    ctx->P[i] = datal;
    ctx->P[i + 1] = datar;
  }

  for (i = 0; i < 4; ++i) {
    for (j = 0; j < 256; j += 2) {
  401218:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  40121c:	d1f2      	bne.n	401204 <Blowfish_Init+0xac>
  40121e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    Blowfish_Encrypt(ctx, &datal, &datar);
    ctx->P[i] = datal;
    ctx->P[i + 1] = datar;
  }

  for (i = 0; i < 4; ++i) {
  401222:	454e      	cmp	r6, r9
  401224:	d001      	beq.n	40122a <Blowfish_Init+0xd2>
    }
    ctx->P[i] = ORIG_P[i] ^ data;
  }

  datal = 0x00000000;
  datar = 0x00000000;
  401226:	4644      	mov	r4, r8
  401228:	e7ec      	b.n	401204 <Blowfish_Init+0xac>
      Blowfish_Encrypt(ctx, &datal, &datar);
      ctx->S[i][j] = datal;
      ctx->S[i][j + 1] = datar;
    }
  }
}
  40122a:	b002      	add	sp, #8
  40122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401230:	004010a1 	.word	0x004010a1
  401234:	00406970 	.word	0x00406970
  401238:	00406928 	.word	0x00406928

0040123c <Button1_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask))
  40123c:	280b      	cmp	r0, #11
  40123e:	d104      	bne.n	40124a <Button1_Handler+0xe>
  401240:	2901      	cmp	r1, #1
  401242:	d102      	bne.n	40124a <Button1_Handler+0xe>
static void ProcessButtonEvt(uint8_t uc_button)
{
	/* Switch between temperature, light and SD mode. */
	if (uc_button == 1)
	{
		app_mode_switch = 1;
  401244:	2201      	movs	r2, #1
  401246:	4b01      	ldr	r3, [pc, #4]	; (40124c <Button1_Handler+0x10>)
  401248:	601a      	str	r2, [r3, #0]
  40124a:	4770      	bx	lr
  40124c:	20000014 	.word	0x20000014

00401250 <SD_Detect_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void SD_Detect_Handler(uint32_t id, uint32_t mask)
{
	if ((SD_MMC_0_CD_ID == id) && (SD_MMC_0_CD_MASK == mask))
  401250:	280d      	cmp	r0, #13
  401252:	d10c      	bne.n	40126e <SD_Detect_Handler+0x1e>
  401254:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401258:	d109      	bne.n	40126e <SD_Detect_Handler+0x1e>
	{
		sd_listing_pos = 0;
  40125a:	2300      	movs	r3, #0
  40125c:	4a04      	ldr	r2, [pc, #16]	; (401270 <SD_Detect_Handler+0x20>)
  40125e:	6013      	str	r3, [r2, #0]
		sd_num_files = 0;
  401260:	4a04      	ldr	r2, [pc, #16]	; (401274 <SD_Detect_Handler+0x24>)
  401262:	6013      	str	r3, [r2, #0]
		sd_fs_found = 0;
  401264:	4a04      	ldr	r2, [pc, #16]	; (401278 <SD_Detect_Handler+0x28>)
  401266:	6013      	str	r3, [r2, #0]
		sd_update = 1;
  401268:	2201      	movs	r2, #1
  40126a:	4b04      	ldr	r3, [pc, #16]	; (40127c <SD_Detect_Handler+0x2c>)
  40126c:	601a      	str	r2, [r3, #0]
  40126e:	4770      	bx	lr
  401270:	20000928 	.word	0x20000928
  401274:	20000924 	.word	0x20000924
  401278:	2000092c 	.word	0x2000092c
  40127c:	20000930 	.word	0x20000930

00401280 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401280:	b5f0      	push	{r4, r5, r6, r7, lr}
  401282:	b083      	sub	sp, #12
  401284:	4605      	mov	r5, r0
  401286:	460c      	mov	r4, r1
	uint32_t val = 0;
  401288:	2300      	movs	r3, #0
  40128a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40128c:	4b18      	ldr	r3, [pc, #96]	; (4012f0 <usart_serial_getchar+0x70>)
  40128e:	4298      	cmp	r0, r3
  401290:	d107      	bne.n	4012a2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  401292:	461f      	mov	r7, r3
  401294:	4e17      	ldr	r6, [pc, #92]	; (4012f4 <usart_serial_getchar+0x74>)
  401296:	4638      	mov	r0, r7
  401298:	4621      	mov	r1, r4
  40129a:	47b0      	blx	r6
  40129c:	2800      	cmp	r0, #0
  40129e:	d1fa      	bne.n	401296 <usart_serial_getchar+0x16>
  4012a0:	e017      	b.n	4012d2 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4012a2:	4b15      	ldr	r3, [pc, #84]	; (4012f8 <usart_serial_getchar+0x78>)
  4012a4:	4298      	cmp	r0, r3
  4012a6:	d107      	bne.n	4012b8 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  4012a8:	461e      	mov	r6, r3
  4012aa:	4d12      	ldr	r5, [pc, #72]	; (4012f4 <usart_serial_getchar+0x74>)
  4012ac:	4630      	mov	r0, r6
  4012ae:	4621      	mov	r1, r4
  4012b0:	47a8      	blx	r5
  4012b2:	2800      	cmp	r0, #0
  4012b4:	d1fa      	bne.n	4012ac <usart_serial_getchar+0x2c>
  4012b6:	e018      	b.n	4012ea <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4012b8:	4b10      	ldr	r3, [pc, #64]	; (4012fc <usart_serial_getchar+0x7c>)
  4012ba:	4298      	cmp	r0, r3
  4012bc:	d109      	bne.n	4012d2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  4012be:	461e      	mov	r6, r3
  4012c0:	4d0f      	ldr	r5, [pc, #60]	; (401300 <usart_serial_getchar+0x80>)
  4012c2:	4630      	mov	r0, r6
  4012c4:	a901      	add	r1, sp, #4
  4012c6:	47a8      	blx	r5
  4012c8:	2800      	cmp	r0, #0
  4012ca:	d1fa      	bne.n	4012c2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  4012cc:	9b01      	ldr	r3, [sp, #4]
  4012ce:	7023      	strb	r3, [r4, #0]
  4012d0:	e00b      	b.n	4012ea <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4012d2:	4b0c      	ldr	r3, [pc, #48]	; (401304 <usart_serial_getchar+0x84>)
  4012d4:	429d      	cmp	r5, r3
  4012d6:	d108      	bne.n	4012ea <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  4012d8:	461e      	mov	r6, r3
  4012da:	4d09      	ldr	r5, [pc, #36]	; (401300 <usart_serial_getchar+0x80>)
  4012dc:	4630      	mov	r0, r6
  4012de:	a901      	add	r1, sp, #4
  4012e0:	47a8      	blx	r5
  4012e2:	2800      	cmp	r0, #0
  4012e4:	d1fa      	bne.n	4012dc <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  4012e6:	9b01      	ldr	r3, [sp, #4]
  4012e8:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4012ea:	b003      	add	sp, #12
  4012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012ee:	bf00      	nop
  4012f0:	400e0600 	.word	0x400e0600
  4012f4:	00400db9 	.word	0x00400db9
  4012f8:	400e0800 	.word	0x400e0800
  4012fc:	40024000 	.word	0x40024000
  401300:	00400de1 	.word	0x00400de1
  401304:	40028000 	.word	0x40028000

00401308 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401308:	b570      	push	{r4, r5, r6, lr}
  40130a:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40130c:	4b1a      	ldr	r3, [pc, #104]	; (401378 <usart_serial_putchar+0x70>)
  40130e:	4298      	cmp	r0, r3
  401310:	d107      	bne.n	401322 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401312:	461e      	mov	r6, r3
  401314:	4d19      	ldr	r5, [pc, #100]	; (40137c <usart_serial_putchar+0x74>)
  401316:	4630      	mov	r0, r6
  401318:	4621      	mov	r1, r4
  40131a:	47a8      	blx	r5
  40131c:	2800      	cmp	r0, #0
  40131e:	d1fa      	bne.n	401316 <usart_serial_putchar+0xe>
  401320:	e020      	b.n	401364 <usart_serial_putchar+0x5c>
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401322:	4b17      	ldr	r3, [pc, #92]	; (401380 <usart_serial_putchar+0x78>)
  401324:	4298      	cmp	r0, r3
  401326:	d107      	bne.n	401338 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
  401328:	461e      	mov	r6, r3
  40132a:	4d14      	ldr	r5, [pc, #80]	; (40137c <usart_serial_putchar+0x74>)
  40132c:	4630      	mov	r0, r6
  40132e:	4621      	mov	r1, r4
  401330:	47a8      	blx	r5
  401332:	2800      	cmp	r0, #0
  401334:	d1fa      	bne.n	40132c <usart_serial_putchar+0x24>
  401336:	e017      	b.n	401368 <usart_serial_putchar+0x60>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401338:	4b12      	ldr	r3, [pc, #72]	; (401384 <usart_serial_putchar+0x7c>)
  40133a:	4298      	cmp	r0, r3
  40133c:	d107      	bne.n	40134e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
  40133e:	461e      	mov	r6, r3
  401340:	4d11      	ldr	r5, [pc, #68]	; (401388 <usart_serial_putchar+0x80>)
  401342:	4630      	mov	r0, r6
  401344:	4621      	mov	r1, r4
  401346:	47a8      	blx	r5
  401348:	2800      	cmp	r0, #0
  40134a:	d1fa      	bne.n	401342 <usart_serial_putchar+0x3a>
  40134c:	e00e      	b.n	40136c <usart_serial_putchar+0x64>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40134e:	4b0f      	ldr	r3, [pc, #60]	; (40138c <usart_serial_putchar+0x84>)
  401350:	4298      	cmp	r0, r3
  401352:	d10d      	bne.n	401370 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
  401354:	461e      	mov	r6, r3
  401356:	4d0c      	ldr	r5, [pc, #48]	; (401388 <usart_serial_putchar+0x80>)
  401358:	4630      	mov	r0, r6
  40135a:	4621      	mov	r1, r4
  40135c:	47a8      	blx	r5
  40135e:	2800      	cmp	r0, #0
  401360:	d1fa      	bne.n	401358 <usart_serial_putchar+0x50>
  401362:	e007      	b.n	401374 <usart_serial_putchar+0x6c>
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  401364:	2001      	movs	r0, #1
  401366:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  401368:	2001      	movs	r0, #1
  40136a:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  40136c:	2001      	movs	r0, #1
  40136e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401370:	2000      	movs	r0, #0
  401372:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  401374:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
  401376:	bd70      	pop	{r4, r5, r6, pc}
  401378:	400e0600 	.word	0x400e0600
  40137c:	00400da9 	.word	0x00400da9
  401380:	400e0800 	.word	0x400e0800
  401384:	40024000 	.word	0x40024000
  401388:	00400dcd 	.word	0x00400dcd
  40138c:	40028000 	.word	0x40028000

00401390 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  401390:	b570      	push	{r4, r5, r6, lr}
  401392:	b082      	sub	sp, #8
  401394:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401396:	ac02      	add	r4, sp, #8
  401398:	2302      	movs	r3, #2
  40139a:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40139e:	4d09      	ldr	r5, [pc, #36]	; (4013c4 <ssd1306_write_command+0x34>)
  4013a0:	4628      	mov	r0, r5
  4013a2:	4621      	mov	r1, r4
  4013a4:	4b08      	ldr	r3, [pc, #32]	; (4013c8 <ssd1306_write_command+0x38>)
  4013a6:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4013a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4013ac:	4b07      	ldr	r3, [pc, #28]	; (4013cc <ssd1306_write_command+0x3c>)
  4013ae:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4013b0:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  4013b2:	2056      	movs	r0, #86	; 0x56
  4013b4:	4b06      	ldr	r3, [pc, #24]	; (4013d0 <ssd1306_write_command+0x40>)
  4013b6:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4013b8:	4628      	mov	r0, r5
  4013ba:	4621      	mov	r1, r4
  4013bc:	4b05      	ldr	r3, [pc, #20]	; (4013d4 <ssd1306_write_command+0x44>)
  4013be:	4798      	blx	r3
#endif
}
  4013c0:	b002      	add	sp, #8
  4013c2:	bd70      	pop	{r4, r5, r6, pc}
  4013c4:	40008000 	.word	0x40008000
  4013c8:	0040038d 	.word	0x0040038d
  4013cc:	400e1200 	.word	0x400e1200
  4013d0:	20000001 	.word	0x20000001
  4013d4:	004003bd 	.word	0x004003bd

004013d8 <Button3_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button3_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask))
  4013d8:	280d      	cmp	r0, #13
  4013da:	d11a      	bne.n	401412 <Button3_Handler+0x3a>
  4013dc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  4013e0:	d117      	bne.n	401412 <Button3_Handler+0x3a>
			sd_update = 1;
		}
	}
	/* Page DOWN button. */
	else if ((uc_button == 3) &&
				(app_mode == 2) &&
  4013e2:	4b0c      	ldr	r3, [pc, #48]	; (401414 <Button3_Handler+0x3c>)
  4013e4:	681b      	ldr	r3, [r3, #0]
			sd_listing_pos -= 1;
			sd_update = 1;
		}
	}
	/* Page DOWN button. */
	else if ((uc_button == 3) &&
  4013e6:	2b02      	cmp	r3, #2
  4013e8:	d113      	bne.n	401412 <Button3_Handler+0x3a>
				(app_mode == 2) &&
				(sd_fs_found == 1) &&
  4013ea:	4b0b      	ldr	r3, [pc, #44]	; (401418 <Button3_Handler+0x40>)
  4013ec:	681b      	ldr	r3, [r3, #0]
			sd_update = 1;
		}
	}
	/* Page DOWN button. */
	else if ((uc_button == 3) &&
				(app_mode == 2) &&
  4013ee:	2b01      	cmp	r3, #1
  4013f0:	d10f      	bne.n	401412 <Button3_Handler+0x3a>
				(sd_fs_found == 1) &&
				(sd_update == 0))
  4013f2:	4b0a      	ldr	r3, [pc, #40]	; (40141c <Button3_Handler+0x44>)
  4013f4:	681b      	ldr	r3, [r3, #0]
		}
	}
	/* Page DOWN button. */
	else if ((uc_button == 3) &&
				(app_mode == 2) &&
				(sd_fs_found == 1) &&
  4013f6:	b963      	cbnz	r3, 401412 <Button3_Handler+0x3a>
				(sd_update == 0))
	{
		/* Lock DOWN button when showing the last file. */
		if (sd_listing_pos < sd_num_files)
  4013f8:	4b09      	ldr	r3, [pc, #36]	; (401420 <Button3_Handler+0x48>)
  4013fa:	681a      	ldr	r2, [r3, #0]
  4013fc:	4b09      	ldr	r3, [pc, #36]	; (401424 <Button3_Handler+0x4c>)
  4013fe:	681b      	ldr	r3, [r3, #0]
  401400:	429a      	cmp	r2, r3
  401402:	d206      	bcs.n	401412 <Button3_Handler+0x3a>
		{
			sd_listing_pos += 1;
  401404:	4b06      	ldr	r3, [pc, #24]	; (401420 <Button3_Handler+0x48>)
  401406:	681a      	ldr	r2, [r3, #0]
  401408:	3201      	adds	r2, #1
  40140a:	601a      	str	r2, [r3, #0]
			sd_update = 1;
  40140c:	2201      	movs	r2, #1
  40140e:	4b03      	ldr	r3, [pc, #12]	; (40141c <Button3_Handler+0x44>)
  401410:	601a      	str	r2, [r3, #0]
  401412:	4770      	bx	lr
  401414:	20000010 	.word	0x20000010
  401418:	2000092c 	.word	0x2000092c
  40141c:	20000930 	.word	0x20000930
  401420:	20000928 	.word	0x20000928
  401424:	20000924 	.word	0x20000924

00401428 <Button2_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button2_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask))
  401428:	280d      	cmp	r0, #13
  40142a:	d117      	bne.n	40145c <Button2_Handler+0x34>
  40142c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401430:	d114      	bne.n	40145c <Button2_Handler+0x34>
	{
		app_mode_switch = 1;
	}
	/* Page UP button. */
	else if ((uc_button == 2) &&
				(app_mode == 2) &&
  401432:	4b0b      	ldr	r3, [pc, #44]	; (401460 <Button2_Handler+0x38>)
  401434:	681b      	ldr	r3, [r3, #0]
	if (uc_button == 1)
	{
		app_mode_switch = 1;
	}
	/* Page UP button. */
	else if ((uc_button == 2) &&
  401436:	2b02      	cmp	r3, #2
  401438:	d110      	bne.n	40145c <Button2_Handler+0x34>
				(app_mode == 2) &&
				(sd_fs_found == 1) &&
  40143a:	4b0a      	ldr	r3, [pc, #40]	; (401464 <Button2_Handler+0x3c>)
  40143c:	681b      	ldr	r3, [r3, #0]
	{
		app_mode_switch = 1;
	}
	/* Page UP button. */
	else if ((uc_button == 2) &&
				(app_mode == 2) &&
  40143e:	2b01      	cmp	r3, #1
  401440:	d10c      	bne.n	40145c <Button2_Handler+0x34>
				(sd_fs_found == 1) &&
				(sd_update == 0))
  401442:	4b09      	ldr	r3, [pc, #36]	; (401468 <Button2_Handler+0x40>)
  401444:	681b      	ldr	r3, [r3, #0]
		app_mode_switch = 1;
	}
	/* Page UP button. */
	else if ((uc_button == 2) &&
				(app_mode == 2) &&
				(sd_fs_found == 1) &&
  401446:	b94b      	cbnz	r3, 40145c <Button2_Handler+0x34>
				(sd_update == 0))
	{
		if (sd_listing_pos > 0)
  401448:	4b08      	ldr	r3, [pc, #32]	; (40146c <Button2_Handler+0x44>)
  40144a:	681b      	ldr	r3, [r3, #0]
  40144c:	b133      	cbz	r3, 40145c <Button2_Handler+0x34>
		{
			sd_listing_pos -= 1;
  40144e:	4b07      	ldr	r3, [pc, #28]	; (40146c <Button2_Handler+0x44>)
  401450:	681a      	ldr	r2, [r3, #0]
  401452:	3a01      	subs	r2, #1
  401454:	601a      	str	r2, [r3, #0]
			sd_update = 1;
  401456:	2201      	movs	r2, #1
  401458:	4b03      	ldr	r3, [pc, #12]	; (401468 <Button2_Handler+0x40>)
  40145a:	601a      	str	r2, [r3, #0]
  40145c:	4770      	bx	lr
  40145e:	bf00      	nop
  401460:	20000010 	.word	0x20000010
  401464:	2000092c 	.word	0x2000092c
  401468:	20000930 	.word	0x20000930
  40146c:	20000928 	.word	0x20000928

00401470 <printStr>:
	 
}


void printStr(const char* textStr)
{
  401470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401474:	4606      	mov	r6, r0
	short x;
	size_t messStr = strlen(textStr);
  401476:	4b0a      	ldr	r3, [pc, #40]	; (4014a0 <printStr+0x30>)
  401478:	4798      	blx	r3
	for(x=0;x<messStr;x++)
  40147a:	4605      	mov	r5, r0
  40147c:	b170      	cbz	r0, 40149c <printStr+0x2c>
  40147e:	2300      	movs	r3, #0
  401480:	461c      	mov	r4, r3
		ptr_put(CONF_UART,textStr[x]);
  401482:	f8df 8024 	ldr.w	r8, [pc, #36]	; 4014a8 <printStr+0x38>
  401486:	4f07      	ldr	r7, [pc, #28]	; (4014a4 <printStr+0x34>)
  401488:	4638      	mov	r0, r7
  40148a:	5cf1      	ldrb	r1, [r6, r3]
  40148c:	f8d8 3000 	ldr.w	r3, [r8]
  401490:	4798      	blx	r3

void printStr(const char* textStr)
{
	short x;
	size_t messStr = strlen(textStr);
	for(x=0;x<messStr;x++)
  401492:	3401      	adds	r4, #1
  401494:	b2a4      	uxth	r4, r4
  401496:	b223      	sxth	r3, r4
  401498:	429d      	cmp	r5, r3
  40149a:	d8f5      	bhi.n	401488 <printStr+0x18>
  40149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014a0:	00402215 	.word	0x00402215
  4014a4:	400e0800 	.word	0x400e0800
  4014a8:	2000096c 	.word	0x2000096c

004014ac <printStrF>:
		ptr_put(CONF_UART,textStr[x]);
}

void printStrF(unsigned long L, unsigned long R)
{
  4014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4014ae:	b0a1      	sub	sp, #132	; 0x84
  4014b0:	4602      	mov	r2, r0
  4014b2:	460b      	mov	r3, r1
	short x,len;
	char buf[128];
	len = sprintf(buf,"%08lX %08lX\n", L, R);
  4014b4:	4668      	mov	r0, sp
  4014b6:	490e      	ldr	r1, [pc, #56]	; (4014f0 <printStrF+0x44>)
  4014b8:	4c0e      	ldr	r4, [pc, #56]	; (4014f4 <printStrF+0x48>)
  4014ba:	47a0      	blx	r4
	buf[len] = 0;
  4014bc:	b203      	sxth	r3, r0
  4014be:	aa20      	add	r2, sp, #128	; 0x80
  4014c0:	441a      	add	r2, r3
  4014c2:	2100      	movs	r1, #0
  4014c4:	f802 1c80 	strb.w	r1, [r2, #-128]
	for(x=0;x<len;x++)
  4014c8:	428b      	cmp	r3, r1
  4014ca:	dd0f      	ble.n	4014ec <printStrF+0x40>
  4014cc:	f10d 34ff 	add.w	r4, sp, #4294967295
  4014d0:	3801      	subs	r0, #1
  4014d2:	eb0d 0301 	add.w	r3, sp, r1
  4014d6:	fa13 f780 	uxtah	r7, r3, r0
	ptr_put(CONF_UART,buf[x]);
  4014da:	4e07      	ldr	r6, [pc, #28]	; (4014f8 <printStrF+0x4c>)
  4014dc:	4d07      	ldr	r5, [pc, #28]	; (4014fc <printStrF+0x50>)
  4014de:	4628      	mov	r0, r5
  4014e0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  4014e4:	6833      	ldr	r3, [r6, #0]
  4014e6:	4798      	blx	r3
{
	short x,len;
	char buf[128];
	len = sprintf(buf,"%08lX %08lX\n", L, R);
	buf[len] = 0;
	for(x=0;x<len;x++)
  4014e8:	42bc      	cmp	r4, r7
  4014ea:	d1f8      	bne.n	4014de <printStrF+0x32>
	ptr_put(CONF_UART,buf[x]);
}
  4014ec:	b021      	add	sp, #132	; 0x84
  4014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4014f0:	00407970 	.word	0x00407970
  4014f4:	004021c9 	.word	0x004021c9
  4014f8:	2000096c 	.word	0x2000096c
  4014fc:	400e0800 	.word	0x400e0800

00401500 <main>:
#define BUFFER_SIZE 128
void printStr(const char* textStr);
void printStrF(unsigned long L, unsigned long R);

int main(void)
{
  401500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401504:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
  401508:	b083      	sub	sp, #12
	uint32_t adc_value;
	uint32_t light_value;
	double temp;
	
	unsigned long L  = 0x12345678, R   = 0x16fde256;
	unsigned long bL = 0x12345678, bR  = 0x16fde256;
  40150a:	4b9d      	ldr	r3, [pc, #628]	; (401780 <main+0x280>)
  40150c:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  401510:	3204      	adds	r2, #4
  401512:	6013      	str	r3, [r2, #0]
  401514:	4b9b      	ldr	r3, [pc, #620]	; (401784 <main+0x284>)
  401516:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  40151a:	6013      	str	r3, [r2, #0]
	};

	
	
	// Initialize clocks.
	sysclk_init();
  40151c:	4b9a      	ldr	r3, [pc, #616]	; (401788 <main+0x288>)
  40151e:	4798      	blx	r3

	// Initialize GPIO states.
	board_init();
  401520:	4b9a      	ldr	r3, [pc, #616]	; (40178c <main+0x28c>)
  401522:	4798      	blx	r3
 * \brief Configure the ADC for the light sensor.
 */
static void configure_adc(void)
{
	/* Configure ADC pin for light sensor. */
	gpio_configure_pin(LIGHT_SENSOR_GPIO, LIGHT_SENSOR_FLAGS);
  401524:	2020      	movs	r0, #32
  401526:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40152a:	4b99      	ldr	r3, [pc, #612]	; (401790 <main+0x290>)
  40152c:	4798      	blx	r3

	/* Enable ADC clock. */
	pmc_enable_periph_clk(ID_ADC);
  40152e:	201d      	movs	r0, #29
  401530:	4d98      	ldr	r5, [pc, #608]	; (401794 <main+0x294>)
  401532:	47a8      	blx	r5

	/* Configure ADC. */
	adc_init(ADC, sysclk_get_cpu_hz(), 1000000, ADC_MR_STARTUP_SUT0);
  401534:	4c98      	ldr	r4, [pc, #608]	; (401798 <main+0x298>)
  401536:	4620      	mov	r0, r4
  401538:	4998      	ldr	r1, [pc, #608]	; (40179c <main+0x29c>)
  40153a:	4a99      	ldr	r2, [pc, #612]	; (4017a0 <main+0x2a0>)
  40153c:	2300      	movs	r3, #0
  40153e:	4e99      	ldr	r6, [pc, #612]	; (4017a4 <main+0x2a4>)
  401540:	47b0      	blx	r6
	adc_enable_channel(ADC, ADC_CHANNEL_4);
  401542:	4620      	mov	r0, r4
  401544:	2104      	movs	r1, #4
  401546:	4b98      	ldr	r3, [pc, #608]	; (4017a8 <main+0x2a8>)
  401548:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 1);
  40154a:	4620      	mov	r0, r4
  40154c:	2100      	movs	r1, #0
  40154e:	2201      	movs	r2, #1
  401550:	4b96      	ldr	r3, [pc, #600]	; (4017ac <main+0x2ac>)
  401552:	4798      	blx	r3

	// Configure ADC for light sensor.
	configure_adc();

	// Initialize at30tse.
	at30tse_init();
  401554:	4b96      	ldr	r3, [pc, #600]	; (4017b0 <main+0x2b0>)
  401556:	4798      	blx	r3
 * pressed or released.
 */
static void configure_buttons(void)
{
	/* Configure Pushbutton 1. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  401558:	200b      	movs	r0, #11
  40155a:	47a8      	blx	r5
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  40155c:	f504 2428 	add.w	r4, r4, #688128	; 0xa8000
  401560:	f504 6460 	add.w	r4, r4, #3584	; 0xe00
  401564:	4620      	mov	r0, r4
  401566:	2101      	movs	r1, #1
  401568:	220a      	movs	r2, #10
  40156a:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 401830 <main+0x330>
  40156e:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  401570:	4b90      	ldr	r3, [pc, #576]	; (4017b4 <main+0x2b4>)
  401572:	9300      	str	r3, [sp, #0]
  401574:	4620      	mov	r0, r4
  401576:	210b      	movs	r1, #11
  401578:	2201      	movs	r2, #1
  40157a:	2379      	movs	r3, #121	; 0x79
  40157c:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 401834 <main+0x334>
  401580:	47c8      	blx	r9
  401582:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 401838 <main+0x338>
  401586:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40158a:	f8c8 3000 	str.w	r3, [r8]
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, (IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
  40158e:	4620      	mov	r0, r4
  401590:	210b      	movs	r1, #11
  401592:	2200      	movs	r2, #0
  401594:	4f88      	ldr	r7, [pc, #544]	; (4017b8 <main+0x2b8>)
  401596:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  401598:	4620      	mov	r0, r4
  40159a:	2101      	movs	r1, #1
  40159c:	4e87      	ldr	r6, [pc, #540]	; (4017bc <main+0x2bc>)
  40159e:	47b0      	blx	r6

	/* Configure Pushbutton 2. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  4015a0:	200d      	movs	r0, #13
  4015a2:	47a8      	blx	r5
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  4015a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  4015a8:	4620      	mov	r0, r4
  4015aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4015ae:	220a      	movs	r2, #10
  4015b0:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  4015b2:	4b83      	ldr	r3, [pc, #524]	; (4017c0 <main+0x2c0>)
  4015b4:	9300      	str	r3, [sp, #0]
  4015b6:	4620      	mov	r0, r4
  4015b8:	210d      	movs	r1, #13
  4015ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4015be:	2379      	movs	r3, #121	; 0x79
  4015c0:	47c8      	blx	r9
  4015c2:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  4015c6:	f8c8 b000 	str.w	fp, [r8]
			PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button2_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, (IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
  4015ca:	4620      	mov	r0, r4
  4015cc:	210d      	movs	r1, #13
  4015ce:	2200      	movs	r2, #0
  4015d0:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  4015d2:	4620      	mov	r0, r4
  4015d4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4015d8:	47b0      	blx	r6

	/* Configure Pushbutton 3. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_3_ID);
  4015da:	200d      	movs	r0, #13
  4015dc:	47a8      	blx	r5
	pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  4015de:	4620      	mov	r0, r4
  4015e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015e4:	220a      	movs	r2, #10
  4015e6:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID,
  4015e8:	4b76      	ldr	r3, [pc, #472]	; (4017c4 <main+0x2c4>)
  4015ea:	9300      	str	r3, [sp, #0]
  4015ec:	4620      	mov	r0, r4
  4015ee:	210d      	movs	r1, #13
  4015f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4015f4:	2379      	movs	r3, #121	; 0x79
  4015f6:	47c8      	blx	r9
  4015f8:	f8c8 b000 	str.w	fp, [r8]
			PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, Button3_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_3_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, IRQ_PRIOR_PIO);
  4015fc:	4620      	mov	r0, r4
  4015fe:	210d      	movs	r1, #13
  401600:	2200      	movs	r2, #0
  401602:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  401604:	4620      	mov	r0, r4
  401606:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40160a:	47b0      	blx	r6

	/* Configure SD card detection. */
	pmc_enable_periph_clk(SD_MMC_0_CD_ID);
  40160c:	200d      	movs	r0, #13
  40160e:	47a8      	blx	r5
	pio_set_debounce_filter(SD_MMC_0_CD_PIO, SD_MMC_0_CD_MASK, 10);
  401610:	4620      	mov	r0, r4
  401612:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401616:	220a      	movs	r2, #10
  401618:	47d0      	blx	sl
	pio_handler_set(SD_MMC_0_CD_PIO, SD_MMC_0_CD_ID, SD_MMC_0_CD_MASK,
  40161a:	4b6b      	ldr	r3, [pc, #428]	; (4017c8 <main+0x2c8>)
  40161c:	9300      	str	r3, [sp, #0]
  40161e:	4620      	mov	r0, r4
  401620:	210d      	movs	r1, #13
  401622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401626:	2349      	movs	r3, #73	; 0x49
  401628:	47c8      	blx	r9
  40162a:	f8c8 b000 	str.w	fp, [r8]
			SD_MMC_0_CD_ATTR, SD_Detect_Handler);
	NVIC_EnableIRQ((IRQn_Type) SD_MMC_0_CD_ID);
	pio_handler_set_priority(SD_MMC_0_CD_PIO, (IRQn_Type) SD_MMC_0_CD_ID, IRQ_PRIOR_PIO);
  40162e:	4620      	mov	r0, r4
  401630:	210d      	movs	r1, #13
  401632:	2200      	movs	r2, #0
  401634:	47b8      	blx	r7
	pio_enable_interrupt(SD_MMC_0_CD_PIO, SD_MMC_0_CD_MASK);
  401636:	4620      	mov	r0, r4
  401638:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40163c:	47b0      	blx	r6

	// Configure IO1 buttons.
	configure_buttons();

	// Initialize SPI and SSD1306 controller.
	ssd1306_init();
  40163e:	4b63      	ldr	r3, [pc, #396]	; (4017cc <main+0x2cc>)
  401640:	4798      	blx	r3
  401642:	f04f 0800 	mov.w	r8, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401646:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 40183c <main+0x33c>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40164a:	4626      	mov	r6, r4
  40164c:	f008 0007 	and.w	r0, r8, #7
  401650:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  401654:	47c8      	blx	r9
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401656:	2010      	movs	r0, #16
  401658:	47c8      	blx	r9
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40165a:	2000      	movs	r0, #0
  40165c:	47c8      	blx	r9
  40165e:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401660:	2702      	movs	r7, #2
  401662:	9703      	str	r7, [sp, #12]
	spi_select_device(SSD1306_SPI, &device);
  401664:	4c5a      	ldr	r4, [pc, #360]	; (4017d0 <main+0x2d0>)
  401666:	4620      	mov	r0, r4
  401668:	a903      	add	r1, sp, #12
  40166a:	4b5a      	ldr	r3, [pc, #360]	; (4017d4 <main+0x2d4>)
  40166c:	4798      	blx	r3
  40166e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401672:	6333      	str	r3, [r6, #48]	; 0x30
  401674:	2300      	movs	r3, #0
  401676:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401678:	2056      	movs	r0, #86	; 0x56
  40167a:	4b57      	ldr	r3, [pc, #348]	; (4017d8 <main+0x2d8>)
  40167c:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  40167e:	4620      	mov	r0, r4
  401680:	a903      	add	r1, sp, #12
  401682:	4b56      	ldr	r3, [pc, #344]	; (4017dc <main+0x2dc>)
  401684:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  401686:	3d01      	subs	r5, #1
  401688:	d1eb      	bne.n	401662 <main+0x162>
  40168a:	f108 0801 	add.w	r8, r8, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  40168e:	f1b8 0f04 	cmp.w	r8, #4
  401692:	d1db      	bne.n	40164c <main+0x14c>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401694:	f504 2458 	add.w	r4, r4, #884736	; 0xd8000
  401698:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  40169c:	4b50      	ldr	r3, [pc, #320]	; (4017e0 <main+0x2e0>)
  40169e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4016a0:	4a50      	ldr	r2, [pc, #320]	; (4017e4 <main+0x2e4>)
  4016a2:	4b51      	ldr	r3, [pc, #324]	; (4017e8 <main+0x2e8>)
  4016a4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4016a6:	4a51      	ldr	r2, [pc, #324]	; (4017ec <main+0x2ec>)
  4016a8:	4b51      	ldr	r3, [pc, #324]	; (4017f0 <main+0x2f0>)
  4016aa:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4016ac:	4b3b      	ldr	r3, [pc, #236]	; (40179c <main+0x29c>)
  4016ae:	9303      	str	r3, [sp, #12]
	uart_settings.ul_baudrate = opt->baudrate;
  4016b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4016b4:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = opt->paritytype;
  4016b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4016ba:	9305      	str	r3, [sp, #20]
  4016bc:	2009      	movs	r0, #9
  4016be:	4b35      	ldr	r3, [pc, #212]	; (401794 <main+0x294>)
  4016c0:	4798      	blx	r3
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4016c2:	4620      	mov	r0, r4
  4016c4:	a903      	add	r1, sp, #12
  4016c6:	4b4b      	ldr	r3, [pc, #300]	; (4017f4 <main+0x2f4>)
  4016c8:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4016ca:	4d4b      	ldr	r5, [pc, #300]	; (4017f8 <main+0x2f8>)
  4016cc:	682b      	ldr	r3, [r5, #0]
  4016ce:	6898      	ldr	r0, [r3, #8]
  4016d0:	2100      	movs	r1, #0
  4016d2:	4c4a      	ldr	r4, [pc, #296]	; (4017fc <main+0x2fc>)
  4016d4:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4016d6:	682b      	ldr	r3, [r5, #0]
  4016d8:	6858      	ldr	r0, [r3, #4]
  4016da:	2100      	movs	r1, #0
  4016dc:	47a0      	blx	r4
	ssd1306_clear();
		
	// stdio should go to usart
	stdio_serial_init(CONF_UART, &USART_SERIAL_OPTIONS);	
	
	  Blowfish_Init (&ctx, (unsigned char*)"TESTKEY", 7);
  4016de:	a806      	add	r0, sp, #24
  4016e0:	4947      	ldr	r1, [pc, #284]	; (401800 <main+0x300>)
  4016e2:	2207      	movs	r2, #7
  4016e4:	4b47      	ldr	r3, [pc, #284]	; (401804 <main+0x304>)
  4016e6:	4798      	blx	r3

	  //
	  Blowfish_Encrypt(&ctx, &bL, &bR);
  4016e8:	a806      	add	r0, sp, #24
  4016ea:	f50d 5183 	add.w	r1, sp, #4192	; 0x1060
  4016ee:	3104      	adds	r1, #4
  4016f0:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  4016f4:	4b44      	ldr	r3, [pc, #272]	; (401808 <main+0x308>)
  4016f6:	4798      	blx	r3
	  printStrF(bL,bR);
  4016f8:	f50d 5383 	add.w	r3, sp, #4192	; 0x1060
  4016fc:	3304      	adds	r3, #4
  4016fe:	6818      	ldr	r0, [r3, #0]
  401700:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  401704:	6811      	ldr	r1, [r2, #0]
  401706:	4b41      	ldr	r3, [pc, #260]	; (40180c <main+0x30c>)
  401708:	4798      	blx	r3
	   
	  if (bL == 0x47B8B9ECL && bR == 0xCE55FF90L)
  40170a:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  40170e:	3204      	adds	r2, #4
  401710:	6813      	ldr	r3, [r2, #0]
  401712:	4a3f      	ldr	r2, [pc, #252]	; (401810 <main+0x310>)
  401714:	4293      	cmp	r3, r2
  401716:	d109      	bne.n	40172c <main+0x22c>
  401718:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  40171c:	6813      	ldr	r3, [r2, #0]
  40171e:	4a3d      	ldr	r2, [pc, #244]	; (401814 <main+0x314>)
  401720:	4293      	cmp	r3, r2
  401722:	d103      	bne.n	40172c <main+0x22c>
	  printStr("Test encryption OK.\n");
  401724:	483c      	ldr	r0, [pc, #240]	; (401818 <main+0x318>)
  401726:	4b3d      	ldr	r3, [pc, #244]	; (40181c <main+0x31c>)
  401728:	4798      	blx	r3
  40172a:	e002      	b.n	401732 <main+0x232>
	  else
	  printStr("Test encryption failed.\n");
  40172c:	483c      	ldr	r0, [pc, #240]	; (401820 <main+0x320>)
  40172e:	4b3b      	ldr	r3, [pc, #236]	; (40181c <main+0x31c>)
  401730:	4798      	blx	r3

	  //
	  Blowfish_Decrypt(&ctx, &bL, &bR);
  401732:	a806      	add	r0, sp, #24
  401734:	f50d 5183 	add.w	r1, sp, #4192	; 0x1060
  401738:	3104      	adds	r1, #4
  40173a:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  40173e:	4b39      	ldr	r3, [pc, #228]	; (401824 <main+0x324>)
  401740:	4798      	blx	r3
	  printStrF(bL,bR);
  401742:	f50d 5383 	add.w	r3, sp, #4192	; 0x1060
  401746:	3304      	adds	r3, #4
  401748:	6818      	ldr	r0, [r3, #0]
  40174a:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  40174e:	6811      	ldr	r1, [r2, #0]
  401750:	4b2e      	ldr	r3, [pc, #184]	; (40180c <main+0x30c>)
  401752:	4798      	blx	r3
	  if (L == bL && R == bR)
  401754:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  401758:	3204      	adds	r2, #4
  40175a:	6813      	ldr	r3, [r2, #0]
  40175c:	4a08      	ldr	r2, [pc, #32]	; (401780 <main+0x280>)
  40175e:	4293      	cmp	r3, r2
  401760:	d109      	bne.n	401776 <main+0x276>
  401762:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
  401766:	6813      	ldr	r3, [r2, #0]
  401768:	4a06      	ldr	r2, [pc, #24]	; (401784 <main+0x284>)
  40176a:	4293      	cmp	r3, r2
  40176c:	d103      	bne.n	401776 <main+0x276>
	  printStr("Test decryption OK.\n");
  40176e:	482e      	ldr	r0, [pc, #184]	; (401828 <main+0x328>)
  401770:	4b2a      	ldr	r3, [pc, #168]	; (40181c <main+0x31c>)
  401772:	4798      	blx	r3
  401774:	e003      	b.n	40177e <main+0x27e>
	  else
	  printStr("Test decryption failed.\n");
  401776:	482d      	ldr	r0, [pc, #180]	; (40182c <main+0x32c>)
  401778:	4b28      	ldr	r3, [pc, #160]	; (40181c <main+0x31c>)
  40177a:	4798      	blx	r3
  40177c:	e7fa      	b.n	401774 <main+0x274>
  40177e:	e7fe      	b.n	40177e <main+0x27e>
  401780:	12345678 	.word	0x12345678
  401784:	16fde256 	.word	0x16fde256
  401788:	00400259 	.word	0x00400259
  40178c:	00400471 	.word	0x00400471
  401790:	0040071d 	.word	0x0040071d
  401794:	00400b79 	.word	0x00400b79
  401798:	40038000 	.word	0x40038000
  40179c:	07270e00 	.word	0x07270e00
  4017a0:	000f4240 	.word	0x000f4240
  4017a4:	00400581 	.word	0x00400581
  4017a8:	004005c5 	.word	0x004005c5
  4017ac:	004005b5 	.word	0x004005b5
  4017b0:	00400221 	.word	0x00400221
  4017b4:	0040123d 	.word	0x0040123d
  4017b8:	00400a05 	.word	0x00400a05
  4017bc:	00400709 	.word	0x00400709
  4017c0:	00401429 	.word	0x00401429
  4017c4:	004013d9 	.word	0x004013d9
  4017c8:	00401251 	.word	0x00401251
  4017cc:	00400169 	.word	0x00400169
  4017d0:	40008000 	.word	0x40008000
  4017d4:	0040038d 	.word	0x0040038d
  4017d8:	20000001 	.word	0x20000001
  4017dc:	004003bd 	.word	0x004003bd
  4017e0:	20000970 	.word	0x20000970
  4017e4:	00401309 	.word	0x00401309
  4017e8:	2000096c 	.word	0x2000096c
  4017ec:	00401281 	.word	0x00401281
  4017f0:	20000968 	.word	0x20000968
  4017f4:	00400d71 	.word	0x00400d71
  4017f8:	20000440 	.word	0x20000440
  4017fc:	004020b9 	.word	0x004020b9
  401800:	00407980 	.word	0x00407980
  401804:	00401159 	.word	0x00401159
  401808:	004010a1 	.word	0x004010a1
  40180c:	004014ad 	.word	0x004014ad
  401810:	47b8b9ec 	.word	0x47b8b9ec
  401814:	ce55ff90 	.word	0xce55ff90
  401818:	00407988 	.word	0x00407988
  40181c:	00401471 	.word	0x00401471
  401820:	004079a0 	.word	0x004079a0
  401824:	004010fd 	.word	0x004010fd
  401828:	004079bc 	.word	0x004079bc
  40182c:	004079d4 	.word	0x004079d4
  401830:	004005d1 	.word	0x004005d1
  401834:	0040098d 	.word	0x0040098d
  401838:	e000e100 	.word	0xe000e100
  40183c:	00401391 	.word	0x00401391

00401840 <__aeabi_drsub>:
  401840:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401844:	e002      	b.n	40184c <__adddf3>
  401846:	bf00      	nop

00401848 <__aeabi_dsub>:
  401848:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040184c <__adddf3>:
  40184c:	b530      	push	{r4, r5, lr}
  40184e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401852:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401856:	ea94 0f05 	teq	r4, r5
  40185a:	bf08      	it	eq
  40185c:	ea90 0f02 	teqeq	r0, r2
  401860:	bf1f      	itttt	ne
  401862:	ea54 0c00 	orrsne.w	ip, r4, r0
  401866:	ea55 0c02 	orrsne.w	ip, r5, r2
  40186a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40186e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401872:	f000 80e2 	beq.w	401a3a <__adddf3+0x1ee>
  401876:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40187a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40187e:	bfb8      	it	lt
  401880:	426d      	neglt	r5, r5
  401882:	dd0c      	ble.n	40189e <__adddf3+0x52>
  401884:	442c      	add	r4, r5
  401886:	ea80 0202 	eor.w	r2, r0, r2
  40188a:	ea81 0303 	eor.w	r3, r1, r3
  40188e:	ea82 0000 	eor.w	r0, r2, r0
  401892:	ea83 0101 	eor.w	r1, r3, r1
  401896:	ea80 0202 	eor.w	r2, r0, r2
  40189a:	ea81 0303 	eor.w	r3, r1, r3
  40189e:	2d36      	cmp	r5, #54	; 0x36
  4018a0:	bf88      	it	hi
  4018a2:	bd30      	pophi	{r4, r5, pc}
  4018a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4018a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4018ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4018b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4018b4:	d002      	beq.n	4018bc <__adddf3+0x70>
  4018b6:	4240      	negs	r0, r0
  4018b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4018bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4018c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4018c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4018c8:	d002      	beq.n	4018d0 <__adddf3+0x84>
  4018ca:	4252      	negs	r2, r2
  4018cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4018d0:	ea94 0f05 	teq	r4, r5
  4018d4:	f000 80a7 	beq.w	401a26 <__adddf3+0x1da>
  4018d8:	f1a4 0401 	sub.w	r4, r4, #1
  4018dc:	f1d5 0e20 	rsbs	lr, r5, #32
  4018e0:	db0d      	blt.n	4018fe <__adddf3+0xb2>
  4018e2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4018e6:	fa22 f205 	lsr.w	r2, r2, r5
  4018ea:	1880      	adds	r0, r0, r2
  4018ec:	f141 0100 	adc.w	r1, r1, #0
  4018f0:	fa03 f20e 	lsl.w	r2, r3, lr
  4018f4:	1880      	adds	r0, r0, r2
  4018f6:	fa43 f305 	asr.w	r3, r3, r5
  4018fa:	4159      	adcs	r1, r3
  4018fc:	e00e      	b.n	40191c <__adddf3+0xd0>
  4018fe:	f1a5 0520 	sub.w	r5, r5, #32
  401902:	f10e 0e20 	add.w	lr, lr, #32
  401906:	2a01      	cmp	r2, #1
  401908:	fa03 fc0e 	lsl.w	ip, r3, lr
  40190c:	bf28      	it	cs
  40190e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401912:	fa43 f305 	asr.w	r3, r3, r5
  401916:	18c0      	adds	r0, r0, r3
  401918:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40191c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401920:	d507      	bpl.n	401932 <__adddf3+0xe6>
  401922:	f04f 0e00 	mov.w	lr, #0
  401926:	f1dc 0c00 	rsbs	ip, ip, #0
  40192a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40192e:	eb6e 0101 	sbc.w	r1, lr, r1
  401932:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401936:	d31b      	bcc.n	401970 <__adddf3+0x124>
  401938:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40193c:	d30c      	bcc.n	401958 <__adddf3+0x10c>
  40193e:	0849      	lsrs	r1, r1, #1
  401940:	ea5f 0030 	movs.w	r0, r0, rrx
  401944:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401948:	f104 0401 	add.w	r4, r4, #1
  40194c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401950:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401954:	f080 809a 	bcs.w	401a8c <__adddf3+0x240>
  401958:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40195c:	bf08      	it	eq
  40195e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401962:	f150 0000 	adcs.w	r0, r0, #0
  401966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40196a:	ea41 0105 	orr.w	r1, r1, r5
  40196e:	bd30      	pop	{r4, r5, pc}
  401970:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401974:	4140      	adcs	r0, r0
  401976:	eb41 0101 	adc.w	r1, r1, r1
  40197a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40197e:	f1a4 0401 	sub.w	r4, r4, #1
  401982:	d1e9      	bne.n	401958 <__adddf3+0x10c>
  401984:	f091 0f00 	teq	r1, #0
  401988:	bf04      	itt	eq
  40198a:	4601      	moveq	r1, r0
  40198c:	2000      	moveq	r0, #0
  40198e:	fab1 f381 	clz	r3, r1
  401992:	bf08      	it	eq
  401994:	3320      	addeq	r3, #32
  401996:	f1a3 030b 	sub.w	r3, r3, #11
  40199a:	f1b3 0220 	subs.w	r2, r3, #32
  40199e:	da0c      	bge.n	4019ba <__adddf3+0x16e>
  4019a0:	320c      	adds	r2, #12
  4019a2:	dd08      	ble.n	4019b6 <__adddf3+0x16a>
  4019a4:	f102 0c14 	add.w	ip, r2, #20
  4019a8:	f1c2 020c 	rsb	r2, r2, #12
  4019ac:	fa01 f00c 	lsl.w	r0, r1, ip
  4019b0:	fa21 f102 	lsr.w	r1, r1, r2
  4019b4:	e00c      	b.n	4019d0 <__adddf3+0x184>
  4019b6:	f102 0214 	add.w	r2, r2, #20
  4019ba:	bfd8      	it	le
  4019bc:	f1c2 0c20 	rsble	ip, r2, #32
  4019c0:	fa01 f102 	lsl.w	r1, r1, r2
  4019c4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4019c8:	bfdc      	itt	le
  4019ca:	ea41 010c 	orrle.w	r1, r1, ip
  4019ce:	4090      	lslle	r0, r2
  4019d0:	1ae4      	subs	r4, r4, r3
  4019d2:	bfa2      	ittt	ge
  4019d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4019d8:	4329      	orrge	r1, r5
  4019da:	bd30      	popge	{r4, r5, pc}
  4019dc:	ea6f 0404 	mvn.w	r4, r4
  4019e0:	3c1f      	subs	r4, #31
  4019e2:	da1c      	bge.n	401a1e <__adddf3+0x1d2>
  4019e4:	340c      	adds	r4, #12
  4019e6:	dc0e      	bgt.n	401a06 <__adddf3+0x1ba>
  4019e8:	f104 0414 	add.w	r4, r4, #20
  4019ec:	f1c4 0220 	rsb	r2, r4, #32
  4019f0:	fa20 f004 	lsr.w	r0, r0, r4
  4019f4:	fa01 f302 	lsl.w	r3, r1, r2
  4019f8:	ea40 0003 	orr.w	r0, r0, r3
  4019fc:	fa21 f304 	lsr.w	r3, r1, r4
  401a00:	ea45 0103 	orr.w	r1, r5, r3
  401a04:	bd30      	pop	{r4, r5, pc}
  401a06:	f1c4 040c 	rsb	r4, r4, #12
  401a0a:	f1c4 0220 	rsb	r2, r4, #32
  401a0e:	fa20 f002 	lsr.w	r0, r0, r2
  401a12:	fa01 f304 	lsl.w	r3, r1, r4
  401a16:	ea40 0003 	orr.w	r0, r0, r3
  401a1a:	4629      	mov	r1, r5
  401a1c:	bd30      	pop	{r4, r5, pc}
  401a1e:	fa21 f004 	lsr.w	r0, r1, r4
  401a22:	4629      	mov	r1, r5
  401a24:	bd30      	pop	{r4, r5, pc}
  401a26:	f094 0f00 	teq	r4, #0
  401a2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401a2e:	bf06      	itte	eq
  401a30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401a34:	3401      	addeq	r4, #1
  401a36:	3d01      	subne	r5, #1
  401a38:	e74e      	b.n	4018d8 <__adddf3+0x8c>
  401a3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a3e:	bf18      	it	ne
  401a40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401a44:	d029      	beq.n	401a9a <__adddf3+0x24e>
  401a46:	ea94 0f05 	teq	r4, r5
  401a4a:	bf08      	it	eq
  401a4c:	ea90 0f02 	teqeq	r0, r2
  401a50:	d005      	beq.n	401a5e <__adddf3+0x212>
  401a52:	ea54 0c00 	orrs.w	ip, r4, r0
  401a56:	bf04      	itt	eq
  401a58:	4619      	moveq	r1, r3
  401a5a:	4610      	moveq	r0, r2
  401a5c:	bd30      	pop	{r4, r5, pc}
  401a5e:	ea91 0f03 	teq	r1, r3
  401a62:	bf1e      	ittt	ne
  401a64:	2100      	movne	r1, #0
  401a66:	2000      	movne	r0, #0
  401a68:	bd30      	popne	{r4, r5, pc}
  401a6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401a6e:	d105      	bne.n	401a7c <__adddf3+0x230>
  401a70:	0040      	lsls	r0, r0, #1
  401a72:	4149      	adcs	r1, r1
  401a74:	bf28      	it	cs
  401a76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401a7a:	bd30      	pop	{r4, r5, pc}
  401a7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401a80:	bf3c      	itt	cc
  401a82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401a86:	bd30      	popcc	{r4, r5, pc}
  401a88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401a8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401a90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401a94:	f04f 0000 	mov.w	r0, #0
  401a98:	bd30      	pop	{r4, r5, pc}
  401a9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a9e:	bf1a      	itte	ne
  401aa0:	4619      	movne	r1, r3
  401aa2:	4610      	movne	r0, r2
  401aa4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401aa8:	bf1c      	itt	ne
  401aaa:	460b      	movne	r3, r1
  401aac:	4602      	movne	r2, r0
  401aae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401ab2:	bf06      	itte	eq
  401ab4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401ab8:	ea91 0f03 	teqeq	r1, r3
  401abc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401ac0:	bd30      	pop	{r4, r5, pc}
  401ac2:	bf00      	nop

00401ac4 <__aeabi_ui2d>:
  401ac4:	f090 0f00 	teq	r0, #0
  401ac8:	bf04      	itt	eq
  401aca:	2100      	moveq	r1, #0
  401acc:	4770      	bxeq	lr
  401ace:	b530      	push	{r4, r5, lr}
  401ad0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401ad4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401ad8:	f04f 0500 	mov.w	r5, #0
  401adc:	f04f 0100 	mov.w	r1, #0
  401ae0:	e750      	b.n	401984 <__adddf3+0x138>
  401ae2:	bf00      	nop

00401ae4 <__aeabi_i2d>:
  401ae4:	f090 0f00 	teq	r0, #0
  401ae8:	bf04      	itt	eq
  401aea:	2100      	moveq	r1, #0
  401aec:	4770      	bxeq	lr
  401aee:	b530      	push	{r4, r5, lr}
  401af0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401af4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401af8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401afc:	bf48      	it	mi
  401afe:	4240      	negmi	r0, r0
  401b00:	f04f 0100 	mov.w	r1, #0
  401b04:	e73e      	b.n	401984 <__adddf3+0x138>
  401b06:	bf00      	nop

00401b08 <__aeabi_f2d>:
  401b08:	0042      	lsls	r2, r0, #1
  401b0a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401b0e:	ea4f 0131 	mov.w	r1, r1, rrx
  401b12:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401b16:	bf1f      	itttt	ne
  401b18:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401b1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401b20:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401b24:	4770      	bxne	lr
  401b26:	f092 0f00 	teq	r2, #0
  401b2a:	bf14      	ite	ne
  401b2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401b30:	4770      	bxeq	lr
  401b32:	b530      	push	{r4, r5, lr}
  401b34:	f44f 7460 	mov.w	r4, #896	; 0x380
  401b38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401b3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401b40:	e720      	b.n	401984 <__adddf3+0x138>
  401b42:	bf00      	nop

00401b44 <__aeabi_ul2d>:
  401b44:	ea50 0201 	orrs.w	r2, r0, r1
  401b48:	bf08      	it	eq
  401b4a:	4770      	bxeq	lr
  401b4c:	b530      	push	{r4, r5, lr}
  401b4e:	f04f 0500 	mov.w	r5, #0
  401b52:	e00a      	b.n	401b6a <__aeabi_l2d+0x16>

00401b54 <__aeabi_l2d>:
  401b54:	ea50 0201 	orrs.w	r2, r0, r1
  401b58:	bf08      	it	eq
  401b5a:	4770      	bxeq	lr
  401b5c:	b530      	push	{r4, r5, lr}
  401b5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401b62:	d502      	bpl.n	401b6a <__aeabi_l2d+0x16>
  401b64:	4240      	negs	r0, r0
  401b66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401b6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401b6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401b72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401b76:	f43f aedc 	beq.w	401932 <__adddf3+0xe6>
  401b7a:	f04f 0203 	mov.w	r2, #3
  401b7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401b82:	bf18      	it	ne
  401b84:	3203      	addne	r2, #3
  401b86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401b8a:	bf18      	it	ne
  401b8c:	3203      	addne	r2, #3
  401b8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401b92:	f1c2 0320 	rsb	r3, r2, #32
  401b96:	fa00 fc03 	lsl.w	ip, r0, r3
  401b9a:	fa20 f002 	lsr.w	r0, r0, r2
  401b9e:	fa01 fe03 	lsl.w	lr, r1, r3
  401ba2:	ea40 000e 	orr.w	r0, r0, lr
  401ba6:	fa21 f102 	lsr.w	r1, r1, r2
  401baa:	4414      	add	r4, r2
  401bac:	e6c1      	b.n	401932 <__adddf3+0xe6>
  401bae:	bf00      	nop

00401bb0 <__aeabi_dmul>:
  401bb0:	b570      	push	{r4, r5, r6, lr}
  401bb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401bb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401bba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401bbe:	bf1d      	ittte	ne
  401bc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401bc4:	ea94 0f0c 	teqne	r4, ip
  401bc8:	ea95 0f0c 	teqne	r5, ip
  401bcc:	f000 f8de 	bleq	401d8c <__aeabi_dmul+0x1dc>
  401bd0:	442c      	add	r4, r5
  401bd2:	ea81 0603 	eor.w	r6, r1, r3
  401bd6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401bda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401bde:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401be2:	bf18      	it	ne
  401be4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401be8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401bf0:	d038      	beq.n	401c64 <__aeabi_dmul+0xb4>
  401bf2:	fba0 ce02 	umull	ip, lr, r0, r2
  401bf6:	f04f 0500 	mov.w	r5, #0
  401bfa:	fbe1 e502 	umlal	lr, r5, r1, r2
  401bfe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401c02:	fbe0 e503 	umlal	lr, r5, r0, r3
  401c06:	f04f 0600 	mov.w	r6, #0
  401c0a:	fbe1 5603 	umlal	r5, r6, r1, r3
  401c0e:	f09c 0f00 	teq	ip, #0
  401c12:	bf18      	it	ne
  401c14:	f04e 0e01 	orrne.w	lr, lr, #1
  401c18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401c1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401c20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401c24:	d204      	bcs.n	401c30 <__aeabi_dmul+0x80>
  401c26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401c2a:	416d      	adcs	r5, r5
  401c2c:	eb46 0606 	adc.w	r6, r6, r6
  401c30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401c34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401c38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401c3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401c40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401c44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401c48:	bf88      	it	hi
  401c4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401c4e:	d81e      	bhi.n	401c8e <__aeabi_dmul+0xde>
  401c50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401c54:	bf08      	it	eq
  401c56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401c5a:	f150 0000 	adcs.w	r0, r0, #0
  401c5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401c62:	bd70      	pop	{r4, r5, r6, pc}
  401c64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401c68:	ea46 0101 	orr.w	r1, r6, r1
  401c6c:	ea40 0002 	orr.w	r0, r0, r2
  401c70:	ea81 0103 	eor.w	r1, r1, r3
  401c74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401c78:	bfc2      	ittt	gt
  401c7a:	ebd4 050c 	rsbsgt	r5, r4, ip
  401c7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401c82:	bd70      	popgt	{r4, r5, r6, pc}
  401c84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c88:	f04f 0e00 	mov.w	lr, #0
  401c8c:	3c01      	subs	r4, #1
  401c8e:	f300 80ab 	bgt.w	401de8 <__aeabi_dmul+0x238>
  401c92:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401c96:	bfde      	ittt	le
  401c98:	2000      	movle	r0, #0
  401c9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401c9e:	bd70      	pople	{r4, r5, r6, pc}
  401ca0:	f1c4 0400 	rsb	r4, r4, #0
  401ca4:	3c20      	subs	r4, #32
  401ca6:	da35      	bge.n	401d14 <__aeabi_dmul+0x164>
  401ca8:	340c      	adds	r4, #12
  401caa:	dc1b      	bgt.n	401ce4 <__aeabi_dmul+0x134>
  401cac:	f104 0414 	add.w	r4, r4, #20
  401cb0:	f1c4 0520 	rsb	r5, r4, #32
  401cb4:	fa00 f305 	lsl.w	r3, r0, r5
  401cb8:	fa20 f004 	lsr.w	r0, r0, r4
  401cbc:	fa01 f205 	lsl.w	r2, r1, r5
  401cc0:	ea40 0002 	orr.w	r0, r0, r2
  401cc4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401cc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401ccc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401cd0:	fa21 f604 	lsr.w	r6, r1, r4
  401cd4:	eb42 0106 	adc.w	r1, r2, r6
  401cd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401cdc:	bf08      	it	eq
  401cde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401ce2:	bd70      	pop	{r4, r5, r6, pc}
  401ce4:	f1c4 040c 	rsb	r4, r4, #12
  401ce8:	f1c4 0520 	rsb	r5, r4, #32
  401cec:	fa00 f304 	lsl.w	r3, r0, r4
  401cf0:	fa20 f005 	lsr.w	r0, r0, r5
  401cf4:	fa01 f204 	lsl.w	r2, r1, r4
  401cf8:	ea40 0002 	orr.w	r0, r0, r2
  401cfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401d00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401d04:	f141 0100 	adc.w	r1, r1, #0
  401d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401d0c:	bf08      	it	eq
  401d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401d12:	bd70      	pop	{r4, r5, r6, pc}
  401d14:	f1c4 0520 	rsb	r5, r4, #32
  401d18:	fa00 f205 	lsl.w	r2, r0, r5
  401d1c:	ea4e 0e02 	orr.w	lr, lr, r2
  401d20:	fa20 f304 	lsr.w	r3, r0, r4
  401d24:	fa01 f205 	lsl.w	r2, r1, r5
  401d28:	ea43 0302 	orr.w	r3, r3, r2
  401d2c:	fa21 f004 	lsr.w	r0, r1, r4
  401d30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401d34:	fa21 f204 	lsr.w	r2, r1, r4
  401d38:	ea20 0002 	bic.w	r0, r0, r2
  401d3c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401d40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401d44:	bf08      	it	eq
  401d46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401d4a:	bd70      	pop	{r4, r5, r6, pc}
  401d4c:	f094 0f00 	teq	r4, #0
  401d50:	d10f      	bne.n	401d72 <__aeabi_dmul+0x1c2>
  401d52:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  401d56:	0040      	lsls	r0, r0, #1
  401d58:	eb41 0101 	adc.w	r1, r1, r1
  401d5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401d60:	bf08      	it	eq
  401d62:	3c01      	subeq	r4, #1
  401d64:	d0f7      	beq.n	401d56 <__aeabi_dmul+0x1a6>
  401d66:	ea41 0106 	orr.w	r1, r1, r6
  401d6a:	f095 0f00 	teq	r5, #0
  401d6e:	bf18      	it	ne
  401d70:	4770      	bxne	lr
  401d72:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401d76:	0052      	lsls	r2, r2, #1
  401d78:	eb43 0303 	adc.w	r3, r3, r3
  401d7c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401d80:	bf08      	it	eq
  401d82:	3d01      	subeq	r5, #1
  401d84:	d0f7      	beq.n	401d76 <__aeabi_dmul+0x1c6>
  401d86:	ea43 0306 	orr.w	r3, r3, r6
  401d8a:	4770      	bx	lr
  401d8c:	ea94 0f0c 	teq	r4, ip
  401d90:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401d94:	bf18      	it	ne
  401d96:	ea95 0f0c 	teqne	r5, ip
  401d9a:	d00c      	beq.n	401db6 <__aeabi_dmul+0x206>
  401d9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401da0:	bf18      	it	ne
  401da2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401da6:	d1d1      	bne.n	401d4c <__aeabi_dmul+0x19c>
  401da8:	ea81 0103 	eor.w	r1, r1, r3
  401dac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401db0:	f04f 0000 	mov.w	r0, #0
  401db4:	bd70      	pop	{r4, r5, r6, pc}
  401db6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401dba:	bf06      	itte	eq
  401dbc:	4610      	moveq	r0, r2
  401dbe:	4619      	moveq	r1, r3
  401dc0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401dc4:	d019      	beq.n	401dfa <__aeabi_dmul+0x24a>
  401dc6:	ea94 0f0c 	teq	r4, ip
  401dca:	d102      	bne.n	401dd2 <__aeabi_dmul+0x222>
  401dcc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401dd0:	d113      	bne.n	401dfa <__aeabi_dmul+0x24a>
  401dd2:	ea95 0f0c 	teq	r5, ip
  401dd6:	d105      	bne.n	401de4 <__aeabi_dmul+0x234>
  401dd8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401ddc:	bf1c      	itt	ne
  401dde:	4610      	movne	r0, r2
  401de0:	4619      	movne	r1, r3
  401de2:	d10a      	bne.n	401dfa <__aeabi_dmul+0x24a>
  401de4:	ea81 0103 	eor.w	r1, r1, r3
  401de8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401dec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401df0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401df4:	f04f 0000 	mov.w	r0, #0
  401df8:	bd70      	pop	{r4, r5, r6, pc}
  401dfa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401dfe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401e02:	bd70      	pop	{r4, r5, r6, pc}

00401e04 <__aeabi_ddiv>:
  401e04:	b570      	push	{r4, r5, r6, lr}
  401e06:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401e0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401e0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401e12:	bf1d      	ittte	ne
  401e14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401e18:	ea94 0f0c 	teqne	r4, ip
  401e1c:	ea95 0f0c 	teqne	r5, ip
  401e20:	f000 f8a7 	bleq	401f72 <__aeabi_ddiv+0x16e>
  401e24:	eba4 0405 	sub.w	r4, r4, r5
  401e28:	ea81 0e03 	eor.w	lr, r1, r3
  401e2c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401e30:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401e34:	f000 8088 	beq.w	401f48 <__aeabi_ddiv+0x144>
  401e38:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401e3c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401e40:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401e44:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401e48:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401e4c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401e50:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401e54:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401e58:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401e5c:	429d      	cmp	r5, r3
  401e5e:	bf08      	it	eq
  401e60:	4296      	cmpeq	r6, r2
  401e62:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401e66:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401e6a:	d202      	bcs.n	401e72 <__aeabi_ddiv+0x6e>
  401e6c:	085b      	lsrs	r3, r3, #1
  401e6e:	ea4f 0232 	mov.w	r2, r2, rrx
  401e72:	1ab6      	subs	r6, r6, r2
  401e74:	eb65 0503 	sbc.w	r5, r5, r3
  401e78:	085b      	lsrs	r3, r3, #1
  401e7a:	ea4f 0232 	mov.w	r2, r2, rrx
  401e7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401e82:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  401e86:	ebb6 0e02 	subs.w	lr, r6, r2
  401e8a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e8e:	bf22      	ittt	cs
  401e90:	1ab6      	subcs	r6, r6, r2
  401e92:	4675      	movcs	r5, lr
  401e94:	ea40 000c 	orrcs.w	r0, r0, ip
  401e98:	085b      	lsrs	r3, r3, #1
  401e9a:	ea4f 0232 	mov.w	r2, r2, rrx
  401e9e:	ebb6 0e02 	subs.w	lr, r6, r2
  401ea2:	eb75 0e03 	sbcs.w	lr, r5, r3
  401ea6:	bf22      	ittt	cs
  401ea8:	1ab6      	subcs	r6, r6, r2
  401eaa:	4675      	movcs	r5, lr
  401eac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401eb0:	085b      	lsrs	r3, r3, #1
  401eb2:	ea4f 0232 	mov.w	r2, r2, rrx
  401eb6:	ebb6 0e02 	subs.w	lr, r6, r2
  401eba:	eb75 0e03 	sbcs.w	lr, r5, r3
  401ebe:	bf22      	ittt	cs
  401ec0:	1ab6      	subcs	r6, r6, r2
  401ec2:	4675      	movcs	r5, lr
  401ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401ec8:	085b      	lsrs	r3, r3, #1
  401eca:	ea4f 0232 	mov.w	r2, r2, rrx
  401ece:	ebb6 0e02 	subs.w	lr, r6, r2
  401ed2:	eb75 0e03 	sbcs.w	lr, r5, r3
  401ed6:	bf22      	ittt	cs
  401ed8:	1ab6      	subcs	r6, r6, r2
  401eda:	4675      	movcs	r5, lr
  401edc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401ee0:	ea55 0e06 	orrs.w	lr, r5, r6
  401ee4:	d018      	beq.n	401f18 <__aeabi_ddiv+0x114>
  401ee6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401eea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401eee:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401ef2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401ef6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401efa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401efe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401f02:	d1c0      	bne.n	401e86 <__aeabi_ddiv+0x82>
  401f04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401f08:	d10b      	bne.n	401f22 <__aeabi_ddiv+0x11e>
  401f0a:	ea41 0100 	orr.w	r1, r1, r0
  401f0e:	f04f 0000 	mov.w	r0, #0
  401f12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401f16:	e7b6      	b.n	401e86 <__aeabi_ddiv+0x82>
  401f18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401f1c:	bf04      	itt	eq
  401f1e:	4301      	orreq	r1, r0
  401f20:	2000      	moveq	r0, #0
  401f22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401f26:	bf88      	it	hi
  401f28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401f2c:	f63f aeaf 	bhi.w	401c8e <__aeabi_dmul+0xde>
  401f30:	ebb5 0c03 	subs.w	ip, r5, r3
  401f34:	bf04      	itt	eq
  401f36:	ebb6 0c02 	subseq.w	ip, r6, r2
  401f3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401f3e:	f150 0000 	adcs.w	r0, r0, #0
  401f42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401f46:	bd70      	pop	{r4, r5, r6, pc}
  401f48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401f4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401f50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401f54:	bfc2      	ittt	gt
  401f56:	ebd4 050c 	rsbsgt	r5, r4, ip
  401f5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401f5e:	bd70      	popgt	{r4, r5, r6, pc}
  401f60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401f64:	f04f 0e00 	mov.w	lr, #0
  401f68:	3c01      	subs	r4, #1
  401f6a:	e690      	b.n	401c8e <__aeabi_dmul+0xde>
  401f6c:	ea45 0e06 	orr.w	lr, r5, r6
  401f70:	e68d      	b.n	401c8e <__aeabi_dmul+0xde>
  401f72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401f76:	ea94 0f0c 	teq	r4, ip
  401f7a:	bf08      	it	eq
  401f7c:	ea95 0f0c 	teqeq	r5, ip
  401f80:	f43f af3b 	beq.w	401dfa <__aeabi_dmul+0x24a>
  401f84:	ea94 0f0c 	teq	r4, ip
  401f88:	d10a      	bne.n	401fa0 <__aeabi_ddiv+0x19c>
  401f8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401f8e:	f47f af34 	bne.w	401dfa <__aeabi_dmul+0x24a>
  401f92:	ea95 0f0c 	teq	r5, ip
  401f96:	f47f af25 	bne.w	401de4 <__aeabi_dmul+0x234>
  401f9a:	4610      	mov	r0, r2
  401f9c:	4619      	mov	r1, r3
  401f9e:	e72c      	b.n	401dfa <__aeabi_dmul+0x24a>
  401fa0:	ea95 0f0c 	teq	r5, ip
  401fa4:	d106      	bne.n	401fb4 <__aeabi_ddiv+0x1b0>
  401fa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401faa:	f43f aefd 	beq.w	401da8 <__aeabi_dmul+0x1f8>
  401fae:	4610      	mov	r0, r2
  401fb0:	4619      	mov	r1, r3
  401fb2:	e722      	b.n	401dfa <__aeabi_dmul+0x24a>
  401fb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401fb8:	bf18      	it	ne
  401fba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401fbe:	f47f aec5 	bne.w	401d4c <__aeabi_dmul+0x19c>
  401fc2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401fc6:	f47f af0d 	bne.w	401de4 <__aeabi_dmul+0x234>
  401fca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401fce:	f47f aeeb 	bne.w	401da8 <__aeabi_dmul+0x1f8>
  401fd2:	e712      	b.n	401dfa <__aeabi_dmul+0x24a>

00401fd4 <__libc_init_array>:
  401fd4:	b570      	push	{r4, r5, r6, lr}
  401fd6:	4e0f      	ldr	r6, [pc, #60]	; (402014 <__libc_init_array+0x40>)
  401fd8:	4d0f      	ldr	r5, [pc, #60]	; (402018 <__libc_init_array+0x44>)
  401fda:	1b76      	subs	r6, r6, r5
  401fdc:	10b6      	asrs	r6, r6, #2
  401fde:	d007      	beq.n	401ff0 <__libc_init_array+0x1c>
  401fe0:	3d04      	subs	r5, #4
  401fe2:	2400      	movs	r4, #0
  401fe4:	3401      	adds	r4, #1
  401fe6:	f855 3f04 	ldr.w	r3, [r5, #4]!
  401fea:	4798      	blx	r3
  401fec:	42a6      	cmp	r6, r4
  401fee:	d1f9      	bne.n	401fe4 <__libc_init_array+0x10>
  401ff0:	4e0a      	ldr	r6, [pc, #40]	; (40201c <__libc_init_array+0x48>)
  401ff2:	4d0b      	ldr	r5, [pc, #44]	; (402020 <__libc_init_array+0x4c>)
  401ff4:	1b76      	subs	r6, r6, r5
  401ff6:	f005 fdbd 	bl	407b74 <_init>
  401ffa:	10b6      	asrs	r6, r6, #2
  401ffc:	d008      	beq.n	402010 <__libc_init_array+0x3c>
  401ffe:	3d04      	subs	r5, #4
  402000:	2400      	movs	r4, #0
  402002:	3401      	adds	r4, #1
  402004:	f855 3f04 	ldr.w	r3, [r5, #4]!
  402008:	4798      	blx	r3
  40200a:	42a6      	cmp	r6, r4
  40200c:	d1f9      	bne.n	402002 <__libc_init_array+0x2e>
  40200e:	bd70      	pop	{r4, r5, r6, pc}
  402010:	bd70      	pop	{r4, r5, r6, pc}
  402012:	bf00      	nop
  402014:	00407b80 	.word	0x00407b80
  402018:	00407b80 	.word	0x00407b80
  40201c:	00407b88 	.word	0x00407b88
  402020:	00407b80 	.word	0x00407b80

00402024 <memset>:
  402024:	b4f0      	push	{r4, r5, r6, r7}
  402026:	0784      	lsls	r4, r0, #30
  402028:	d043      	beq.n	4020b2 <memset+0x8e>
  40202a:	1e54      	subs	r4, r2, #1
  40202c:	2a00      	cmp	r2, #0
  40202e:	d03e      	beq.n	4020ae <memset+0x8a>
  402030:	b2cd      	uxtb	r5, r1
  402032:	4603      	mov	r3, r0
  402034:	e003      	b.n	40203e <memset+0x1a>
  402036:	1e62      	subs	r2, r4, #1
  402038:	2c00      	cmp	r4, #0
  40203a:	d038      	beq.n	4020ae <memset+0x8a>
  40203c:	4614      	mov	r4, r2
  40203e:	f803 5b01 	strb.w	r5, [r3], #1
  402042:	079a      	lsls	r2, r3, #30
  402044:	d1f7      	bne.n	402036 <memset+0x12>
  402046:	2c03      	cmp	r4, #3
  402048:	d92a      	bls.n	4020a0 <memset+0x7c>
  40204a:	b2cd      	uxtb	r5, r1
  40204c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402050:	2c0f      	cmp	r4, #15
  402052:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402056:	d915      	bls.n	402084 <memset+0x60>
  402058:	f1a4 0710 	sub.w	r7, r4, #16
  40205c:	093f      	lsrs	r7, r7, #4
  40205e:	f103 0610 	add.w	r6, r3, #16
  402062:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  402066:	461a      	mov	r2, r3
  402068:	6015      	str	r5, [r2, #0]
  40206a:	6055      	str	r5, [r2, #4]
  40206c:	6095      	str	r5, [r2, #8]
  40206e:	60d5      	str	r5, [r2, #12]
  402070:	3210      	adds	r2, #16
  402072:	42b2      	cmp	r2, r6
  402074:	d1f8      	bne.n	402068 <memset+0x44>
  402076:	f004 040f 	and.w	r4, r4, #15
  40207a:	3701      	adds	r7, #1
  40207c:	2c03      	cmp	r4, #3
  40207e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  402082:	d90d      	bls.n	4020a0 <memset+0x7c>
  402084:	461e      	mov	r6, r3
  402086:	4622      	mov	r2, r4
  402088:	3a04      	subs	r2, #4
  40208a:	2a03      	cmp	r2, #3
  40208c:	f846 5b04 	str.w	r5, [r6], #4
  402090:	d8fa      	bhi.n	402088 <memset+0x64>
  402092:	1f22      	subs	r2, r4, #4
  402094:	f022 0203 	bic.w	r2, r2, #3
  402098:	3204      	adds	r2, #4
  40209a:	4413      	add	r3, r2
  40209c:	f004 0403 	and.w	r4, r4, #3
  4020a0:	b12c      	cbz	r4, 4020ae <memset+0x8a>
  4020a2:	b2c9      	uxtb	r1, r1
  4020a4:	441c      	add	r4, r3
  4020a6:	f803 1b01 	strb.w	r1, [r3], #1
  4020aa:	42a3      	cmp	r3, r4
  4020ac:	d1fb      	bne.n	4020a6 <memset+0x82>
  4020ae:	bcf0      	pop	{r4, r5, r6, r7}
  4020b0:	4770      	bx	lr
  4020b2:	4614      	mov	r4, r2
  4020b4:	4603      	mov	r3, r0
  4020b6:	e7c6      	b.n	402046 <memset+0x22>

004020b8 <setbuf>:
  4020b8:	2900      	cmp	r1, #0
  4020ba:	bf0c      	ite	eq
  4020bc:	2202      	moveq	r2, #2
  4020be:	2200      	movne	r2, #0
  4020c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4020c4:	f000 b800 	b.w	4020c8 <setvbuf>

004020c8 <setvbuf>:
  4020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020cc:	4c3c      	ldr	r4, [pc, #240]	; (4021c0 <setvbuf+0xf8>)
  4020ce:	6825      	ldr	r5, [r4, #0]
  4020d0:	4688      	mov	r8, r1
  4020d2:	4604      	mov	r4, r0
  4020d4:	4616      	mov	r6, r2
  4020d6:	461f      	mov	r7, r3
  4020d8:	b115      	cbz	r5, 4020e0 <setvbuf+0x18>
  4020da:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4020dc:	2b00      	cmp	r3, #0
  4020de:	d04f      	beq.n	402180 <setvbuf+0xb8>
  4020e0:	2e02      	cmp	r6, #2
  4020e2:	d830      	bhi.n	402146 <setvbuf+0x7e>
  4020e4:	2f00      	cmp	r7, #0
  4020e6:	db2e      	blt.n	402146 <setvbuf+0x7e>
  4020e8:	4628      	mov	r0, r5
  4020ea:	4621      	mov	r1, r4
  4020ec:	f002 fbae 	bl	40484c <_fflush_r>
  4020f0:	89a3      	ldrh	r3, [r4, #12]
  4020f2:	2200      	movs	r2, #0
  4020f4:	6062      	str	r2, [r4, #4]
  4020f6:	61a2      	str	r2, [r4, #24]
  4020f8:	061a      	lsls	r2, r3, #24
  4020fa:	d428      	bmi.n	40214e <setvbuf+0x86>
  4020fc:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  402100:	b29b      	uxth	r3, r3
  402102:	2e02      	cmp	r6, #2
  402104:	81a3      	strh	r3, [r4, #12]
  402106:	d02d      	beq.n	402164 <setvbuf+0x9c>
  402108:	f1b8 0f00 	cmp.w	r8, #0
  40210c:	d03c      	beq.n	402188 <setvbuf+0xc0>
  40210e:	2e01      	cmp	r6, #1
  402110:	d013      	beq.n	40213a <setvbuf+0x72>
  402112:	b29b      	uxth	r3, r3
  402114:	f003 0008 	and.w	r0, r3, #8
  402118:	4a2a      	ldr	r2, [pc, #168]	; (4021c4 <setvbuf+0xfc>)
  40211a:	63ea      	str	r2, [r5, #60]	; 0x3c
  40211c:	b280      	uxth	r0, r0
  40211e:	f8c4 8000 	str.w	r8, [r4]
  402122:	f8c4 8010 	str.w	r8, [r4, #16]
  402126:	6167      	str	r7, [r4, #20]
  402128:	b178      	cbz	r0, 40214a <setvbuf+0x82>
  40212a:	f013 0f03 	tst.w	r3, #3
  40212e:	bf18      	it	ne
  402130:	2700      	movne	r7, #0
  402132:	60a7      	str	r7, [r4, #8]
  402134:	2000      	movs	r0, #0
  402136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40213a:	f043 0301 	orr.w	r3, r3, #1
  40213e:	427a      	negs	r2, r7
  402140:	81a3      	strh	r3, [r4, #12]
  402142:	61a2      	str	r2, [r4, #24]
  402144:	e7e5      	b.n	402112 <setvbuf+0x4a>
  402146:	f04f 30ff 	mov.w	r0, #4294967295
  40214a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40214e:	4628      	mov	r0, r5
  402150:	6921      	ldr	r1, [r4, #16]
  402152:	f002 fc7b 	bl	404a4c <_free_r>
  402156:	89a3      	ldrh	r3, [r4, #12]
  402158:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40215c:	b29b      	uxth	r3, r3
  40215e:	2e02      	cmp	r6, #2
  402160:	81a3      	strh	r3, [r4, #12]
  402162:	d1d1      	bne.n	402108 <setvbuf+0x40>
  402164:	2000      	movs	r0, #0
  402166:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40216a:	f043 0302 	orr.w	r3, r3, #2
  40216e:	2500      	movs	r5, #0
  402170:	2101      	movs	r1, #1
  402172:	81a3      	strh	r3, [r4, #12]
  402174:	60a5      	str	r5, [r4, #8]
  402176:	6022      	str	r2, [r4, #0]
  402178:	6122      	str	r2, [r4, #16]
  40217a:	6161      	str	r1, [r4, #20]
  40217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402180:	4628      	mov	r0, r5
  402182:	f002 fb7f 	bl	404884 <__sinit>
  402186:	e7ab      	b.n	4020e0 <setvbuf+0x18>
  402188:	2f00      	cmp	r7, #0
  40218a:	bf08      	it	eq
  40218c:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  402190:	4638      	mov	r0, r7
  402192:	f002 fd53 	bl	404c3c <malloc>
  402196:	4680      	mov	r8, r0
  402198:	b128      	cbz	r0, 4021a6 <setvbuf+0xde>
  40219a:	89a3      	ldrh	r3, [r4, #12]
  40219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021a0:	b29b      	uxth	r3, r3
  4021a2:	81a3      	strh	r3, [r4, #12]
  4021a4:	e7b3      	b.n	40210e <setvbuf+0x46>
  4021a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4021aa:	f002 fd47 	bl	404c3c <malloc>
  4021ae:	4680      	mov	r8, r0
  4021b0:	b918      	cbnz	r0, 4021ba <setvbuf+0xf2>
  4021b2:	89a3      	ldrh	r3, [r4, #12]
  4021b4:	f04f 30ff 	mov.w	r0, #4294967295
  4021b8:	e7d5      	b.n	402166 <setvbuf+0x9e>
  4021ba:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4021be:	e7ec      	b.n	40219a <setvbuf+0xd2>
  4021c0:	20000440 	.word	0x20000440
  4021c4:	00404879 	.word	0x00404879

004021c8 <sprintf>:
  4021c8:	b40e      	push	{r1, r2, r3}
  4021ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021cc:	b09c      	sub	sp, #112	; 0x70
  4021ce:	ab21      	add	r3, sp, #132	; 0x84
  4021d0:	490f      	ldr	r1, [pc, #60]	; (402210 <sprintf+0x48>)
  4021d2:	f853 2b04 	ldr.w	r2, [r3], #4
  4021d6:	9301      	str	r3, [sp, #4]
  4021d8:	4605      	mov	r5, r0
  4021da:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4021de:	6808      	ldr	r0, [r1, #0]
  4021e0:	9502      	str	r5, [sp, #8]
  4021e2:	f44f 7702 	mov.w	r7, #520	; 0x208
  4021e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4021ea:	a902      	add	r1, sp, #8
  4021ec:	9506      	str	r5, [sp, #24]
  4021ee:	f8ad 7014 	strh.w	r7, [sp, #20]
  4021f2:	9404      	str	r4, [sp, #16]
  4021f4:	9407      	str	r4, [sp, #28]
  4021f6:	f8ad 6016 	strh.w	r6, [sp, #22]
  4021fa:	f000 f83b 	bl	402274 <_svfprintf_r>
  4021fe:	9b02      	ldr	r3, [sp, #8]
  402200:	2200      	movs	r2, #0
  402202:	701a      	strb	r2, [r3, #0]
  402204:	b01c      	add	sp, #112	; 0x70
  402206:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40220a:	b003      	add	sp, #12
  40220c:	4770      	bx	lr
  40220e:	bf00      	nop
  402210:	20000440 	.word	0x20000440

00402214 <strlen>:
  402214:	f020 0103 	bic.w	r1, r0, #3
  402218:	f010 0003 	ands.w	r0, r0, #3
  40221c:	f1c0 0000 	rsb	r0, r0, #0
  402220:	f851 3b04 	ldr.w	r3, [r1], #4
  402224:	f100 0c04 	add.w	ip, r0, #4
  402228:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40222c:	f06f 0200 	mvn.w	r2, #0
  402230:	bf1c      	itt	ne
  402232:	fa22 f20c 	lsrne.w	r2, r2, ip
  402236:	4313      	orrne	r3, r2
  402238:	f04f 0c01 	mov.w	ip, #1
  40223c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  402240:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  402244:	eba3 020c 	sub.w	r2, r3, ip
  402248:	ea22 0203 	bic.w	r2, r2, r3
  40224c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  402250:	bf04      	itt	eq
  402252:	f851 3b04 	ldreq.w	r3, [r1], #4
  402256:	3004      	addeq	r0, #4
  402258:	d0f4      	beq.n	402244 <strlen+0x30>
  40225a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40225e:	bf1f      	itttt	ne
  402260:	3001      	addne	r0, #1
  402262:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  402266:	3001      	addne	r0, #1
  402268:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  40226c:	bf18      	it	ne
  40226e:	3001      	addne	r0, #1
  402270:	4770      	bx	lr
  402272:	bf00      	nop

00402274 <_svfprintf_r>:
  402274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402278:	b0c9      	sub	sp, #292	; 0x124
  40227a:	4691      	mov	r9, r2
  40227c:	9310      	str	r3, [sp, #64]	; 0x40
  40227e:	910c      	str	r1, [sp, #48]	; 0x30
  402280:	900d      	str	r0, [sp, #52]	; 0x34
  402282:	f002 fcd7 	bl	404c34 <_localeconv_r>
  402286:	6800      	ldr	r0, [r0, #0]
  402288:	9015      	str	r0, [sp, #84]	; 0x54
  40228a:	f7ff ffc3 	bl	402214 <strlen>
  40228e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402290:	9018      	str	r0, [sp, #96]	; 0x60
  402292:	89a3      	ldrh	r3, [r4, #12]
  402294:	061a      	lsls	r2, r3, #24
  402296:	d503      	bpl.n	4022a0 <_svfprintf_r+0x2c>
  402298:	6923      	ldr	r3, [r4, #16]
  40229a:	2b00      	cmp	r3, #0
  40229c:	f001 808d 	beq.w	4033ba <_svfprintf_r+0x1146>
  4022a0:	ac38      	add	r4, sp, #224	; 0xe0
  4022a2:	46a4      	mov	ip, r4
  4022a4:	9408      	str	r4, [sp, #32]
  4022a6:	942b      	str	r4, [sp, #172]	; 0xac
  4022a8:	2500      	movs	r5, #0
  4022aa:	2400      	movs	r4, #0
  4022ac:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  4022b0:	2300      	movs	r3, #0
  4022b2:	9311      	str	r3, [sp, #68]	; 0x44
  4022b4:	932d      	str	r3, [sp, #180]	; 0xb4
  4022b6:	932c      	str	r3, [sp, #176]	; 0xb0
  4022b8:	931a      	str	r3, [sp, #104]	; 0x68
  4022ba:	9319      	str	r3, [sp, #100]	; 0x64
  4022bc:	930e      	str	r3, [sp, #56]	; 0x38
  4022be:	4666      	mov	r6, ip
  4022c0:	f899 3000 	ldrb.w	r3, [r9]
  4022c4:	2b00      	cmp	r3, #0
  4022c6:	f000 80f8 	beq.w	4024ba <_svfprintf_r+0x246>
  4022ca:	2b25      	cmp	r3, #37	; 0x25
  4022cc:	f000 80f5 	beq.w	4024ba <_svfprintf_r+0x246>
  4022d0:	f109 0201 	add.w	r2, r9, #1
  4022d4:	e001      	b.n	4022da <_svfprintf_r+0x66>
  4022d6:	2b25      	cmp	r3, #37	; 0x25
  4022d8:	d004      	beq.n	4022e4 <_svfprintf_r+0x70>
  4022da:	4614      	mov	r4, r2
  4022dc:	3201      	adds	r2, #1
  4022de:	7823      	ldrb	r3, [r4, #0]
  4022e0:	2b00      	cmp	r3, #0
  4022e2:	d1f8      	bne.n	4022d6 <_svfprintf_r+0x62>
  4022e4:	ebc9 0504 	rsb	r5, r9, r4
  4022e8:	b17d      	cbz	r5, 40230a <_svfprintf_r+0x96>
  4022ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4022ec:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4022ee:	f8c6 9000 	str.w	r9, [r6]
  4022f2:	3301      	adds	r3, #1
  4022f4:	442a      	add	r2, r5
  4022f6:	2b07      	cmp	r3, #7
  4022f8:	6075      	str	r5, [r6, #4]
  4022fa:	922d      	str	r2, [sp, #180]	; 0xb4
  4022fc:	932c      	str	r3, [sp, #176]	; 0xb0
  4022fe:	f300 80c2 	bgt.w	402486 <_svfprintf_r+0x212>
  402302:	3608      	adds	r6, #8
  402304:	980e      	ldr	r0, [sp, #56]	; 0x38
  402306:	4428      	add	r0, r5
  402308:	900e      	str	r0, [sp, #56]	; 0x38
  40230a:	7823      	ldrb	r3, [r4, #0]
  40230c:	2b00      	cmp	r3, #0
  40230e:	f000 80c2 	beq.w	402496 <_svfprintf_r+0x222>
  402312:	2300      	movs	r3, #0
  402314:	f894 8001 	ldrb.w	r8, [r4, #1]
  402318:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40231c:	461a      	mov	r2, r3
  40231e:	930f      	str	r3, [sp, #60]	; 0x3c
  402320:	9309      	str	r3, [sp, #36]	; 0x24
  402322:	f104 0901 	add.w	r9, r4, #1
  402326:	f04f 34ff 	mov.w	r4, #4294967295
  40232a:	940a      	str	r4, [sp, #40]	; 0x28
  40232c:	f109 0901 	add.w	r9, r9, #1
  402330:	f1a8 0320 	sub.w	r3, r8, #32
  402334:	2b58      	cmp	r3, #88	; 0x58
  402336:	f200 83c7 	bhi.w	402ac8 <_svfprintf_r+0x854>
  40233a:	e8df f013 	tbh	[pc, r3, lsl #1]
  40233e:	026a      	.short	0x026a
  402340:	03c503c5 	.word	0x03c503c5
  402344:	03c50271 	.word	0x03c50271
  402348:	03c503c5 	.word	0x03c503c5
  40234c:	03c503c5 	.word	0x03c503c5
  402350:	031403c5 	.word	0x031403c5
  402354:	03c50364 	.word	0x03c50364
  402358:	00c0009d 	.word	0x00c0009d
  40235c:	027803c5 	.word	0x027803c5
  402360:	027f027f 	.word	0x027f027f
  402364:	027f027f 	.word	0x027f027f
  402368:	027f027f 	.word	0x027f027f
  40236c:	027f027f 	.word	0x027f027f
  402370:	03c5027f 	.word	0x03c5027f
  402374:	03c503c5 	.word	0x03c503c5
  402378:	03c503c5 	.word	0x03c503c5
  40237c:	03c503c5 	.word	0x03c503c5
  402380:	03c503c5 	.word	0x03c503c5
  402384:	029003c5 	.word	0x029003c5
  402388:	03c5036f 	.word	0x03c5036f
  40238c:	03c5036f 	.word	0x03c5036f
  402390:	03c503c5 	.word	0x03c503c5
  402394:	036803c5 	.word	0x036803c5
  402398:	03c503c5 	.word	0x03c503c5
  40239c:	03c50078 	.word	0x03c50078
  4023a0:	03c503c5 	.word	0x03c503c5
  4023a4:	03c503c5 	.word	0x03c503c5
  4023a8:	03c50059 	.word	0x03c50059
  4023ac:	02af03c5 	.word	0x02af03c5
  4023b0:	03c503c5 	.word	0x03c503c5
  4023b4:	03c503c5 	.word	0x03c503c5
  4023b8:	03c503c5 	.word	0x03c503c5
  4023bc:	03c503c5 	.word	0x03c503c5
  4023c0:	03c503c5 	.word	0x03c503c5
  4023c4:	03480337 	.word	0x03480337
  4023c8:	036f036f 	.word	0x036f036f
  4023cc:	02ff036f 	.word	0x02ff036f
  4023d0:	03c50348 	.word	0x03c50348
  4023d4:	030803c5 	.word	0x030803c5
  4023d8:	02c503c5 	.word	0x02c503c5
  4023dc:	0321007c 	.word	0x0321007c
  4023e0:	03c503a5 	.word	0x03c503a5
  4023e4:	03c502d9 	.word	0x03c502d9
  4023e8:	03c5005f 	.word	0x03c5005f
  4023ec:	00de03c5 	.word	0x00de03c5
  4023f0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4023f4:	f04c 0c10 	orr.w	ip, ip, #16
  4023f8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4023fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4023fe:	06a2      	lsls	r2, r4, #26
  402400:	f100 8356 	bmi.w	402ab0 <_svfprintf_r+0x83c>
  402404:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402406:	06e3      	lsls	r3, r4, #27
  402408:	f100 85e0 	bmi.w	402fcc <_svfprintf_r+0xd58>
  40240c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  402410:	f01c 0f40 	tst.w	ip, #64	; 0x40
  402414:	f000 85da 	beq.w	402fcc <_svfprintf_r+0xd58>
  402418:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40241c:	f8bc 4000 	ldrh.w	r4, [ip]
  402420:	f10c 0c04 	add.w	ip, ip, #4
  402424:	2500      	movs	r5, #0
  402426:	2301      	movs	r3, #1
  402428:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40242c:	e08c      	b.n	402548 <_svfprintf_r+0x2d4>
  40242e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402430:	f045 0510 	orr.w	r5, r5, #16
  402434:	9509      	str	r5, [sp, #36]	; 0x24
  402436:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40243a:	f01c 0320 	ands.w	r3, ip, #32
  40243e:	f040 832c 	bne.w	402a9a <_svfprintf_r+0x826>
  402442:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  402446:	f01c 0210 	ands.w	r2, ip, #16
  40244a:	f040 85b8 	bne.w	402fbe <_svfprintf_r+0xd4a>
  40244e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  402452:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  402456:	f000 85b2 	beq.w	402fbe <_svfprintf_r+0xd4a>
  40245a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40245e:	f8bc 4000 	ldrh.w	r4, [ip]
  402462:	f10c 0c04 	add.w	ip, ip, #4
  402466:	4613      	mov	r3, r2
  402468:	2500      	movs	r5, #0
  40246a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40246e:	e06b      	b.n	402548 <_svfprintf_r+0x2d4>
  402470:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402472:	9310      	str	r3, [sp, #64]	; 0x40
  402474:	4264      	negs	r4, r4
  402476:	940f      	str	r4, [sp, #60]	; 0x3c
  402478:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40247a:	f045 0504 	orr.w	r5, r5, #4
  40247e:	9509      	str	r5, [sp, #36]	; 0x24
  402480:	f899 8000 	ldrb.w	r8, [r9]
  402484:	e752      	b.n	40232c <_svfprintf_r+0xb8>
  402486:	980d      	ldr	r0, [sp, #52]	; 0x34
  402488:	990c      	ldr	r1, [sp, #48]	; 0x30
  40248a:	aa2b      	add	r2, sp, #172	; 0xac
  40248c:	f003 fd2c 	bl	405ee8 <__ssprint_r>
  402490:	b940      	cbnz	r0, 4024a4 <_svfprintf_r+0x230>
  402492:	ae38      	add	r6, sp, #224	; 0xe0
  402494:	e736      	b.n	402304 <_svfprintf_r+0x90>
  402496:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402498:	b123      	cbz	r3, 4024a4 <_svfprintf_r+0x230>
  40249a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40249c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40249e:	aa2b      	add	r2, sp, #172	; 0xac
  4024a0:	f003 fd22 	bl	405ee8 <__ssprint_r>
  4024a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4024a6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4024a8:	89a3      	ldrh	r3, [r4, #12]
  4024aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4024ae:	bf18      	it	ne
  4024b0:	f04f 30ff 	movne.w	r0, #4294967295
  4024b4:	b049      	add	sp, #292	; 0x124
  4024b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024ba:	464c      	mov	r4, r9
  4024bc:	e725      	b.n	40230a <_svfprintf_r+0x96>
  4024be:	f899 8000 	ldrb.w	r8, [r9]
  4024c2:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  4024c6:	f109 0001 	add.w	r0, r9, #1
  4024ca:	f001 8118 	beq.w	4036fe <_svfprintf_r+0x148a>
  4024ce:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  4024d2:	2b09      	cmp	r3, #9
  4024d4:	bf98      	it	ls
  4024d6:	2100      	movls	r1, #0
  4024d8:	f201 8077 	bhi.w	4035ca <_svfprintf_r+0x1356>
  4024dc:	f810 8b01 	ldrb.w	r8, [r0], #1
  4024e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4024e4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  4024e8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  4024ec:	2b09      	cmp	r3, #9
  4024ee:	d9f5      	bls.n	4024dc <_svfprintf_r+0x268>
  4024f0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  4024f4:	910a      	str	r1, [sp, #40]	; 0x28
  4024f6:	4681      	mov	r9, r0
  4024f8:	e71a      	b.n	402330 <_svfprintf_r+0xbc>
  4024fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4024fc:	4ca1      	ldr	r4, [pc, #644]	; (402784 <_svfprintf_r+0x510>)
  4024fe:	941a      	str	r4, [sp, #104]	; 0x68
  402500:	06af      	lsls	r7, r5, #26
  402502:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  402506:	f140 81d1 	bpl.w	4028ac <_svfprintf_r+0x638>
  40250a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40250e:	f10c 0307 	add.w	r3, ip, #7
  402512:	f023 0307 	bic.w	r3, r3, #7
  402516:	f103 0408 	add.w	r4, r3, #8
  40251a:	9410      	str	r4, [sp, #64]	; 0x40
  40251c:	e9d3 4500 	ldrd	r4, r5, [r3]
  402520:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  402524:	f01c 0f01 	tst.w	ip, #1
  402528:	f000 8464 	beq.w	402df4 <_svfprintf_r+0xb80>
  40252c:	ea54 0005 	orrs.w	r0, r4, r5
  402530:	f000 8460 	beq.w	402df4 <_svfprintf_r+0xb80>
  402534:	2330      	movs	r3, #48	; 0x30
  402536:	f04c 0c02 	orr.w	ip, ip, #2
  40253a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40253e:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  402542:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  402546:	2302      	movs	r3, #2
  402548:	f04f 0a00 	mov.w	sl, #0
  40254c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  402550:	990a      	ldr	r1, [sp, #40]	; 0x28
  402552:	2900      	cmp	r1, #0
  402554:	db05      	blt.n	402562 <_svfprintf_r+0x2ee>
  402556:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40255a:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40255e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  402562:	ea54 0005 	orrs.w	r0, r4, r5
  402566:	f040 82c7 	bne.w	402af8 <_svfprintf_r+0x884>
  40256a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40256c:	2900      	cmp	r1, #0
  40256e:	f040 82c3 	bne.w	402af8 <_svfprintf_r+0x884>
  402572:	2b00      	cmp	r3, #0
  402574:	f040 843a 	bne.w	402dec <_svfprintf_r+0xb78>
  402578:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40257c:	f01c 0f01 	tst.w	ip, #1
  402580:	f000 8434 	beq.w	402dec <_svfprintf_r+0xb78>
  402584:	af48      	add	r7, sp, #288	; 0x120
  402586:	2330      	movs	r3, #48	; 0x30
  402588:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40258c:	9d08      	ldr	r5, [sp, #32]
  40258e:	1bec      	subs	r4, r5, r7
  402590:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  402594:	2500      	movs	r5, #0
  402596:	4564      	cmp	r4, ip
  402598:	bfa8      	it	ge
  40259a:	46a4      	movge	ip, r4
  40259c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4025a0:	9514      	str	r5, [sp, #80]	; 0x50
  4025a2:	f1ba 0f00 	cmp.w	sl, #0
  4025a6:	d002      	beq.n	4025ae <_svfprintf_r+0x33a>
  4025a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4025aa:	3501      	adds	r5, #1
  4025ac:	950b      	str	r5, [sp, #44]	; 0x2c
  4025ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4025b0:	f013 0302 	ands.w	r3, r3, #2
  4025b4:	9312      	str	r3, [sp, #72]	; 0x48
  4025b6:	d002      	beq.n	4025be <_svfprintf_r+0x34a>
  4025b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4025ba:	3502      	adds	r5, #2
  4025bc:	950b      	str	r5, [sp, #44]	; 0x2c
  4025be:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4025c2:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  4025c6:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  4025ca:	f040 8292 	bne.w	402af2 <_svfprintf_r+0x87e>
  4025ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4025d0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  4025d4:	ebcc 0b05 	rsb	fp, ip, r5
  4025d8:	f1bb 0f00 	cmp.w	fp, #0
  4025dc:	f340 8289 	ble.w	402af2 <_svfprintf_r+0x87e>
  4025e0:	f1bb 0f10 	cmp.w	fp, #16
  4025e4:	992d      	ldr	r1, [sp, #180]	; 0xb4
  4025e6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4025e8:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 40278c <_svfprintf_r+0x518>
  4025ec:	dd2c      	ble.n	402648 <_svfprintf_r+0x3d4>
  4025ee:	971b      	str	r7, [sp, #108]	; 0x6c
  4025f0:	4630      	mov	r0, r6
  4025f2:	4657      	mov	r7, sl
  4025f4:	2510      	movs	r5, #16
  4025f6:	46ca      	mov	sl, r9
  4025f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4025fa:	46a1      	mov	r9, r4
  4025fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4025fe:	e006      	b.n	40260e <_svfprintf_r+0x39a>
  402600:	f1ab 0b10 	sub.w	fp, fp, #16
  402604:	f1bb 0f10 	cmp.w	fp, #16
  402608:	f100 0008 	add.w	r0, r0, #8
  40260c:	dd17      	ble.n	40263e <_svfprintf_r+0x3ca>
  40260e:	3201      	adds	r2, #1
  402610:	3110      	adds	r1, #16
  402612:	2a07      	cmp	r2, #7
  402614:	912d      	str	r1, [sp, #180]	; 0xb4
  402616:	922c      	str	r2, [sp, #176]	; 0xb0
  402618:	6007      	str	r7, [r0, #0]
  40261a:	6045      	str	r5, [r0, #4]
  40261c:	ddf0      	ble.n	402600 <_svfprintf_r+0x38c>
  40261e:	4620      	mov	r0, r4
  402620:	4631      	mov	r1, r6
  402622:	aa2b      	add	r2, sp, #172	; 0xac
  402624:	f003 fc60 	bl	405ee8 <__ssprint_r>
  402628:	2800      	cmp	r0, #0
  40262a:	f47f af3b 	bne.w	4024a4 <_svfprintf_r+0x230>
  40262e:	f1ab 0b10 	sub.w	fp, fp, #16
  402632:	f1bb 0f10 	cmp.w	fp, #16
  402636:	992d      	ldr	r1, [sp, #180]	; 0xb4
  402638:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40263a:	a838      	add	r0, sp, #224	; 0xe0
  40263c:	dce7      	bgt.n	40260e <_svfprintf_r+0x39a>
  40263e:	464c      	mov	r4, r9
  402640:	46d1      	mov	r9, sl
  402642:	46ba      	mov	sl, r7
  402644:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  402646:	4606      	mov	r6, r0
  402648:	3201      	adds	r2, #1
  40264a:	eb0b 0c01 	add.w	ip, fp, r1
  40264e:	2a07      	cmp	r2, #7
  402650:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  402654:	922c      	str	r2, [sp, #176]	; 0xb0
  402656:	e886 0c00 	stmia.w	r6, {sl, fp}
  40265a:	f300 841c 	bgt.w	402e96 <_svfprintf_r+0xc22>
  40265e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  402662:	3608      	adds	r6, #8
  402664:	f1ba 0f00 	cmp.w	sl, #0
  402668:	d00f      	beq.n	40268a <_svfprintf_r+0x416>
  40266a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40266c:	3301      	adds	r3, #1
  40266e:	f10c 0c01 	add.w	ip, ip, #1
  402672:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  402676:	2201      	movs	r2, #1
  402678:	2b07      	cmp	r3, #7
  40267a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40267e:	932c      	str	r3, [sp, #176]	; 0xb0
  402680:	e886 0006 	stmia.w	r6, {r1, r2}
  402684:	f300 839a 	bgt.w	402dbc <_svfprintf_r+0xb48>
  402688:	3608      	adds	r6, #8
  40268a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40268c:	b173      	cbz	r3, 4026ac <_svfprintf_r+0x438>
  40268e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402690:	3301      	adds	r3, #1
  402692:	f10c 0c02 	add.w	ip, ip, #2
  402696:	a924      	add	r1, sp, #144	; 0x90
  402698:	2202      	movs	r2, #2
  40269a:	2b07      	cmp	r3, #7
  40269c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4026a0:	932c      	str	r3, [sp, #176]	; 0xb0
  4026a2:	e886 0006 	stmia.w	r6, {r1, r2}
  4026a6:	f300 8395 	bgt.w	402dd4 <_svfprintf_r+0xb60>
  4026aa:	3608      	adds	r6, #8
  4026ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  4026ae:	2d80      	cmp	r5, #128	; 0x80
  4026b0:	f000 82cc 	beq.w	402c4c <_svfprintf_r+0x9d8>
  4026b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4026b6:	ebc4 0a05 	rsb	sl, r4, r5
  4026ba:	f1ba 0f00 	cmp.w	sl, #0
  4026be:	dd3b      	ble.n	402738 <_svfprintf_r+0x4c4>
  4026c0:	f1ba 0f10 	cmp.w	sl, #16
  4026c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4026c6:	4d30      	ldr	r5, [pc, #192]	; (402788 <_svfprintf_r+0x514>)
  4026c8:	dd2b      	ble.n	402722 <_svfprintf_r+0x4ae>
  4026ca:	940a      	str	r4, [sp, #40]	; 0x28
  4026cc:	4632      	mov	r2, r6
  4026ce:	f04f 0b10 	mov.w	fp, #16
  4026d2:	462e      	mov	r6, r5
  4026d4:	4661      	mov	r1, ip
  4026d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4026d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4026da:	e006      	b.n	4026ea <_svfprintf_r+0x476>
  4026dc:	f1aa 0a10 	sub.w	sl, sl, #16
  4026e0:	f1ba 0f10 	cmp.w	sl, #16
  4026e4:	f102 0208 	add.w	r2, r2, #8
  4026e8:	dd17      	ble.n	40271a <_svfprintf_r+0x4a6>
  4026ea:	3301      	adds	r3, #1
  4026ec:	3110      	adds	r1, #16
  4026ee:	2b07      	cmp	r3, #7
  4026f0:	912d      	str	r1, [sp, #180]	; 0xb4
  4026f2:	932c      	str	r3, [sp, #176]	; 0xb0
  4026f4:	e882 0840 	stmia.w	r2, {r6, fp}
  4026f8:	ddf0      	ble.n	4026dc <_svfprintf_r+0x468>
  4026fa:	4620      	mov	r0, r4
  4026fc:	4629      	mov	r1, r5
  4026fe:	aa2b      	add	r2, sp, #172	; 0xac
  402700:	f003 fbf2 	bl	405ee8 <__ssprint_r>
  402704:	2800      	cmp	r0, #0
  402706:	f47f aecd 	bne.w	4024a4 <_svfprintf_r+0x230>
  40270a:	f1aa 0a10 	sub.w	sl, sl, #16
  40270e:	f1ba 0f10 	cmp.w	sl, #16
  402712:	992d      	ldr	r1, [sp, #180]	; 0xb4
  402714:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402716:	aa38      	add	r2, sp, #224	; 0xe0
  402718:	dce7      	bgt.n	4026ea <_svfprintf_r+0x476>
  40271a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40271c:	4635      	mov	r5, r6
  40271e:	468c      	mov	ip, r1
  402720:	4616      	mov	r6, r2
  402722:	3301      	adds	r3, #1
  402724:	44d4      	add	ip, sl
  402726:	2b07      	cmp	r3, #7
  402728:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40272c:	932c      	str	r3, [sp, #176]	; 0xb0
  40272e:	e886 0420 	stmia.w	r6, {r5, sl}
  402732:	f300 8337 	bgt.w	402da4 <_svfprintf_r+0xb30>
  402736:	3608      	adds	r6, #8
  402738:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40273a:	05ed      	lsls	r5, r5, #23
  40273c:	f100 8226 	bmi.w	402b8c <_svfprintf_r+0x918>
  402740:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402742:	6037      	str	r7, [r6, #0]
  402744:	3301      	adds	r3, #1
  402746:	44a4      	add	ip, r4
  402748:	2b07      	cmp	r3, #7
  40274a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40274e:	6074      	str	r4, [r6, #4]
  402750:	932c      	str	r3, [sp, #176]	; 0xb0
  402752:	f300 8311 	bgt.w	402d78 <_svfprintf_r+0xb04>
  402756:	3608      	adds	r6, #8
  402758:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40275a:	0763      	lsls	r3, r4, #29
  40275c:	d549      	bpl.n	4027f2 <_svfprintf_r+0x57e>
  40275e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402760:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402762:	1a2c      	subs	r4, r5, r0
  402764:	2c00      	cmp	r4, #0
  402766:	dd44      	ble.n	4027f2 <_svfprintf_r+0x57e>
  402768:	2c10      	cmp	r4, #16
  40276a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40276c:	f8df a01c 	ldr.w	sl, [pc, #28]	; 40278c <_svfprintf_r+0x518>
  402770:	dd2b      	ble.n	4027ca <_svfprintf_r+0x556>
  402772:	4657      	mov	r7, sl
  402774:	2510      	movs	r5, #16
  402776:	4662      	mov	r2, ip
  402778:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40277c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402780:	e00b      	b.n	40279a <_svfprintf_r+0x526>
  402782:	bf00      	nop
  402784:	00407a2c 	.word	0x00407a2c
  402788:	004079f8 	.word	0x004079f8
  40278c:	00407a4c 	.word	0x00407a4c
  402790:	3c10      	subs	r4, #16
  402792:	2c10      	cmp	r4, #16
  402794:	f106 0608 	add.w	r6, r6, #8
  402798:	dd15      	ble.n	4027c6 <_svfprintf_r+0x552>
  40279a:	3301      	adds	r3, #1
  40279c:	3210      	adds	r2, #16
  40279e:	2b07      	cmp	r3, #7
  4027a0:	922d      	str	r2, [sp, #180]	; 0xb4
  4027a2:	932c      	str	r3, [sp, #176]	; 0xb0
  4027a4:	6037      	str	r7, [r6, #0]
  4027a6:	6075      	str	r5, [r6, #4]
  4027a8:	ddf2      	ble.n	402790 <_svfprintf_r+0x51c>
  4027aa:	4650      	mov	r0, sl
  4027ac:	4641      	mov	r1, r8
  4027ae:	aa2b      	add	r2, sp, #172	; 0xac
  4027b0:	f003 fb9a 	bl	405ee8 <__ssprint_r>
  4027b4:	2800      	cmp	r0, #0
  4027b6:	f47f ae75 	bne.w	4024a4 <_svfprintf_r+0x230>
  4027ba:	3c10      	subs	r4, #16
  4027bc:	2c10      	cmp	r4, #16
  4027be:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4027c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4027c2:	ae38      	add	r6, sp, #224	; 0xe0
  4027c4:	dce9      	bgt.n	40279a <_svfprintf_r+0x526>
  4027c6:	4694      	mov	ip, r2
  4027c8:	46ba      	mov	sl, r7
  4027ca:	3301      	adds	r3, #1
  4027cc:	44a4      	add	ip, r4
  4027ce:	2b07      	cmp	r3, #7
  4027d0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4027d4:	932c      	str	r3, [sp, #176]	; 0xb0
  4027d6:	f8c6 a000 	str.w	sl, [r6]
  4027da:	6074      	str	r4, [r6, #4]
  4027dc:	dd09      	ble.n	4027f2 <_svfprintf_r+0x57e>
  4027de:	980d      	ldr	r0, [sp, #52]	; 0x34
  4027e0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4027e2:	aa2b      	add	r2, sp, #172	; 0xac
  4027e4:	f003 fb80 	bl	405ee8 <__ssprint_r>
  4027e8:	2800      	cmp	r0, #0
  4027ea:	f47f ae5b 	bne.w	4024a4 <_svfprintf_r+0x230>
  4027ee:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4027f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4027f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4027f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4027f8:	42a8      	cmp	r0, r5
  4027fa:	bfac      	ite	ge
  4027fc:	1824      	addge	r4, r4, r0
  4027fe:	1964      	addlt	r4, r4, r5
  402800:	940e      	str	r4, [sp, #56]	; 0x38
  402802:	f1bc 0f00 	cmp.w	ip, #0
  402806:	f040 82c3 	bne.w	402d90 <_svfprintf_r+0xb1c>
  40280a:	2300      	movs	r3, #0
  40280c:	932c      	str	r3, [sp, #176]	; 0xb0
  40280e:	ae38      	add	r6, sp, #224	; 0xe0
  402810:	e556      	b.n	4022c0 <_svfprintf_r+0x4c>
  402812:	f899 8000 	ldrb.w	r8, [r9]
  402816:	2a00      	cmp	r2, #0
  402818:	f47f ad88 	bne.w	40232c <_svfprintf_r+0xb8>
  40281c:	2220      	movs	r2, #32
  40281e:	e585      	b.n	40232c <_svfprintf_r+0xb8>
  402820:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402822:	f045 0501 	orr.w	r5, r5, #1
  402826:	9509      	str	r5, [sp, #36]	; 0x24
  402828:	f899 8000 	ldrb.w	r8, [r9]
  40282c:	e57e      	b.n	40232c <_svfprintf_r+0xb8>
  40282e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402830:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  402834:	9509      	str	r5, [sp, #36]	; 0x24
  402836:	f899 8000 	ldrb.w	r8, [r9]
  40283a:	e577      	b.n	40232c <_svfprintf_r+0xb8>
  40283c:	2400      	movs	r4, #0
  40283e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  402842:	940f      	str	r4, [sp, #60]	; 0x3c
  402844:	4621      	mov	r1, r4
  402846:	f819 8b01 	ldrb.w	r8, [r9], #1
  40284a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40284e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  402852:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  402856:	2b09      	cmp	r3, #9
  402858:	d9f5      	bls.n	402846 <_svfprintf_r+0x5d2>
  40285a:	910f      	str	r1, [sp, #60]	; 0x3c
  40285c:	e568      	b.n	402330 <_svfprintf_r+0xbc>
  40285e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  402862:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  402866:	f04c 0c10 	orr.w	ip, ip, #16
  40286a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40286e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402870:	06a3      	lsls	r3, r4, #26
  402872:	f140 80b2 	bpl.w	4029da <_svfprintf_r+0x766>
  402876:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402878:	1de9      	adds	r1, r5, #7
  40287a:	f021 0107 	bic.w	r1, r1, #7
  40287e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402882:	3108      	adds	r1, #8
  402884:	9110      	str	r1, [sp, #64]	; 0x40
  402886:	4614      	mov	r4, r2
  402888:	461d      	mov	r5, r3
  40288a:	2a00      	cmp	r2, #0
  40288c:	f173 0000 	sbcs.w	r0, r3, #0
  402890:	f2c0 838b 	blt.w	402faa <_svfprintf_r+0xd36>
  402894:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  402898:	2301      	movs	r3, #1
  40289a:	e659      	b.n	402550 <_svfprintf_r+0x2dc>
  40289c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40289e:	4cb7      	ldr	r4, [pc, #732]	; (402b7c <_svfprintf_r+0x908>)
  4028a0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4028a4:	06af      	lsls	r7, r5, #26
  4028a6:	941a      	str	r4, [sp, #104]	; 0x68
  4028a8:	f53f ae2f 	bmi.w	40250a <_svfprintf_r+0x296>
  4028ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4028ae:	06ed      	lsls	r5, r5, #27
  4028b0:	f140 845d 	bpl.w	40316e <_svfprintf_r+0xefa>
  4028b4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4028b8:	f8dc 4000 	ldr.w	r4, [ip]
  4028bc:	f10c 0c04 	add.w	ip, ip, #4
  4028c0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4028c4:	2500      	movs	r5, #0
  4028c6:	e62b      	b.n	402520 <_svfprintf_r+0x2ac>
  4028c8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4028cc:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4028d0:	f01c 0f20 	tst.w	ip, #32
  4028d4:	f000 843d 	beq.w	403152 <_svfprintf_r+0xede>
  4028d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4028da:	6821      	ldr	r1, [r4, #0]
  4028dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4028de:	17e5      	asrs	r5, r4, #31
  4028e0:	462b      	mov	r3, r5
  4028e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4028e4:	4622      	mov	r2, r4
  4028e6:	3504      	adds	r5, #4
  4028e8:	9510      	str	r5, [sp, #64]	; 0x40
  4028ea:	e9c1 2300 	strd	r2, r3, [r1]
  4028ee:	e4e7      	b.n	4022c0 <_svfprintf_r+0x4c>
  4028f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4028f2:	6827      	ldr	r7, [r4, #0]
  4028f4:	f04f 0a00 	mov.w	sl, #0
  4028f8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4028fc:	1d25      	adds	r5, r4, #4
  4028fe:	2f00      	cmp	r7, #0
  402900:	f000 85f5 	beq.w	4034ee <_svfprintf_r+0x127a>
  402904:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402906:	2c00      	cmp	r4, #0
  402908:	4638      	mov	r0, r7
  40290a:	f2c0 85a7 	blt.w	40345c <_svfprintf_r+0x11e8>
  40290e:	4651      	mov	r1, sl
  402910:	4622      	mov	r2, r4
  402912:	f002 fc37 	bl	405184 <memchr>
  402916:	2800      	cmp	r0, #0
  402918:	f000 861f 	beq.w	40355a <_svfprintf_r+0x12e6>
  40291c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40291e:	9510      	str	r5, [sp, #64]	; 0x40
  402920:	1bc0      	subs	r0, r0, r7
  402922:	42a0      	cmp	r0, r4
  402924:	bfb8      	it	lt
  402926:	4604      	movlt	r4, r0
  402928:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  40292c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  402930:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  402934:	950b      	str	r5, [sp, #44]	; 0x2c
  402936:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40293a:	e632      	b.n	4025a2 <_svfprintf_r+0x32e>
  40293c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  402940:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  402944:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  402948:	f899 8000 	ldrb.w	r8, [r9]
  40294c:	e4ee      	b.n	40232c <_svfprintf_r+0xb8>
  40294e:	f899 8000 	ldrb.w	r8, [r9]
  402952:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  402956:	464b      	mov	r3, r9
  402958:	f000 848b 	beq.w	403272 <_svfprintf_r+0xffe>
  40295c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40295e:	f045 0510 	orr.w	r5, r5, #16
  402962:	9509      	str	r5, [sp, #36]	; 0x24
  402964:	e4e2      	b.n	40232c <_svfprintf_r+0xb8>
  402966:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402968:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40296a:	6824      	ldr	r4, [r4, #0]
  40296c:	940f      	str	r4, [sp, #60]	; 0x3c
  40296e:	2c00      	cmp	r4, #0
  402970:	f105 0304 	add.w	r3, r5, #4
  402974:	f6ff ad7c 	blt.w	402470 <_svfprintf_r+0x1fc>
  402978:	9310      	str	r3, [sp, #64]	; 0x40
  40297a:	f899 8000 	ldrb.w	r8, [r9]
  40297e:	e4d5      	b.n	40232c <_svfprintf_r+0xb8>
  402980:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402982:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  402986:	487e      	ldr	r0, [pc, #504]	; (402b80 <_svfprintf_r+0x90c>)
  402988:	6814      	ldr	r4, [r2, #0]
  40298a:	901a      	str	r0, [sp, #104]	; 0x68
  40298c:	2330      	movs	r3, #48	; 0x30
  40298e:	1d15      	adds	r5, r2, #4
  402990:	f04f 0878 	mov.w	r8, #120	; 0x78
  402994:	f04c 0c02 	orr.w	ip, ip, #2
  402998:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40299c:	9510      	str	r5, [sp, #64]	; 0x40
  40299e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4029a2:	2500      	movs	r5, #0
  4029a4:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  4029a8:	2302      	movs	r3, #2
  4029aa:	e5cd      	b.n	402548 <_svfprintf_r+0x2d4>
  4029ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4029ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4029b0:	6812      	ldr	r2, [r2, #0]
  4029b2:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  4029b6:	2300      	movs	r3, #0
  4029b8:	2401      	movs	r4, #1
  4029ba:	3504      	adds	r5, #4
  4029bc:	469a      	mov	sl, r3
  4029be:	940b      	str	r4, [sp, #44]	; 0x2c
  4029c0:	9510      	str	r5, [sp, #64]	; 0x40
  4029c2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  4029c6:	930a      	str	r3, [sp, #40]	; 0x28
  4029c8:	9314      	str	r3, [sp, #80]	; 0x50
  4029ca:	af2e      	add	r7, sp, #184	; 0xb8
  4029cc:	e5ef      	b.n	4025ae <_svfprintf_r+0x33a>
  4029ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4029d0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4029d4:	06a3      	lsls	r3, r4, #26
  4029d6:	f53f af4e 	bmi.w	402876 <_svfprintf_r+0x602>
  4029da:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4029de:	f01c 0f10 	tst.w	ip, #16
  4029e2:	f040 82d2 	bne.w	402f8a <_svfprintf_r+0xd16>
  4029e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4029e8:	0667      	lsls	r7, r4, #25
  4029ea:	f140 82ce 	bpl.w	402f8a <_svfprintf_r+0xd16>
  4029ee:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4029f2:	f9bc 4000 	ldrsh.w	r4, [ip]
  4029f6:	f10c 0c04 	add.w	ip, ip, #4
  4029fa:	17e5      	asrs	r5, r4, #31
  4029fc:	4622      	mov	r2, r4
  4029fe:	462b      	mov	r3, r5
  402a00:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  402a04:	e741      	b.n	40288a <_svfprintf_r+0x616>
  402a06:	f899 8000 	ldrb.w	r8, [r9]
  402a0a:	222b      	movs	r2, #43	; 0x2b
  402a0c:	e48e      	b.n	40232c <_svfprintf_r+0xb8>
  402a0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402a10:	f045 0508 	orr.w	r5, r5, #8
  402a14:	9509      	str	r5, [sp, #36]	; 0x24
  402a16:	f899 8000 	ldrb.w	r8, [r9]
  402a1a:	e487      	b.n	40232c <_svfprintf_r+0xb8>
  402a1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402a1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402a20:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  402a24:	1deb      	adds	r3, r5, #7
  402a26:	0725      	lsls	r5, r4, #28
  402a28:	f023 0307 	bic.w	r3, r3, #7
  402a2c:	f140 838a 	bpl.w	403144 <_svfprintf_r+0xed0>
  402a30:	e9d3 4500 	ldrd	r4, r5, [r3]
  402a34:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  402a38:	f103 0c08 	add.w	ip, r3, #8
  402a3c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  402a40:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  402a44:	f003 f9d4 	bl	405df0 <__fpclassifyd>
  402a48:	2801      	cmp	r0, #1
  402a4a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  402a4e:	f040 835f 	bne.w	403110 <_svfprintf_r+0xe9c>
  402a52:	2200      	movs	r2, #0
  402a54:	2300      	movs	r3, #0
  402a56:	f003 fc41 	bl	4062dc <__aeabi_dcmplt>
  402a5a:	2800      	cmp	r0, #0
  402a5c:	f040 856d 	bne.w	40353a <_svfprintf_r+0x12c6>
  402a60:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  402a64:	2503      	movs	r5, #3
  402a66:	950b      	str	r5, [sp, #44]	; 0x2c
  402a68:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402a6a:	4f46      	ldr	r7, [pc, #280]	; (402b84 <_svfprintf_r+0x910>)
  402a6c:	4b46      	ldr	r3, [pc, #280]	; (402b88 <_svfprintf_r+0x914>)
  402a6e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  402a72:	2400      	movs	r4, #0
  402a74:	9509      	str	r5, [sp, #36]	; 0x24
  402a76:	2500      	movs	r5, #0
  402a78:	940a      	str	r4, [sp, #40]	; 0x28
  402a7a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  402a7e:	bfd8      	it	le
  402a80:	461f      	movle	r7, r3
  402a82:	2403      	movs	r4, #3
  402a84:	9514      	str	r5, [sp, #80]	; 0x50
  402a86:	e58c      	b.n	4025a2 <_svfprintf_r+0x32e>
  402a88:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  402a8c:	f04c 0c20 	orr.w	ip, ip, #32
  402a90:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  402a94:	f899 8000 	ldrb.w	r8, [r9]
  402a98:	e448      	b.n	40232c <_svfprintf_r+0xb8>
  402a9a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402a9c:	1de3      	adds	r3, r4, #7
  402a9e:	f023 0307 	bic.w	r3, r3, #7
  402aa2:	f103 0508 	add.w	r5, r3, #8
  402aa6:	9510      	str	r5, [sp, #64]	; 0x40
  402aa8:	e9d3 4500 	ldrd	r4, r5, [r3]
  402aac:	2300      	movs	r3, #0
  402aae:	e54b      	b.n	402548 <_svfprintf_r+0x2d4>
  402ab0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402ab2:	1deb      	adds	r3, r5, #7
  402ab4:	f023 0307 	bic.w	r3, r3, #7
  402ab8:	f103 0c08 	add.w	ip, r3, #8
  402abc:	e9d3 4500 	ldrd	r4, r5, [r3]
  402ac0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  402ac4:	2301      	movs	r3, #1
  402ac6:	e53f      	b.n	402548 <_svfprintf_r+0x2d4>
  402ac8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  402acc:	f1b8 0f00 	cmp.w	r8, #0
  402ad0:	f43f ace1 	beq.w	402496 <_svfprintf_r+0x222>
  402ad4:	2300      	movs	r3, #0
  402ad6:	f04f 0c01 	mov.w	ip, #1
  402ada:	469a      	mov	sl, r3
  402adc:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  402ae0:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  402ae4:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  402ae8:	930a      	str	r3, [sp, #40]	; 0x28
  402aea:	9314      	str	r3, [sp, #80]	; 0x50
  402aec:	4664      	mov	r4, ip
  402aee:	af2e      	add	r7, sp, #184	; 0xb8
  402af0:	e55d      	b.n	4025ae <_svfprintf_r+0x33a>
  402af2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  402af6:	e5b5      	b.n	402664 <_svfprintf_r+0x3f0>
  402af8:	2b01      	cmp	r3, #1
  402afa:	f000 80ec 	beq.w	402cd6 <_svfprintf_r+0xa62>
  402afe:	2b02      	cmp	r3, #2
  402b00:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  402b04:	d118      	bne.n	402b38 <_svfprintf_r+0x8c4>
  402b06:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  402b0a:	4619      	mov	r1, r3
  402b0c:	f004 000f 	and.w	r0, r4, #15
  402b10:	0922      	lsrs	r2, r4, #4
  402b12:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  402b16:	460f      	mov	r7, r1
  402b18:	092b      	lsrs	r3, r5, #4
  402b1a:	f81c 1000 	ldrb.w	r1, [ip, r0]
  402b1e:	7039      	strb	r1, [r7, #0]
  402b20:	ea52 0003 	orrs.w	r0, r2, r3
  402b24:	4614      	mov	r4, r2
  402b26:	461d      	mov	r5, r3
  402b28:	f107 31ff 	add.w	r1, r7, #4294967295
  402b2c:	d1ee      	bne.n	402b0c <_svfprintf_r+0x898>
  402b2e:	9d08      	ldr	r5, [sp, #32]
  402b30:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  402b34:	1bec      	subs	r4, r5, r7
  402b36:	e52b      	b.n	402590 <_svfprintf_r+0x31c>
  402b38:	08e0      	lsrs	r0, r4, #3
  402b3a:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  402b3e:	f004 0207 	and.w	r2, r4, #7
  402b42:	08e9      	lsrs	r1, r5, #3
  402b44:	3230      	adds	r2, #48	; 0x30
  402b46:	ea50 0c01 	orrs.w	ip, r0, r1
  402b4a:	461f      	mov	r7, r3
  402b4c:	701a      	strb	r2, [r3, #0]
  402b4e:	4604      	mov	r4, r0
  402b50:	460d      	mov	r5, r1
  402b52:	f103 33ff 	add.w	r3, r3, #4294967295
  402b56:	d1ef      	bne.n	402b38 <_svfprintf_r+0x8c4>
  402b58:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402b5a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  402b5e:	07e0      	lsls	r0, r4, #31
  402b60:	4639      	mov	r1, r7
  402b62:	f140 80c1 	bpl.w	402ce8 <_svfprintf_r+0xa74>
  402b66:	2a30      	cmp	r2, #48	; 0x30
  402b68:	f000 80be 	beq.w	402ce8 <_svfprintf_r+0xa74>
  402b6c:	9d08      	ldr	r5, [sp, #32]
  402b6e:	461f      	mov	r7, r3
  402b70:	2330      	movs	r3, #48	; 0x30
  402b72:	1bec      	subs	r4, r5, r7
  402b74:	f801 3c01 	strb.w	r3, [r1, #-1]
  402b78:	e50a      	b.n	402590 <_svfprintf_r+0x31c>
  402b7a:	bf00      	nop
  402b7c:	00407a18 	.word	0x00407a18
  402b80:	00407a2c 	.word	0x00407a2c
  402b84:	00407a0c 	.word	0x00407a0c
  402b88:	00407a08 	.word	0x00407a08
  402b8c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402b90:	f340 80ad 	ble.w	402cee <_svfprintf_r+0xa7a>
  402b94:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  402b98:	2200      	movs	r2, #0
  402b9a:	2300      	movs	r3, #0
  402b9c:	f8cd c01c 	str.w	ip, [sp, #28]
  402ba0:	f003 fb92 	bl	4062c8 <__aeabi_dcmpeq>
  402ba4:	f8dd c01c 	ldr.w	ip, [sp, #28]
  402ba8:	2800      	cmp	r0, #0
  402baa:	f000 8126 	beq.w	402dfa <_svfprintf_r+0xb86>
  402bae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402bb0:	4aaa      	ldr	r2, [pc, #680]	; (402e5c <_svfprintf_r+0xbe8>)
  402bb2:	6032      	str	r2, [r6, #0]
  402bb4:	3301      	adds	r3, #1
  402bb6:	f10c 0c01 	add.w	ip, ip, #1
  402bba:	2201      	movs	r2, #1
  402bbc:	2b07      	cmp	r3, #7
  402bbe:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  402bc2:	932c      	str	r3, [sp, #176]	; 0xb0
  402bc4:	6072      	str	r2, [r6, #4]
  402bc6:	f300 82f7 	bgt.w	4031b8 <_svfprintf_r+0xf44>
  402bca:	3608      	adds	r6, #8
  402bcc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402bce:	9c11      	ldr	r4, [sp, #68]	; 0x44
  402bd0:	42a3      	cmp	r3, r4
  402bd2:	db03      	blt.n	402bdc <_svfprintf_r+0x968>
  402bd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402bd6:	07ec      	lsls	r4, r5, #31
  402bd8:	f57f adbe 	bpl.w	402758 <_svfprintf_r+0x4e4>
  402bdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402bde:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402be0:	9c15      	ldr	r4, [sp, #84]	; 0x54
  402be2:	6034      	str	r4, [r6, #0]
  402be4:	3301      	adds	r3, #1
  402be6:	44ac      	add	ip, r5
  402be8:	2b07      	cmp	r3, #7
  402bea:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  402bee:	6075      	str	r5, [r6, #4]
  402bf0:	932c      	str	r3, [sp, #176]	; 0xb0
  402bf2:	f300 8348 	bgt.w	403286 <_svfprintf_r+0x1012>
  402bf6:	3608      	adds	r6, #8
  402bf8:	9d11      	ldr	r5, [sp, #68]	; 0x44
  402bfa:	1e6c      	subs	r4, r5, #1
  402bfc:	2c00      	cmp	r4, #0
  402bfe:	f77f adab 	ble.w	402758 <_svfprintf_r+0x4e4>
  402c02:	2c10      	cmp	r4, #16
  402c04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402c06:	4d96      	ldr	r5, [pc, #600]	; (402e60 <_svfprintf_r+0xbec>)
  402c08:	f340 8197 	ble.w	402f3a <_svfprintf_r+0xcc6>
  402c0c:	2710      	movs	r7, #16
  402c0e:	4662      	mov	r2, ip
  402c10:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  402c14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  402c18:	e004      	b.n	402c24 <_svfprintf_r+0x9b0>
  402c1a:	3608      	adds	r6, #8
  402c1c:	3c10      	subs	r4, #16
  402c1e:	2c10      	cmp	r4, #16
  402c20:	f340 818a 	ble.w	402f38 <_svfprintf_r+0xcc4>
  402c24:	3301      	adds	r3, #1
  402c26:	3210      	adds	r2, #16
  402c28:	2b07      	cmp	r3, #7
  402c2a:	922d      	str	r2, [sp, #180]	; 0xb4
  402c2c:	932c      	str	r3, [sp, #176]	; 0xb0
  402c2e:	e886 00a0 	stmia.w	r6, {r5, r7}
  402c32:	ddf2      	ble.n	402c1a <_svfprintf_r+0x9a6>
  402c34:	4640      	mov	r0, r8
  402c36:	4651      	mov	r1, sl
  402c38:	aa2b      	add	r2, sp, #172	; 0xac
  402c3a:	f003 f955 	bl	405ee8 <__ssprint_r>
  402c3e:	2800      	cmp	r0, #0
  402c40:	f47f ac30 	bne.w	4024a4 <_svfprintf_r+0x230>
  402c44:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  402c46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402c48:	ae38      	add	r6, sp, #224	; 0xe0
  402c4a:	e7e7      	b.n	402c1c <_svfprintf_r+0x9a8>
  402c4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402c4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402c50:	ebc0 0a05 	rsb	sl, r0, r5
  402c54:	f1ba 0f00 	cmp.w	sl, #0
  402c58:	f77f ad2c 	ble.w	4026b4 <_svfprintf_r+0x440>
  402c5c:	f1ba 0f10 	cmp.w	sl, #16
  402c60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402c62:	4d7f      	ldr	r5, [pc, #508]	; (402e60 <_svfprintf_r+0xbec>)
  402c64:	dd2b      	ble.n	402cbe <_svfprintf_r+0xa4a>
  402c66:	9412      	str	r4, [sp, #72]	; 0x48
  402c68:	4632      	mov	r2, r6
  402c6a:	f04f 0b10 	mov.w	fp, #16
  402c6e:	462e      	mov	r6, r5
  402c70:	4661      	mov	r1, ip
  402c72:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  402c74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402c76:	e006      	b.n	402c86 <_svfprintf_r+0xa12>
  402c78:	f1aa 0a10 	sub.w	sl, sl, #16
  402c7c:	f1ba 0f10 	cmp.w	sl, #16
  402c80:	f102 0208 	add.w	r2, r2, #8
  402c84:	dd17      	ble.n	402cb6 <_svfprintf_r+0xa42>
  402c86:	3301      	adds	r3, #1
  402c88:	3110      	adds	r1, #16
  402c8a:	2b07      	cmp	r3, #7
  402c8c:	912d      	str	r1, [sp, #180]	; 0xb4
  402c8e:	932c      	str	r3, [sp, #176]	; 0xb0
  402c90:	e882 0840 	stmia.w	r2, {r6, fp}
  402c94:	ddf0      	ble.n	402c78 <_svfprintf_r+0xa04>
  402c96:	4620      	mov	r0, r4
  402c98:	4629      	mov	r1, r5
  402c9a:	aa2b      	add	r2, sp, #172	; 0xac
  402c9c:	f003 f924 	bl	405ee8 <__ssprint_r>
  402ca0:	2800      	cmp	r0, #0
  402ca2:	f47f abff 	bne.w	4024a4 <_svfprintf_r+0x230>
  402ca6:	f1aa 0a10 	sub.w	sl, sl, #16
  402caa:	f1ba 0f10 	cmp.w	sl, #16
  402cae:	992d      	ldr	r1, [sp, #180]	; 0xb4
  402cb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402cb2:	aa38      	add	r2, sp, #224	; 0xe0
  402cb4:	dce7      	bgt.n	402c86 <_svfprintf_r+0xa12>
  402cb6:	9c12      	ldr	r4, [sp, #72]	; 0x48
  402cb8:	4635      	mov	r5, r6
  402cba:	468c      	mov	ip, r1
  402cbc:	4616      	mov	r6, r2
  402cbe:	3301      	adds	r3, #1
  402cc0:	44d4      	add	ip, sl
  402cc2:	2b07      	cmp	r3, #7
  402cc4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  402cc8:	932c      	str	r3, [sp, #176]	; 0xb0
  402cca:	e886 0420 	stmia.w	r6, {r5, sl}
  402cce:	f300 8212 	bgt.w	4030f6 <_svfprintf_r+0xe82>
  402cd2:	3608      	adds	r6, #8
  402cd4:	e4ee      	b.n	4026b4 <_svfprintf_r+0x440>
  402cd6:	2d00      	cmp	r5, #0
  402cd8:	bf08      	it	eq
  402cda:	2c0a      	cmpeq	r4, #10
  402cdc:	f080 8138 	bcs.w	402f50 <_svfprintf_r+0xcdc>
  402ce0:	af48      	add	r7, sp, #288	; 0x120
  402ce2:	3430      	adds	r4, #48	; 0x30
  402ce4:	f807 4d41 	strb.w	r4, [r7, #-65]!
  402ce8:	9d08      	ldr	r5, [sp, #32]
  402cea:	1bec      	subs	r4, r5, r7
  402cec:	e450      	b.n	402590 <_svfprintf_r+0x31c>
  402cee:	9c11      	ldr	r4, [sp, #68]	; 0x44
  402cf0:	2c01      	cmp	r4, #1
  402cf2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  402cf4:	f340 81d5 	ble.w	4030a2 <_svfprintf_r+0xe2e>
  402cf8:	3401      	adds	r4, #1
  402cfa:	f10c 0301 	add.w	r3, ip, #1
  402cfe:	2201      	movs	r2, #1
  402d00:	2c07      	cmp	r4, #7
  402d02:	6037      	str	r7, [r6, #0]
  402d04:	932d      	str	r3, [sp, #180]	; 0xb4
  402d06:	942c      	str	r4, [sp, #176]	; 0xb0
  402d08:	6072      	str	r2, [r6, #4]
  402d0a:	f300 81db 	bgt.w	4030c4 <_svfprintf_r+0xe50>
  402d0e:	3608      	adds	r6, #8
  402d10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  402d14:	9d15      	ldr	r5, [sp, #84]	; 0x54
  402d16:	6035      	str	r5, [r6, #0]
  402d18:	3401      	adds	r4, #1
  402d1a:	4498      	add	r8, r3
  402d1c:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402d1e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  402d22:	2c07      	cmp	r4, #7
  402d24:	942c      	str	r4, [sp, #176]	; 0xb0
  402d26:	6075      	str	r5, [r6, #4]
  402d28:	f300 81d8 	bgt.w	4030dc <_svfprintf_r+0xe68>
  402d2c:	3608      	adds	r6, #8
  402d2e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  402d32:	2200      	movs	r2, #0
  402d34:	2300      	movs	r3, #0
  402d36:	f003 fac7 	bl	4062c8 <__aeabi_dcmpeq>
  402d3a:	9d11      	ldr	r5, [sp, #68]	; 0x44
  402d3c:	2800      	cmp	r0, #0
  402d3e:	f040 80b9 	bne.w	402eb4 <_svfprintf_r+0xc40>
  402d42:	1e6b      	subs	r3, r5, #1
  402d44:	3401      	adds	r4, #1
  402d46:	3701      	adds	r7, #1
  402d48:	4498      	add	r8, r3
  402d4a:	2c07      	cmp	r4, #7
  402d4c:	942c      	str	r4, [sp, #176]	; 0xb0
  402d4e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  402d52:	6037      	str	r7, [r6, #0]
  402d54:	6073      	str	r3, [r6, #4]
  402d56:	f300 80e2 	bgt.w	402f1e <_svfprintf_r+0xcaa>
  402d5a:	3608      	adds	r6, #8
  402d5c:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  402d60:	9d19      	ldr	r5, [sp, #100]	; 0x64
  402d62:	3401      	adds	r4, #1
  402d64:	44c4      	add	ip, r8
  402d66:	ab27      	add	r3, sp, #156	; 0x9c
  402d68:	2c07      	cmp	r4, #7
  402d6a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  402d6e:	942c      	str	r4, [sp, #176]	; 0xb0
  402d70:	e886 0028 	stmia.w	r6, {r3, r5}
  402d74:	f77f acef 	ble.w	402756 <_svfprintf_r+0x4e2>
  402d78:	980d      	ldr	r0, [sp, #52]	; 0x34
  402d7a:	990c      	ldr	r1, [sp, #48]	; 0x30
  402d7c:	aa2b      	add	r2, sp, #172	; 0xac
  402d7e:	f003 f8b3 	bl	405ee8 <__ssprint_r>
  402d82:	2800      	cmp	r0, #0
  402d84:	f47f ab8e 	bne.w	4024a4 <_svfprintf_r+0x230>
  402d88:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  402d8c:	ae38      	add	r6, sp, #224	; 0xe0
  402d8e:	e4e3      	b.n	402758 <_svfprintf_r+0x4e4>
  402d90:	980d      	ldr	r0, [sp, #52]	; 0x34
  402d92:	990c      	ldr	r1, [sp, #48]	; 0x30
  402d94:	aa2b      	add	r2, sp, #172	; 0xac
  402d96:	f003 f8a7 	bl	405ee8 <__ssprint_r>
  402d9a:	2800      	cmp	r0, #0
  402d9c:	f43f ad35 	beq.w	40280a <_svfprintf_r+0x596>
  402da0:	f7ff bb80 	b.w	4024a4 <_svfprintf_r+0x230>
  402da4:	980d      	ldr	r0, [sp, #52]	; 0x34
  402da6:	990c      	ldr	r1, [sp, #48]	; 0x30
  402da8:	aa2b      	add	r2, sp, #172	; 0xac
  402daa:	f003 f89d 	bl	405ee8 <__ssprint_r>
  402dae:	2800      	cmp	r0, #0
  402db0:	f47f ab78 	bne.w	4024a4 <_svfprintf_r+0x230>
  402db4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  402db8:	ae38      	add	r6, sp, #224	; 0xe0
  402dba:	e4bd      	b.n	402738 <_svfprintf_r+0x4c4>
  402dbc:	980d      	ldr	r0, [sp, #52]	; 0x34
  402dbe:	990c      	ldr	r1, [sp, #48]	; 0x30
  402dc0:	aa2b      	add	r2, sp, #172	; 0xac
  402dc2:	f003 f891 	bl	405ee8 <__ssprint_r>
  402dc6:	2800      	cmp	r0, #0
  402dc8:	f47f ab6c 	bne.w	4024a4 <_svfprintf_r+0x230>
  402dcc:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  402dd0:	ae38      	add	r6, sp, #224	; 0xe0
  402dd2:	e45a      	b.n	40268a <_svfprintf_r+0x416>
  402dd4:	980d      	ldr	r0, [sp, #52]	; 0x34
  402dd6:	990c      	ldr	r1, [sp, #48]	; 0x30
  402dd8:	aa2b      	add	r2, sp, #172	; 0xac
  402dda:	f003 f885 	bl	405ee8 <__ssprint_r>
  402dde:	2800      	cmp	r0, #0
  402de0:	f47f ab60 	bne.w	4024a4 <_svfprintf_r+0x230>
  402de4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  402de8:	ae38      	add	r6, sp, #224	; 0xe0
  402dea:	e45f      	b.n	4026ac <_svfprintf_r+0x438>
  402dec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402dee:	af38      	add	r7, sp, #224	; 0xe0
  402df0:	f7ff bbce 	b.w	402590 <_svfprintf_r+0x31c>
  402df4:	2302      	movs	r3, #2
  402df6:	f7ff bba7 	b.w	402548 <_svfprintf_r+0x2d4>
  402dfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402dfc:	2b00      	cmp	r3, #0
  402dfe:	f340 81e7 	ble.w	4031d0 <_svfprintf_r+0xf5c>
  402e02:	9c11      	ldr	r4, [sp, #68]	; 0x44
  402e04:	9d14      	ldr	r5, [sp, #80]	; 0x50
  402e06:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  402e0a:	42ac      	cmp	r4, r5
  402e0c:	bfa8      	it	ge
  402e0e:	462c      	movge	r4, r5
  402e10:	2c00      	cmp	r4, #0
  402e12:	44ba      	add	sl, r7
  402e14:	dd0b      	ble.n	402e2e <_svfprintf_r+0xbba>
  402e16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402e18:	6037      	str	r7, [r6, #0]
  402e1a:	3301      	adds	r3, #1
  402e1c:	44a4      	add	ip, r4
  402e1e:	2b07      	cmp	r3, #7
  402e20:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  402e24:	6074      	str	r4, [r6, #4]
  402e26:	932c      	str	r3, [sp, #176]	; 0xb0
  402e28:	f300 8328 	bgt.w	40347c <_svfprintf_r+0x1208>
  402e2c:	3608      	adds	r6, #8
  402e2e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  402e30:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  402e34:	1b2c      	subs	r4, r5, r4
  402e36:	2c00      	cmp	r4, #0
  402e38:	f340 80db 	ble.w	402ff2 <_svfprintf_r+0xd7e>
  402e3c:	2c10      	cmp	r4, #16
  402e3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402e40:	4d07      	ldr	r5, [pc, #28]	; (402e60 <_svfprintf_r+0xbec>)
  402e42:	f340 81ad 	ble.w	4031a0 <_svfprintf_r+0xf2c>
  402e46:	970a      	str	r7, [sp, #40]	; 0x28
  402e48:	f04f 0810 	mov.w	r8, #16
  402e4c:	462f      	mov	r7, r5
  402e4e:	4662      	mov	r2, ip
  402e50:	4625      	mov	r5, r4
  402e52:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  402e56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402e58:	e009      	b.n	402e6e <_svfprintf_r+0xbfa>
  402e5a:	bf00      	nop
  402e5c:	00407a48 	.word	0x00407a48
  402e60:	004079f8 	.word	0x004079f8
  402e64:	3608      	adds	r6, #8
  402e66:	3d10      	subs	r5, #16
  402e68:	2d10      	cmp	r5, #16
  402e6a:	f340 8195 	ble.w	403198 <_svfprintf_r+0xf24>
  402e6e:	3301      	adds	r3, #1
  402e70:	3210      	adds	r2, #16
  402e72:	2b07      	cmp	r3, #7
  402e74:	922d      	str	r2, [sp, #180]	; 0xb4
  402e76:	932c      	str	r3, [sp, #176]	; 0xb0
  402e78:	e886 0180 	stmia.w	r6, {r7, r8}
  402e7c:	ddf2      	ble.n	402e64 <_svfprintf_r+0xbf0>
  402e7e:	4658      	mov	r0, fp
  402e80:	4621      	mov	r1, r4
  402e82:	aa2b      	add	r2, sp, #172	; 0xac
  402e84:	f003 f830 	bl	405ee8 <__ssprint_r>
  402e88:	2800      	cmp	r0, #0
  402e8a:	f47f ab0b 	bne.w	4024a4 <_svfprintf_r+0x230>
  402e8e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  402e90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402e92:	ae38      	add	r6, sp, #224	; 0xe0
  402e94:	e7e7      	b.n	402e66 <_svfprintf_r+0xbf2>
  402e96:	980d      	ldr	r0, [sp, #52]	; 0x34
  402e98:	990c      	ldr	r1, [sp, #48]	; 0x30
  402e9a:	aa2b      	add	r2, sp, #172	; 0xac
  402e9c:	f003 f824 	bl	405ee8 <__ssprint_r>
  402ea0:	2800      	cmp	r0, #0
  402ea2:	f47f aaff 	bne.w	4024a4 <_svfprintf_r+0x230>
  402ea6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  402eaa:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  402eae:	ae38      	add	r6, sp, #224	; 0xe0
  402eb0:	f7ff bbd8 	b.w	402664 <_svfprintf_r+0x3f0>
  402eb4:	1e6f      	subs	r7, r5, #1
  402eb6:	2f00      	cmp	r7, #0
  402eb8:	f77f af50 	ble.w	402d5c <_svfprintf_r+0xae8>
  402ebc:	2f10      	cmp	r7, #16
  402ebe:	4db3      	ldr	r5, [pc, #716]	; (40318c <_svfprintf_r+0xf18>)
  402ec0:	dd23      	ble.n	402f0a <_svfprintf_r+0xc96>
  402ec2:	4643      	mov	r3, r8
  402ec4:	f04f 0a10 	mov.w	sl, #16
  402ec8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  402ecc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402ed0:	e004      	b.n	402edc <_svfprintf_r+0xc68>
  402ed2:	3f10      	subs	r7, #16
  402ed4:	2f10      	cmp	r7, #16
  402ed6:	f106 0608 	add.w	r6, r6, #8
  402eda:	dd15      	ble.n	402f08 <_svfprintf_r+0xc94>
  402edc:	3401      	adds	r4, #1
  402ede:	3310      	adds	r3, #16
  402ee0:	2c07      	cmp	r4, #7
  402ee2:	932d      	str	r3, [sp, #180]	; 0xb4
  402ee4:	942c      	str	r4, [sp, #176]	; 0xb0
  402ee6:	e886 0420 	stmia.w	r6, {r5, sl}
  402eea:	ddf2      	ble.n	402ed2 <_svfprintf_r+0xc5e>
  402eec:	4640      	mov	r0, r8
  402eee:	4659      	mov	r1, fp
  402ef0:	aa2b      	add	r2, sp, #172	; 0xac
  402ef2:	f002 fff9 	bl	405ee8 <__ssprint_r>
  402ef6:	2800      	cmp	r0, #0
  402ef8:	f47f aad4 	bne.w	4024a4 <_svfprintf_r+0x230>
  402efc:	3f10      	subs	r7, #16
  402efe:	2f10      	cmp	r7, #16
  402f00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402f02:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  402f04:	ae38      	add	r6, sp, #224	; 0xe0
  402f06:	dce9      	bgt.n	402edc <_svfprintf_r+0xc68>
  402f08:	4698      	mov	r8, r3
  402f0a:	3401      	adds	r4, #1
  402f0c:	44b8      	add	r8, r7
  402f0e:	2c07      	cmp	r4, #7
  402f10:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  402f14:	942c      	str	r4, [sp, #176]	; 0xb0
  402f16:	e886 00a0 	stmia.w	r6, {r5, r7}
  402f1a:	f77f af1e 	ble.w	402d5a <_svfprintf_r+0xae6>
  402f1e:	980d      	ldr	r0, [sp, #52]	; 0x34
  402f20:	990c      	ldr	r1, [sp, #48]	; 0x30
  402f22:	aa2b      	add	r2, sp, #172	; 0xac
  402f24:	f002 ffe0 	bl	405ee8 <__ssprint_r>
  402f28:	2800      	cmp	r0, #0
  402f2a:	f47f aabb 	bne.w	4024a4 <_svfprintf_r+0x230>
  402f2e:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  402f32:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  402f34:	ae38      	add	r6, sp, #224	; 0xe0
  402f36:	e711      	b.n	402d5c <_svfprintf_r+0xae8>
  402f38:	4694      	mov	ip, r2
  402f3a:	3301      	adds	r3, #1
  402f3c:	44a4      	add	ip, r4
  402f3e:	2b07      	cmp	r3, #7
  402f40:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  402f44:	932c      	str	r3, [sp, #176]	; 0xb0
  402f46:	6035      	str	r5, [r6, #0]
  402f48:	6074      	str	r4, [r6, #4]
  402f4a:	f77f ac04 	ble.w	402756 <_svfprintf_r+0x4e2>
  402f4e:	e713      	b.n	402d78 <_svfprintf_r+0xb04>
  402f50:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  402f54:	4620      	mov	r0, r4
  402f56:	4629      	mov	r1, r5
  402f58:	220a      	movs	r2, #10
  402f5a:	2300      	movs	r3, #0
  402f5c:	f003 fa0e 	bl	40637c <__aeabi_uldivmod>
  402f60:	3230      	adds	r2, #48	; 0x30
  402f62:	f88b 2000 	strb.w	r2, [fp]
  402f66:	4620      	mov	r0, r4
  402f68:	4629      	mov	r1, r5
  402f6a:	220a      	movs	r2, #10
  402f6c:	2300      	movs	r3, #0
  402f6e:	f003 fa05 	bl	40637c <__aeabi_uldivmod>
  402f72:	4604      	mov	r4, r0
  402f74:	460d      	mov	r5, r1
  402f76:	ea54 0c05 	orrs.w	ip, r4, r5
  402f7a:	465f      	mov	r7, fp
  402f7c:	f10b 3bff 	add.w	fp, fp, #4294967295
  402f80:	d1e8      	bne.n	402f54 <_svfprintf_r+0xce0>
  402f82:	9d08      	ldr	r5, [sp, #32]
  402f84:	1bec      	subs	r4, r5, r7
  402f86:	f7ff bb03 	b.w	402590 <_svfprintf_r+0x31c>
  402f8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402f8c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  402f90:	682c      	ldr	r4, [r5, #0]
  402f92:	17e5      	asrs	r5, r4, #31
  402f94:	4622      	mov	r2, r4
  402f96:	462b      	mov	r3, r5
  402f98:	f10c 0c04 	add.w	ip, ip, #4
  402f9c:	2a00      	cmp	r2, #0
  402f9e:	f173 0000 	sbcs.w	r0, r3, #0
  402fa2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  402fa6:	f6bf ac75 	bge.w	402894 <_svfprintf_r+0x620>
  402faa:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  402fae:	4264      	negs	r4, r4
  402fb0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402fb4:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  402fb8:	2301      	movs	r3, #1
  402fba:	f7ff bac9 	b.w	402550 <_svfprintf_r+0x2dc>
  402fbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402fc0:	682c      	ldr	r4, [r5, #0]
  402fc2:	3504      	adds	r5, #4
  402fc4:	9510      	str	r5, [sp, #64]	; 0x40
  402fc6:	2500      	movs	r5, #0
  402fc8:	f7ff babe 	b.w	402548 <_svfprintf_r+0x2d4>
  402fcc:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402fce:	682c      	ldr	r4, [r5, #0]
  402fd0:	3504      	adds	r5, #4
  402fd2:	9510      	str	r5, [sp, #64]	; 0x40
  402fd4:	2301      	movs	r3, #1
  402fd6:	2500      	movs	r5, #0
  402fd8:	f7ff bab6 	b.w	402548 <_svfprintf_r+0x2d4>
  402fdc:	980d      	ldr	r0, [sp, #52]	; 0x34
  402fde:	990c      	ldr	r1, [sp, #48]	; 0x30
  402fe0:	aa2b      	add	r2, sp, #172	; 0xac
  402fe2:	f002 ff81 	bl	405ee8 <__ssprint_r>
  402fe6:	2800      	cmp	r0, #0
  402fe8:	f47f aa5c 	bne.w	4024a4 <_svfprintf_r+0x230>
  402fec:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  402ff0:	ae38      	add	r6, sp, #224	; 0xe0
  402ff2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  402ff4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402ff6:	442f      	add	r7, r5
  402ff8:	9d11      	ldr	r5, [sp, #68]	; 0x44
  402ffa:	42ac      	cmp	r4, r5
  402ffc:	db42      	blt.n	403084 <_svfprintf_r+0xe10>
  402ffe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403000:	07e9      	lsls	r1, r5, #31
  403002:	d43f      	bmi.n	403084 <_svfprintf_r+0xe10>
  403004:	9811      	ldr	r0, [sp, #68]	; 0x44
  403006:	ebc7 050a 	rsb	r5, r7, sl
  40300a:	1b04      	subs	r4, r0, r4
  40300c:	42ac      	cmp	r4, r5
  40300e:	bfb8      	it	lt
  403010:	4625      	movlt	r5, r4
  403012:	2d00      	cmp	r5, #0
  403014:	dd0b      	ble.n	40302e <_svfprintf_r+0xdba>
  403016:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403018:	6037      	str	r7, [r6, #0]
  40301a:	3301      	adds	r3, #1
  40301c:	44ac      	add	ip, r5
  40301e:	2b07      	cmp	r3, #7
  403020:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403024:	6075      	str	r5, [r6, #4]
  403026:	932c      	str	r3, [sp, #176]	; 0xb0
  403028:	f300 8252 	bgt.w	4034d0 <_svfprintf_r+0x125c>
  40302c:	3608      	adds	r6, #8
  40302e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  403032:	1b64      	subs	r4, r4, r5
  403034:	2c00      	cmp	r4, #0
  403036:	f77f ab8f 	ble.w	402758 <_svfprintf_r+0x4e4>
  40303a:	2c10      	cmp	r4, #16
  40303c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40303e:	4d53      	ldr	r5, [pc, #332]	; (40318c <_svfprintf_r+0xf18>)
  403040:	f77f af7b 	ble.w	402f3a <_svfprintf_r+0xcc6>
  403044:	2710      	movs	r7, #16
  403046:	4662      	mov	r2, ip
  403048:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40304c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  403050:	e004      	b.n	40305c <_svfprintf_r+0xde8>
  403052:	3608      	adds	r6, #8
  403054:	3c10      	subs	r4, #16
  403056:	2c10      	cmp	r4, #16
  403058:	f77f af6e 	ble.w	402f38 <_svfprintf_r+0xcc4>
  40305c:	3301      	adds	r3, #1
  40305e:	3210      	adds	r2, #16
  403060:	2b07      	cmp	r3, #7
  403062:	922d      	str	r2, [sp, #180]	; 0xb4
  403064:	932c      	str	r3, [sp, #176]	; 0xb0
  403066:	e886 00a0 	stmia.w	r6, {r5, r7}
  40306a:	ddf2      	ble.n	403052 <_svfprintf_r+0xdde>
  40306c:	4640      	mov	r0, r8
  40306e:	4651      	mov	r1, sl
  403070:	aa2b      	add	r2, sp, #172	; 0xac
  403072:	f002 ff39 	bl	405ee8 <__ssprint_r>
  403076:	2800      	cmp	r0, #0
  403078:	f47f aa14 	bne.w	4024a4 <_svfprintf_r+0x230>
  40307c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40307e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403080:	ae38      	add	r6, sp, #224	; 0xe0
  403082:	e7e7      	b.n	403054 <_svfprintf_r+0xde0>
  403084:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403086:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403088:	6035      	str	r5, [r6, #0]
  40308a:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40308c:	6075      	str	r5, [r6, #4]
  40308e:	3301      	adds	r3, #1
  403090:	44ac      	add	ip, r5
  403092:	2b07      	cmp	r3, #7
  403094:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403098:	932c      	str	r3, [sp, #176]	; 0xb0
  40309a:	f300 81fb 	bgt.w	403494 <_svfprintf_r+0x1220>
  40309e:	3608      	adds	r6, #8
  4030a0:	e7b0      	b.n	403004 <_svfprintf_r+0xd90>
  4030a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4030a4:	07ea      	lsls	r2, r5, #31
  4030a6:	f53f ae27 	bmi.w	402cf8 <_svfprintf_r+0xa84>
  4030aa:	3401      	adds	r4, #1
  4030ac:	f10c 0801 	add.w	r8, ip, #1
  4030b0:	2301      	movs	r3, #1
  4030b2:	2c07      	cmp	r4, #7
  4030b4:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4030b8:	942c      	str	r4, [sp, #176]	; 0xb0
  4030ba:	6037      	str	r7, [r6, #0]
  4030bc:	6073      	str	r3, [r6, #4]
  4030be:	f77f ae4c 	ble.w	402d5a <_svfprintf_r+0xae6>
  4030c2:	e72c      	b.n	402f1e <_svfprintf_r+0xcaa>
  4030c4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4030c6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4030c8:	aa2b      	add	r2, sp, #172	; 0xac
  4030ca:	f002 ff0d 	bl	405ee8 <__ssprint_r>
  4030ce:	2800      	cmp	r0, #0
  4030d0:	f47f a9e8 	bne.w	4024a4 <_svfprintf_r+0x230>
  4030d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4030d6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4030d8:	ae38      	add	r6, sp, #224	; 0xe0
  4030da:	e619      	b.n	402d10 <_svfprintf_r+0xa9c>
  4030dc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4030de:	990c      	ldr	r1, [sp, #48]	; 0x30
  4030e0:	aa2b      	add	r2, sp, #172	; 0xac
  4030e2:	f002 ff01 	bl	405ee8 <__ssprint_r>
  4030e6:	2800      	cmp	r0, #0
  4030e8:	f47f a9dc 	bne.w	4024a4 <_svfprintf_r+0x230>
  4030ec:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  4030f0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4030f2:	ae38      	add	r6, sp, #224	; 0xe0
  4030f4:	e61b      	b.n	402d2e <_svfprintf_r+0xaba>
  4030f6:	980d      	ldr	r0, [sp, #52]	; 0x34
  4030f8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4030fa:	aa2b      	add	r2, sp, #172	; 0xac
  4030fc:	f002 fef4 	bl	405ee8 <__ssprint_r>
  403100:	2800      	cmp	r0, #0
  403102:	f47f a9cf 	bne.w	4024a4 <_svfprintf_r+0x230>
  403106:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40310a:	ae38      	add	r6, sp, #224	; 0xe0
  40310c:	f7ff bad2 	b.w	4026b4 <_svfprintf_r+0x440>
  403110:	f002 fe6e 	bl	405df0 <__fpclassifyd>
  403114:	2800      	cmp	r0, #0
  403116:	f040 80c2 	bne.w	40329e <_svfprintf_r+0x102a>
  40311a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40311c:	4f1c      	ldr	r7, [pc, #112]	; (403190 <_svfprintf_r+0xf1c>)
  40311e:	4b1d      	ldr	r3, [pc, #116]	; (403194 <_svfprintf_r+0xf20>)
  403120:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403124:	900a      	str	r0, [sp, #40]	; 0x28
  403126:	f04f 0c03 	mov.w	ip, #3
  40312a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40312e:	9409      	str	r4, [sp, #36]	; 0x24
  403130:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  403134:	9014      	str	r0, [sp, #80]	; 0x50
  403136:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40313a:	bfd8      	it	le
  40313c:	461f      	movle	r7, r3
  40313e:	4664      	mov	r4, ip
  403140:	f7ff ba2f 	b.w	4025a2 <_svfprintf_r+0x32e>
  403144:	e9d3 4500 	ldrd	r4, r5, [r3]
  403148:	3308      	adds	r3, #8
  40314a:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40314e:	9310      	str	r3, [sp, #64]	; 0x40
  403150:	e476      	b.n	402a40 <_svfprintf_r+0x7cc>
  403152:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403156:	f01c 0f10 	tst.w	ip, #16
  40315a:	f000 8155 	beq.w	403408 <_svfprintf_r+0x1194>
  40315e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403160:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  403162:	6823      	ldr	r3, [r4, #0]
  403164:	3404      	adds	r4, #4
  403166:	9410      	str	r4, [sp, #64]	; 0x40
  403168:	601d      	str	r5, [r3, #0]
  40316a:	f7ff b8a9 	b.w	4022c0 <_svfprintf_r+0x4c>
  40316e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403170:	0664      	lsls	r4, r4, #25
  403172:	f140 8142 	bpl.w	4033fa <_svfprintf_r+0x1186>
  403176:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40317a:	f8bc 4000 	ldrh.w	r4, [ip]
  40317e:	f10c 0c04 	add.w	ip, ip, #4
  403182:	2500      	movs	r5, #0
  403184:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403188:	f7ff b9ca 	b.w	402520 <_svfprintf_r+0x2ac>
  40318c:	004079f8 	.word	0x004079f8
  403190:	00407a14 	.word	0x00407a14
  403194:	00407a10 	.word	0x00407a10
  403198:	462c      	mov	r4, r5
  40319a:	463d      	mov	r5, r7
  40319c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40319e:	4694      	mov	ip, r2
  4031a0:	3301      	adds	r3, #1
  4031a2:	44a4      	add	ip, r4
  4031a4:	2b07      	cmp	r3, #7
  4031a6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4031aa:	932c      	str	r3, [sp, #176]	; 0xb0
  4031ac:	6035      	str	r5, [r6, #0]
  4031ae:	6074      	str	r4, [r6, #4]
  4031b0:	f73f af14 	bgt.w	402fdc <_svfprintf_r+0xd68>
  4031b4:	3608      	adds	r6, #8
  4031b6:	e71c      	b.n	402ff2 <_svfprintf_r+0xd7e>
  4031b8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4031ba:	990c      	ldr	r1, [sp, #48]	; 0x30
  4031bc:	aa2b      	add	r2, sp, #172	; 0xac
  4031be:	f002 fe93 	bl	405ee8 <__ssprint_r>
  4031c2:	2800      	cmp	r0, #0
  4031c4:	f47f a96e 	bne.w	4024a4 <_svfprintf_r+0x230>
  4031c8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4031cc:	ae38      	add	r6, sp, #224	; 0xe0
  4031ce:	e4fd      	b.n	402bcc <_svfprintf_r+0x958>
  4031d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4031d2:	49b7      	ldr	r1, [pc, #732]	; (4034b0 <_svfprintf_r+0x123c>)
  4031d4:	6031      	str	r1, [r6, #0]
  4031d6:	3201      	adds	r2, #1
  4031d8:	f10c 0c01 	add.w	ip, ip, #1
  4031dc:	2101      	movs	r1, #1
  4031de:	2a07      	cmp	r2, #7
  4031e0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4031e4:	922c      	str	r2, [sp, #176]	; 0xb0
  4031e6:	6071      	str	r1, [r6, #4]
  4031e8:	f300 80f7 	bgt.w	4033da <_svfprintf_r+0x1166>
  4031ec:	3608      	adds	r6, #8
  4031ee:	461c      	mov	r4, r3
  4031f0:	b92c      	cbnz	r4, 4031fe <_svfprintf_r+0xf8a>
  4031f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4031f4:	b91d      	cbnz	r5, 4031fe <_svfprintf_r+0xf8a>
  4031f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4031f8:	07e8      	lsls	r0, r5, #31
  4031fa:	f57f aaad 	bpl.w	402758 <_svfprintf_r+0x4e4>
  4031fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403200:	9918      	ldr	r1, [sp, #96]	; 0x60
  403202:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403204:	6035      	str	r5, [r6, #0]
  403206:	3301      	adds	r3, #1
  403208:	4461      	add	r1, ip
  40320a:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40320c:	912d      	str	r1, [sp, #180]	; 0xb4
  40320e:	2b07      	cmp	r3, #7
  403210:	6075      	str	r5, [r6, #4]
  403212:	932c      	str	r3, [sp, #176]	; 0xb0
  403214:	f300 81de 	bgt.w	4035d4 <_svfprintf_r+0x1360>
  403218:	f106 0208 	add.w	r2, r6, #8
  40321c:	4264      	negs	r4, r4
  40321e:	2c00      	cmp	r4, #0
  403220:	f340 810b 	ble.w	40343a <_svfprintf_r+0x11c6>
  403224:	2c10      	cmp	r4, #16
  403226:	4da3      	ldr	r5, [pc, #652]	; (4034b4 <_svfprintf_r+0x1240>)
  403228:	f340 8148 	ble.w	4034bc <_svfprintf_r+0x1248>
  40322c:	46a3      	mov	fp, r4
  40322e:	2610      	movs	r6, #16
  403230:	460c      	mov	r4, r1
  403232:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  403236:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40323a:	e006      	b.n	40324a <_svfprintf_r+0xfd6>
  40323c:	3208      	adds	r2, #8
  40323e:	f1ab 0b10 	sub.w	fp, fp, #16
  403242:	f1bb 0f10 	cmp.w	fp, #16
  403246:	f340 8137 	ble.w	4034b8 <_svfprintf_r+0x1244>
  40324a:	3301      	adds	r3, #1
  40324c:	3410      	adds	r4, #16
  40324e:	2b07      	cmp	r3, #7
  403250:	942d      	str	r4, [sp, #180]	; 0xb4
  403252:	932c      	str	r3, [sp, #176]	; 0xb0
  403254:	e882 0060 	stmia.w	r2, {r5, r6}
  403258:	ddf0      	ble.n	40323c <_svfprintf_r+0xfc8>
  40325a:	4640      	mov	r0, r8
  40325c:	4651      	mov	r1, sl
  40325e:	aa2b      	add	r2, sp, #172	; 0xac
  403260:	f002 fe42 	bl	405ee8 <__ssprint_r>
  403264:	2800      	cmp	r0, #0
  403266:	f47f a91d 	bne.w	4024a4 <_svfprintf_r+0x230>
  40326a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  40326c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40326e:	aa38      	add	r2, sp, #224	; 0xe0
  403270:	e7e5      	b.n	40323e <_svfprintf_r+0xfca>
  403272:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403274:	f893 8001 	ldrb.w	r8, [r3, #1]
  403278:	f044 0420 	orr.w	r4, r4, #32
  40327c:	f109 0901 	add.w	r9, r9, #1
  403280:	9409      	str	r4, [sp, #36]	; 0x24
  403282:	f7ff b853 	b.w	40232c <_svfprintf_r+0xb8>
  403286:	980d      	ldr	r0, [sp, #52]	; 0x34
  403288:	990c      	ldr	r1, [sp, #48]	; 0x30
  40328a:	aa2b      	add	r2, sp, #172	; 0xac
  40328c:	f002 fe2c 	bl	405ee8 <__ssprint_r>
  403290:	2800      	cmp	r0, #0
  403292:	f47f a907 	bne.w	4024a4 <_svfprintf_r+0x230>
  403296:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40329a:	ae38      	add	r6, sp, #224	; 0xe0
  40329c:	e4ac      	b.n	402bf8 <_svfprintf_r+0x984>
  40329e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4032a0:	3501      	adds	r5, #1
  4032a2:	f028 0a20 	bic.w	sl, r8, #32
  4032a6:	f000 80a5 	beq.w	4033f4 <_svfprintf_r+0x1180>
  4032aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4032ae:	d104      	bne.n	4032ba <_svfprintf_r+0x1046>
  4032b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4032b2:	2d00      	cmp	r5, #0
  4032b4:	bf08      	it	eq
  4032b6:	2501      	moveq	r5, #1
  4032b8:	950a      	str	r5, [sp, #40]	; 0x28
  4032ba:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4032be:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4032c2:	2b00      	cmp	r3, #0
  4032c4:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  4032c8:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4032cc:	f2c0 819c 	blt.w	403608 <_svfprintf_r+0x1394>
  4032d0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4032d4:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  4032d8:	f04f 0b00 	mov.w	fp, #0
  4032dc:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4032e0:	f000 819b 	beq.w	40361a <_svfprintf_r+0x13a6>
  4032e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  4032e8:	f000 81a9 	beq.w	40363e <_svfprintf_r+0x13ca>
  4032ec:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  4032f0:	bf0a      	itet	eq
  4032f2:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  4032f4:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4032f6:	1c65      	addeq	r5, r4, #1
  4032f8:	2002      	movs	r0, #2
  4032fa:	a925      	add	r1, sp, #148	; 0x94
  4032fc:	aa26      	add	r2, sp, #152	; 0x98
  4032fe:	ab29      	add	r3, sp, #164	; 0xa4
  403300:	e88d 0021 	stmia.w	sp, {r0, r5}
  403304:	9203      	str	r2, [sp, #12]
  403306:	9304      	str	r3, [sp, #16]
  403308:	9102      	str	r1, [sp, #8]
  40330a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40330c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  403310:	f000 fad6 	bl	4038c0 <_dtoa_r>
  403314:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  403318:	4607      	mov	r7, r0
  40331a:	d002      	beq.n	403322 <_svfprintf_r+0x10ae>
  40331c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403320:	d105      	bne.n	40332e <_svfprintf_r+0x10ba>
  403322:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403326:	f01c 0f01 	tst.w	ip, #1
  40332a:	f000 819c 	beq.w	403666 <_svfprintf_r+0x13f2>
  40332e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  403332:	eb07 0405 	add.w	r4, r7, r5
  403336:	f000 811c 	beq.w	403572 <_svfprintf_r+0x12fe>
  40333a:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40333e:	2200      	movs	r2, #0
  403340:	2300      	movs	r3, #0
  403342:	f002 ffc1 	bl	4062c8 <__aeabi_dcmpeq>
  403346:	2800      	cmp	r0, #0
  403348:	f040 8105 	bne.w	403556 <_svfprintf_r+0x12e2>
  40334c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40334e:	429c      	cmp	r4, r3
  403350:	d906      	bls.n	403360 <_svfprintf_r+0x10ec>
  403352:	2130      	movs	r1, #48	; 0x30
  403354:	1c5a      	adds	r2, r3, #1
  403356:	9229      	str	r2, [sp, #164]	; 0xa4
  403358:	7019      	strb	r1, [r3, #0]
  40335a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40335c:	429c      	cmp	r4, r3
  40335e:	d8f9      	bhi.n	403354 <_svfprintf_r+0x10e0>
  403360:	1bdb      	subs	r3, r3, r7
  403362:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  403366:	9311      	str	r3, [sp, #68]	; 0x44
  403368:	f000 80ed 	beq.w	403546 <_svfprintf_r+0x12d2>
  40336c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403370:	f340 81f2 	ble.w	403758 <_svfprintf_r+0x14e4>
  403374:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  403378:	f000 8168 	beq.w	40364c <_svfprintf_r+0x13d8>
  40337c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40337e:	9414      	str	r4, [sp, #80]	; 0x50
  403380:	9c11      	ldr	r4, [sp, #68]	; 0x44
  403382:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403384:	42ac      	cmp	r4, r5
  403386:	f300 8132 	bgt.w	4035ee <_svfprintf_r+0x137a>
  40338a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40338e:	f01c 0f01 	tst.w	ip, #1
  403392:	f040 81ad 	bne.w	4036f0 <_svfprintf_r+0x147c>
  403396:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40339a:	462c      	mov	r4, r5
  40339c:	f04f 0867 	mov.w	r8, #103	; 0x67
  4033a0:	f1bb 0f00 	cmp.w	fp, #0
  4033a4:	f040 80b2 	bne.w	40350c <_svfprintf_r+0x1298>
  4033a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4033aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4033ac:	9509      	str	r5, [sp, #36]	; 0x24
  4033ae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  4033b2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4033b6:	f7ff b8f4 	b.w	4025a2 <_svfprintf_r+0x32e>
  4033ba:	980d      	ldr	r0, [sp, #52]	; 0x34
  4033bc:	2140      	movs	r1, #64	; 0x40
  4033be:	f001 fc45 	bl	404c4c <_malloc_r>
  4033c2:	6020      	str	r0, [r4, #0]
  4033c4:	6120      	str	r0, [r4, #16]
  4033c6:	2800      	cmp	r0, #0
  4033c8:	f000 81bf 	beq.w	40374a <_svfprintf_r+0x14d6>
  4033cc:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  4033d0:	2340      	movs	r3, #64	; 0x40
  4033d2:	f8cc 3014 	str.w	r3, [ip, #20]
  4033d6:	f7fe bf63 	b.w	4022a0 <_svfprintf_r+0x2c>
  4033da:	980d      	ldr	r0, [sp, #52]	; 0x34
  4033dc:	990c      	ldr	r1, [sp, #48]	; 0x30
  4033de:	aa2b      	add	r2, sp, #172	; 0xac
  4033e0:	f002 fd82 	bl	405ee8 <__ssprint_r>
  4033e4:	2800      	cmp	r0, #0
  4033e6:	f47f a85d 	bne.w	4024a4 <_svfprintf_r+0x230>
  4033ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4033ec:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4033f0:	ae38      	add	r6, sp, #224	; 0xe0
  4033f2:	e6fd      	b.n	4031f0 <_svfprintf_r+0xf7c>
  4033f4:	2406      	movs	r4, #6
  4033f6:	940a      	str	r4, [sp, #40]	; 0x28
  4033f8:	e75f      	b.n	4032ba <_svfprintf_r+0x1046>
  4033fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4033fc:	682c      	ldr	r4, [r5, #0]
  4033fe:	3504      	adds	r5, #4
  403400:	9510      	str	r5, [sp, #64]	; 0x40
  403402:	2500      	movs	r5, #0
  403404:	f7ff b88c 	b.w	402520 <_svfprintf_r+0x2ac>
  403408:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40340c:	f01c 0f40 	tst.w	ip, #64	; 0x40
  403410:	f000 8087 	beq.w	403522 <_svfprintf_r+0x12ae>
  403414:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403416:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  403418:	6823      	ldr	r3, [r4, #0]
  40341a:	3404      	adds	r4, #4
  40341c:	9410      	str	r4, [sp, #64]	; 0x40
  40341e:	801d      	strh	r5, [r3, #0]
  403420:	f7fe bf4e 	b.w	4022c0 <_svfprintf_r+0x4c>
  403424:	980d      	ldr	r0, [sp, #52]	; 0x34
  403426:	990c      	ldr	r1, [sp, #48]	; 0x30
  403428:	aa2b      	add	r2, sp, #172	; 0xac
  40342a:	f002 fd5d 	bl	405ee8 <__ssprint_r>
  40342e:	2800      	cmp	r0, #0
  403430:	f47f a838 	bne.w	4024a4 <_svfprintf_r+0x230>
  403434:	992d      	ldr	r1, [sp, #180]	; 0xb4
  403436:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403438:	aa38      	add	r2, sp, #224	; 0xe0
  40343a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40343e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  403440:	6017      	str	r7, [r2, #0]
  403442:	3301      	adds	r3, #1
  403444:	448c      	add	ip, r1
  403446:	2b07      	cmp	r3, #7
  403448:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40344c:	932c      	str	r3, [sp, #176]	; 0xb0
  40344e:	6054      	str	r4, [r2, #4]
  403450:	f73f ac92 	bgt.w	402d78 <_svfprintf_r+0xb04>
  403454:	f102 0608 	add.w	r6, r2, #8
  403458:	f7ff b97e 	b.w	402758 <_svfprintf_r+0x4e4>
  40345c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  403460:	f7fe fed8 	bl	402214 <strlen>
  403464:	9510      	str	r5, [sp, #64]	; 0x40
  403466:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  40346a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40346c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  403470:	4604      	mov	r4, r0
  403472:	9514      	str	r5, [sp, #80]	; 0x50
  403474:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403478:	f7ff b893 	b.w	4025a2 <_svfprintf_r+0x32e>
  40347c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40347e:	990c      	ldr	r1, [sp, #48]	; 0x30
  403480:	aa2b      	add	r2, sp, #172	; 0xac
  403482:	f002 fd31 	bl	405ee8 <__ssprint_r>
  403486:	2800      	cmp	r0, #0
  403488:	f47f a80c 	bne.w	4024a4 <_svfprintf_r+0x230>
  40348c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  403490:	ae38      	add	r6, sp, #224	; 0xe0
  403492:	e4cc      	b.n	402e2e <_svfprintf_r+0xbba>
  403494:	980d      	ldr	r0, [sp, #52]	; 0x34
  403496:	990c      	ldr	r1, [sp, #48]	; 0x30
  403498:	aa2b      	add	r2, sp, #172	; 0xac
  40349a:	f002 fd25 	bl	405ee8 <__ssprint_r>
  40349e:	2800      	cmp	r0, #0
  4034a0:	f47f a800 	bne.w	4024a4 <_svfprintf_r+0x230>
  4034a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4034a6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4034aa:	ae38      	add	r6, sp, #224	; 0xe0
  4034ac:	e5aa      	b.n	403004 <_svfprintf_r+0xd90>
  4034ae:	bf00      	nop
  4034b0:	00407a48 	.word	0x00407a48
  4034b4:	004079f8 	.word	0x004079f8
  4034b8:	4621      	mov	r1, r4
  4034ba:	465c      	mov	r4, fp
  4034bc:	3301      	adds	r3, #1
  4034be:	4421      	add	r1, r4
  4034c0:	2b07      	cmp	r3, #7
  4034c2:	912d      	str	r1, [sp, #180]	; 0xb4
  4034c4:	932c      	str	r3, [sp, #176]	; 0xb0
  4034c6:	6015      	str	r5, [r2, #0]
  4034c8:	6054      	str	r4, [r2, #4]
  4034ca:	dcab      	bgt.n	403424 <_svfprintf_r+0x11b0>
  4034cc:	3208      	adds	r2, #8
  4034ce:	e7b4      	b.n	40343a <_svfprintf_r+0x11c6>
  4034d0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4034d2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4034d4:	aa2b      	add	r2, sp, #172	; 0xac
  4034d6:	f002 fd07 	bl	405ee8 <__ssprint_r>
  4034da:	2800      	cmp	r0, #0
  4034dc:	f47e afe2 	bne.w	4024a4 <_svfprintf_r+0x230>
  4034e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4034e2:	9911      	ldr	r1, [sp, #68]	; 0x44
  4034e4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4034e8:	1b0c      	subs	r4, r1, r4
  4034ea:	ae38      	add	r6, sp, #224	; 0xe0
  4034ec:	e59f      	b.n	40302e <_svfprintf_r+0xdba>
  4034ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4034f0:	9714      	str	r7, [sp, #80]	; 0x50
  4034f2:	2c06      	cmp	r4, #6
  4034f4:	bf28      	it	cs
  4034f6:	2406      	movcs	r4, #6
  4034f8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4034fc:	46ba      	mov	sl, r7
  4034fe:	970a      	str	r7, [sp, #40]	; 0x28
  403500:	9510      	str	r5, [sp, #64]	; 0x40
  403502:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  403506:	4f97      	ldr	r7, [pc, #604]	; (403764 <_svfprintf_r+0x14f0>)
  403508:	f7ff b84b 	b.w	4025a2 <_svfprintf_r+0x32e>
  40350c:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40350e:	9509      	str	r5, [sp, #36]	; 0x24
  403510:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  403514:	2500      	movs	r5, #0
  403516:	930b      	str	r3, [sp, #44]	; 0x2c
  403518:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40351c:	950a      	str	r5, [sp, #40]	; 0x28
  40351e:	f7ff b843 	b.w	4025a8 <_svfprintf_r+0x334>
  403522:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  403526:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403528:	f8dc 3000 	ldr.w	r3, [ip]
  40352c:	f10c 0c04 	add.w	ip, ip, #4
  403530:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403534:	601c      	str	r4, [r3, #0]
  403536:	f7fe bec3 	b.w	4022c0 <_svfprintf_r+0x4c>
  40353a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40353e:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  403542:	f7ff ba8f 	b.w	402a64 <_svfprintf_r+0x7f0>
  403546:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403548:	1cdc      	adds	r4, r3, #3
  40354a:	db19      	blt.n	403580 <_svfprintf_r+0x130c>
  40354c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40354e:	429c      	cmp	r4, r3
  403550:	db16      	blt.n	403580 <_svfprintf_r+0x130c>
  403552:	9314      	str	r3, [sp, #80]	; 0x50
  403554:	e714      	b.n	403380 <_svfprintf_r+0x110c>
  403556:	4623      	mov	r3, r4
  403558:	e702      	b.n	403360 <_svfprintf_r+0x10ec>
  40355a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40355e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  403562:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403564:	9510      	str	r5, [sp, #64]	; 0x40
  403566:	900a      	str	r0, [sp, #40]	; 0x28
  403568:	9014      	str	r0, [sp, #80]	; 0x50
  40356a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40356e:	f7ff b818 	b.w	4025a2 <_svfprintf_r+0x32e>
  403572:	783b      	ldrb	r3, [r7, #0]
  403574:	2b30      	cmp	r3, #48	; 0x30
  403576:	f000 80ad 	beq.w	4036d4 <_svfprintf_r+0x1460>
  40357a:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40357c:	442c      	add	r4, r5
  40357e:	e6dc      	b.n	40333a <_svfprintf_r+0x10c6>
  403580:	f1a8 0802 	sub.w	r8, r8, #2
  403584:	3b01      	subs	r3, #1
  403586:	2b00      	cmp	r3, #0
  403588:	9325      	str	r3, [sp, #148]	; 0x94
  40358a:	bfba      	itte	lt
  40358c:	425b      	neglt	r3, r3
  40358e:	222d      	movlt	r2, #45	; 0x2d
  403590:	222b      	movge	r2, #43	; 0x2b
  403592:	2b09      	cmp	r3, #9
  403594:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  403598:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  40359c:	dc65      	bgt.n	40366a <_svfprintf_r+0x13f6>
  40359e:	3330      	adds	r3, #48	; 0x30
  4035a0:	2230      	movs	r2, #48	; 0x30
  4035a2:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  4035a6:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  4035aa:	ab28      	add	r3, sp, #160	; 0xa0
  4035ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4035ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4035b0:	aa27      	add	r2, sp, #156	; 0x9c
  4035b2:	1a9a      	subs	r2, r3, r2
  4035b4:	2d01      	cmp	r5, #1
  4035b6:	9219      	str	r2, [sp, #100]	; 0x64
  4035b8:	4414      	add	r4, r2
  4035ba:	f340 80b7 	ble.w	40372c <_svfprintf_r+0x14b8>
  4035be:	3401      	adds	r4, #1
  4035c0:	2500      	movs	r5, #0
  4035c2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4035c6:	9514      	str	r5, [sp, #80]	; 0x50
  4035c8:	e6ea      	b.n	4033a0 <_svfprintf_r+0x112c>
  4035ca:	2400      	movs	r4, #0
  4035cc:	4681      	mov	r9, r0
  4035ce:	940a      	str	r4, [sp, #40]	; 0x28
  4035d0:	f7fe beae 	b.w	402330 <_svfprintf_r+0xbc>
  4035d4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4035d6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4035d8:	aa2b      	add	r2, sp, #172	; 0xac
  4035da:	f002 fc85 	bl	405ee8 <__ssprint_r>
  4035de:	2800      	cmp	r0, #0
  4035e0:	f47e af60 	bne.w	4024a4 <_svfprintf_r+0x230>
  4035e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4035e6:	992d      	ldr	r1, [sp, #180]	; 0xb4
  4035e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4035ea:	aa38      	add	r2, sp, #224	; 0xe0
  4035ec:	e616      	b.n	40321c <_svfprintf_r+0xfa8>
  4035ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4035f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4035f2:	2c00      	cmp	r4, #0
  4035f4:	bfd4      	ite	le
  4035f6:	f1c4 0402 	rsble	r4, r4, #2
  4035fa:	2401      	movgt	r4, #1
  4035fc:	442c      	add	r4, r5
  4035fe:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  403602:	f04f 0867 	mov.w	r8, #103	; 0x67
  403606:	e6cb      	b.n	4033a0 <_svfprintf_r+0x112c>
  403608:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40360a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40360c:	9020      	str	r0, [sp, #128]	; 0x80
  40360e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403612:	9121      	str	r1, [sp, #132]	; 0x84
  403614:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  403618:	e660      	b.n	4032dc <_svfprintf_r+0x1068>
  40361a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40361c:	9501      	str	r5, [sp, #4]
  40361e:	2003      	movs	r0, #3
  403620:	a925      	add	r1, sp, #148	; 0x94
  403622:	aa26      	add	r2, sp, #152	; 0x98
  403624:	ab29      	add	r3, sp, #164	; 0xa4
  403626:	9000      	str	r0, [sp, #0]
  403628:	9203      	str	r2, [sp, #12]
  40362a:	9304      	str	r3, [sp, #16]
  40362c:	9102      	str	r1, [sp, #8]
  40362e:	980d      	ldr	r0, [sp, #52]	; 0x34
  403630:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  403634:	f000 f944 	bl	4038c0 <_dtoa_r>
  403638:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40363a:	4607      	mov	r7, r0
  40363c:	e677      	b.n	40332e <_svfprintf_r+0x10ba>
  40363e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403640:	9401      	str	r4, [sp, #4]
  403642:	2003      	movs	r0, #3
  403644:	a925      	add	r1, sp, #148	; 0x94
  403646:	aa26      	add	r2, sp, #152	; 0x98
  403648:	ab29      	add	r3, sp, #164	; 0xa4
  40364a:	e7ec      	b.n	403626 <_svfprintf_r+0x13b2>
  40364c:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40364e:	9514      	str	r5, [sp, #80]	; 0x50
  403650:	2d00      	cmp	r5, #0
  403652:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403654:	dd63      	ble.n	40371e <_svfprintf_r+0x14aa>
  403656:	bbb4      	cbnz	r4, 4036c6 <_svfprintf_r+0x1452>
  403658:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40365a:	07e8      	lsls	r0, r5, #31
  40365c:	d433      	bmi.n	4036c6 <_svfprintf_r+0x1452>
  40365e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  403660:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  403664:	e69c      	b.n	4033a0 <_svfprintf_r+0x112c>
  403666:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  403668:	e67a      	b.n	403360 <_svfprintf_r+0x10ec>
  40366a:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  40366e:	4d3e      	ldr	r5, [pc, #248]	; (403768 <_svfprintf_r+0x14f4>)
  403670:	17da      	asrs	r2, r3, #31
  403672:	fb85 5103 	smull	r5, r1, r5, r3
  403676:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  40367a:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  40367e:	4602      	mov	r2, r0
  403680:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  403684:	f103 0030 	add.w	r0, r3, #48	; 0x30
  403688:	2909      	cmp	r1, #9
  40368a:	7010      	strb	r0, [r2, #0]
  40368c:	460b      	mov	r3, r1
  40368e:	f102 30ff 	add.w	r0, r2, #4294967295
  403692:	dcec      	bgt.n	40366e <_svfprintf_r+0x13fa>
  403694:	f101 0330 	add.w	r3, r1, #48	; 0x30
  403698:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  40369c:	b2d9      	uxtb	r1, r3
  40369e:	4284      	cmp	r4, r0
  4036a0:	f802 1c01 	strb.w	r1, [r2, #-1]
  4036a4:	d95a      	bls.n	40375c <_svfprintf_r+0x14e8>
  4036a6:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  4036aa:	4613      	mov	r3, r2
  4036ac:	e001      	b.n	4036b2 <_svfprintf_r+0x143e>
  4036ae:	f813 1b01 	ldrb.w	r1, [r3], #1
  4036b2:	42a3      	cmp	r3, r4
  4036b4:	f800 1f01 	strb.w	r1, [r0, #1]!
  4036b8:	d1f9      	bne.n	4036ae <_svfprintf_r+0x143a>
  4036ba:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  4036be:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  4036c2:	3bf6      	subs	r3, #246	; 0xf6
  4036c4:	e772      	b.n	4035ac <_svfprintf_r+0x1338>
  4036c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4036c8:	1c6c      	adds	r4, r5, #1
  4036ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4036cc:	442c      	add	r4, r5
  4036ce:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4036d2:	e665      	b.n	4033a0 <_svfprintf_r+0x112c>
  4036d4:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4036d8:	2200      	movs	r2, #0
  4036da:	2300      	movs	r3, #0
  4036dc:	f002 fdf4 	bl	4062c8 <__aeabi_dcmpeq>
  4036e0:	2800      	cmp	r0, #0
  4036e2:	f47f af4a 	bne.w	40357a <_svfprintf_r+0x1306>
  4036e6:	f1c5 0501 	rsb	r5, r5, #1
  4036ea:	9525      	str	r5, [sp, #148]	; 0x94
  4036ec:	442c      	add	r4, r5
  4036ee:	e624      	b.n	40333a <_svfprintf_r+0x10c6>
  4036f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4036f2:	1c6c      	adds	r4, r5, #1
  4036f4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4036f8:	f04f 0867 	mov.w	r8, #103	; 0x67
  4036fc:	e650      	b.n	4033a0 <_svfprintf_r+0x112c>
  4036fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403700:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  403704:	682d      	ldr	r5, [r5, #0]
  403706:	f899 8001 	ldrb.w	r8, [r9, #1]
  40370a:	950a      	str	r5, [sp, #40]	; 0x28
  40370c:	f10c 0304 	add.w	r3, ip, #4
  403710:	2d00      	cmp	r5, #0
  403712:	9310      	str	r3, [sp, #64]	; 0x40
  403714:	4681      	mov	r9, r0
  403716:	f6be ae09 	bge.w	40232c <_svfprintf_r+0xb8>
  40371a:	f7fe be04 	b.w	402326 <_svfprintf_r+0xb2>
  40371e:	b97c      	cbnz	r4, 403740 <_svfprintf_r+0x14cc>
  403720:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403722:	07e9      	lsls	r1, r5, #31
  403724:	d40c      	bmi.n	403740 <_svfprintf_r+0x14cc>
  403726:	2301      	movs	r3, #1
  403728:	461c      	mov	r4, r3
  40372a:	e639      	b.n	4033a0 <_svfprintf_r+0x112c>
  40372c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403730:	f01c 0301 	ands.w	r3, ip, #1
  403734:	f47f af43 	bne.w	4035be <_svfprintf_r+0x134a>
  403738:	9314      	str	r3, [sp, #80]	; 0x50
  40373a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40373e:	e62f      	b.n	4033a0 <_svfprintf_r+0x112c>
  403740:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403742:	1cac      	adds	r4, r5, #2
  403744:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  403748:	e62a      	b.n	4033a0 <_svfprintf_r+0x112c>
  40374a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40374c:	230c      	movs	r3, #12
  40374e:	602b      	str	r3, [r5, #0]
  403750:	f04f 30ff 	mov.w	r0, #4294967295
  403754:	f7fe beae 	b.w	4024b4 <_svfprintf_r+0x240>
  403758:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40375a:	e713      	b.n	403584 <_svfprintf_r+0x1310>
  40375c:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  403760:	e724      	b.n	4035ac <_svfprintf_r+0x1338>
  403762:	bf00      	nop
  403764:	00407a40 	.word	0x00407a40
  403768:	66666667 	.word	0x66666667

0040376c <register_fini>:
  40376c:	4b02      	ldr	r3, [pc, #8]	; (403778 <register_fini+0xc>)
  40376e:	b113      	cbz	r3, 403776 <register_fini+0xa>
  403770:	4802      	ldr	r0, [pc, #8]	; (40377c <register_fini+0x10>)
  403772:	f000 b805 	b.w	403780 <atexit>
  403776:	4770      	bx	lr
  403778:	00000000 	.word	0x00000000
  40377c:	00404981 	.word	0x00404981

00403780 <atexit>:
  403780:	4601      	mov	r1, r0
  403782:	2000      	movs	r0, #0
  403784:	4602      	mov	r2, r0
  403786:	4603      	mov	r3, r0
  403788:	f002 bc42 	b.w	406010 <__register_exitproc>

0040378c <quorem>:
  40378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403790:	6903      	ldr	r3, [r0, #16]
  403792:	690d      	ldr	r5, [r1, #16]
  403794:	429d      	cmp	r5, r3
  403796:	b083      	sub	sp, #12
  403798:	4683      	mov	fp, r0
  40379a:	f300 808b 	bgt.w	4038b4 <quorem+0x128>
  40379e:	3d01      	subs	r5, #1
  4037a0:	f101 0414 	add.w	r4, r1, #20
  4037a4:	f100 0a14 	add.w	sl, r0, #20
  4037a8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  4037ac:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  4037b0:	3201      	adds	r2, #1
  4037b2:	fbb3 f8f2 	udiv	r8, r3, r2
  4037b6:	00aa      	lsls	r2, r5, #2
  4037b8:	4691      	mov	r9, r2
  4037ba:	9200      	str	r2, [sp, #0]
  4037bc:	4452      	add	r2, sl
  4037be:	44a1      	add	r9, r4
  4037c0:	9201      	str	r2, [sp, #4]
  4037c2:	f1b8 0f00 	cmp.w	r8, #0
  4037c6:	d03d      	beq.n	403844 <quorem+0xb8>
  4037c8:	f04f 0e00 	mov.w	lr, #0
  4037cc:	4670      	mov	r0, lr
  4037ce:	4622      	mov	r2, r4
  4037d0:	4653      	mov	r3, sl
  4037d2:	468c      	mov	ip, r1
  4037d4:	f852 6b04 	ldr.w	r6, [r2], #4
  4037d8:	6819      	ldr	r1, [r3, #0]
  4037da:	b2b7      	uxth	r7, r6
  4037dc:	0c36      	lsrs	r6, r6, #16
  4037de:	fb07 ee08 	mla	lr, r7, r8, lr
  4037e2:	fb06 f608 	mul.w	r6, r6, r8
  4037e6:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  4037ea:	fa1f f78e 	uxth.w	r7, lr
  4037ee:	1bc7      	subs	r7, r0, r7
  4037f0:	b2b0      	uxth	r0, r6
  4037f2:	fa17 f781 	uxtah	r7, r7, r1
  4037f6:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  4037fa:	eb00 4027 	add.w	r0, r0, r7, asr #16
  4037fe:	b2bf      	uxth	r7, r7
  403800:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  403804:	4591      	cmp	r9, r2
  403806:	f843 7b04 	str.w	r7, [r3], #4
  40380a:	ea4f 4020 	mov.w	r0, r0, asr #16
  40380e:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  403812:	d2df      	bcs.n	4037d4 <quorem+0x48>
  403814:	9a00      	ldr	r2, [sp, #0]
  403816:	f85a 3002 	ldr.w	r3, [sl, r2]
  40381a:	4661      	mov	r1, ip
  40381c:	b993      	cbnz	r3, 403844 <quorem+0xb8>
  40381e:	9a01      	ldr	r2, [sp, #4]
  403820:	1f13      	subs	r3, r2, #4
  403822:	459a      	cmp	sl, r3
  403824:	d20c      	bcs.n	403840 <quorem+0xb4>
  403826:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40382a:	b94b      	cbnz	r3, 403840 <quorem+0xb4>
  40382c:	f1a2 0308 	sub.w	r3, r2, #8
  403830:	e002      	b.n	403838 <quorem+0xac>
  403832:	681a      	ldr	r2, [r3, #0]
  403834:	3b04      	subs	r3, #4
  403836:	b91a      	cbnz	r2, 403840 <quorem+0xb4>
  403838:	459a      	cmp	sl, r3
  40383a:	f105 35ff 	add.w	r5, r5, #4294967295
  40383e:	d3f8      	bcc.n	403832 <quorem+0xa6>
  403840:	f8cb 5010 	str.w	r5, [fp, #16]
  403844:	4658      	mov	r0, fp
  403846:	f002 f801 	bl	40584c <__mcmp>
  40384a:	2800      	cmp	r0, #0
  40384c:	db2e      	blt.n	4038ac <quorem+0x120>
  40384e:	f108 0801 	add.w	r8, r8, #1
  403852:	4653      	mov	r3, sl
  403854:	2200      	movs	r2, #0
  403856:	f854 6b04 	ldr.w	r6, [r4], #4
  40385a:	6818      	ldr	r0, [r3, #0]
  40385c:	b2b1      	uxth	r1, r6
  40385e:	1a52      	subs	r2, r2, r1
  403860:	0c36      	lsrs	r6, r6, #16
  403862:	fa12 f180 	uxtah	r1, r2, r0
  403866:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  40386a:	eb02 4221 	add.w	r2, r2, r1, asr #16
  40386e:	b289      	uxth	r1, r1
  403870:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  403874:	45a1      	cmp	r9, r4
  403876:	f843 1b04 	str.w	r1, [r3], #4
  40387a:	ea4f 4222 	mov.w	r2, r2, asr #16
  40387e:	d2ea      	bcs.n	403856 <quorem+0xca>
  403880:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  403884:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  403888:	b982      	cbnz	r2, 4038ac <quorem+0x120>
  40388a:	1f1a      	subs	r2, r3, #4
  40388c:	4592      	cmp	sl, r2
  40388e:	d20b      	bcs.n	4038a8 <quorem+0x11c>
  403890:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403894:	b942      	cbnz	r2, 4038a8 <quorem+0x11c>
  403896:	3b08      	subs	r3, #8
  403898:	e002      	b.n	4038a0 <quorem+0x114>
  40389a:	681a      	ldr	r2, [r3, #0]
  40389c:	3b04      	subs	r3, #4
  40389e:	b91a      	cbnz	r2, 4038a8 <quorem+0x11c>
  4038a0:	459a      	cmp	sl, r3
  4038a2:	f105 35ff 	add.w	r5, r5, #4294967295
  4038a6:	d3f8      	bcc.n	40389a <quorem+0x10e>
  4038a8:	f8cb 5010 	str.w	r5, [fp, #16]
  4038ac:	4640      	mov	r0, r8
  4038ae:	b003      	add	sp, #12
  4038b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038b4:	2000      	movs	r0, #0
  4038b6:	b003      	add	sp, #12
  4038b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038bc:	0000      	movs	r0, r0
	...

004038c0 <_dtoa_r>:
  4038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4038c6:	b09b      	sub	sp, #108	; 0x6c
  4038c8:	4604      	mov	r4, r0
  4038ca:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  4038cc:	4692      	mov	sl, r2
  4038ce:	469b      	mov	fp, r3
  4038d0:	b149      	cbz	r1, 4038e6 <_dtoa_r+0x26>
  4038d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
  4038d4:	604b      	str	r3, [r1, #4]
  4038d6:	2201      	movs	r2, #1
  4038d8:	fa02 f303 	lsl.w	r3, r2, r3
  4038dc:	608b      	str	r3, [r1, #8]
  4038de:	f001 fdbd 	bl	40545c <_Bfree>
  4038e2:	2300      	movs	r3, #0
  4038e4:	6423      	str	r3, [r4, #64]	; 0x40
  4038e6:	f1bb 0f00 	cmp.w	fp, #0
  4038ea:	46d9      	mov	r9, fp
  4038ec:	db33      	blt.n	403956 <_dtoa_r+0x96>
  4038ee:	2300      	movs	r3, #0
  4038f0:	602b      	str	r3, [r5, #0]
  4038f2:	4ba5      	ldr	r3, [pc, #660]	; (403b88 <_dtoa_r+0x2c8>)
  4038f4:	461a      	mov	r2, r3
  4038f6:	ea09 0303 	and.w	r3, r9, r3
  4038fa:	4293      	cmp	r3, r2
  4038fc:	d014      	beq.n	403928 <_dtoa_r+0x68>
  4038fe:	4650      	mov	r0, sl
  403900:	4659      	mov	r1, fp
  403902:	2200      	movs	r2, #0
  403904:	2300      	movs	r3, #0
  403906:	f002 fcdf 	bl	4062c8 <__aeabi_dcmpeq>
  40390a:	4680      	mov	r8, r0
  40390c:	b348      	cbz	r0, 403962 <_dtoa_r+0xa2>
  40390e:	9e26      	ldr	r6, [sp, #152]	; 0x98
  403910:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  403912:	2301      	movs	r3, #1
  403914:	6033      	str	r3, [r6, #0]
  403916:	2d00      	cmp	r5, #0
  403918:	f000 80c9 	beq.w	403aae <_dtoa_r+0x1ee>
  40391c:	489b      	ldr	r0, [pc, #620]	; (403b8c <_dtoa_r+0x2cc>)
  40391e:	6028      	str	r0, [r5, #0]
  403920:	3801      	subs	r0, #1
  403922:	b01b      	add	sp, #108	; 0x6c
  403924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403928:	9d26      	ldr	r5, [sp, #152]	; 0x98
  40392a:	f242 730f 	movw	r3, #9999	; 0x270f
  40392e:	602b      	str	r3, [r5, #0]
  403930:	f1ba 0f00 	cmp.w	sl, #0
  403934:	f000 80a4 	beq.w	403a80 <_dtoa_r+0x1c0>
  403938:	4895      	ldr	r0, [pc, #596]	; (403b90 <_dtoa_r+0x2d0>)
  40393a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  40393c:	2e00      	cmp	r6, #0
  40393e:	d0f0      	beq.n	403922 <_dtoa_r+0x62>
  403940:	78c3      	ldrb	r3, [r0, #3]
  403942:	2b00      	cmp	r3, #0
  403944:	f000 80b5 	beq.w	403ab2 <_dtoa_r+0x1f2>
  403948:	f100 0308 	add.w	r3, r0, #8
  40394c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  40394e:	602b      	str	r3, [r5, #0]
  403950:	b01b      	add	sp, #108	; 0x6c
  403952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403956:	2301      	movs	r3, #1
  403958:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40395c:	602b      	str	r3, [r5, #0]
  40395e:	46cb      	mov	fp, r9
  403960:	e7c7      	b.n	4038f2 <_dtoa_r+0x32>
  403962:	aa19      	add	r2, sp, #100	; 0x64
  403964:	ab18      	add	r3, sp, #96	; 0x60
  403966:	e88d 000c 	stmia.w	sp, {r2, r3}
  40396a:	4620      	mov	r0, r4
  40396c:	4652      	mov	r2, sl
  40396e:	465b      	mov	r3, fp
  403970:	f001 fffa 	bl	405968 <__d2b>
  403974:	ea5f 5519 	movs.w	r5, r9, lsr #20
  403978:	900a      	str	r0, [sp, #40]	; 0x28
  40397a:	f040 808a 	bne.w	403a92 <_dtoa_r+0x1d2>
  40397e:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403980:	9d19      	ldr	r5, [sp, #100]	; 0x64
  403982:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  403986:	443d      	add	r5, r7
  403988:	429d      	cmp	r5, r3
  40398a:	f2c0 8294 	blt.w	403eb6 <_dtoa_r+0x5f6>
  40398e:	331f      	adds	r3, #31
  403990:	f205 4212 	addw	r2, r5, #1042	; 0x412
  403994:	1b5b      	subs	r3, r3, r5
  403996:	fa09 f303 	lsl.w	r3, r9, r3
  40399a:	fa2a f202 	lsr.w	r2, sl, r2
  40399e:	ea43 0002 	orr.w	r0, r3, r2
  4039a2:	f7fe f88f 	bl	401ac4 <__aeabi_ui2d>
  4039a6:	2601      	movs	r6, #1
  4039a8:	3d01      	subs	r5, #1
  4039aa:	46b8      	mov	r8, r7
  4039ac:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4039b0:	9616      	str	r6, [sp, #88]	; 0x58
  4039b2:	2200      	movs	r2, #0
  4039b4:	4b77      	ldr	r3, [pc, #476]	; (403b94 <_dtoa_r+0x2d4>)
  4039b6:	f7fd ff47 	bl	401848 <__aeabi_dsub>
  4039ba:	a36d      	add	r3, pc, #436	; (adr r3, 403b70 <_dtoa_r+0x2b0>)
  4039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039c0:	f7fe f8f6 	bl	401bb0 <__aeabi_dmul>
  4039c4:	a36c      	add	r3, pc, #432	; (adr r3, 403b78 <_dtoa_r+0x2b8>)
  4039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039ca:	f7fd ff3f 	bl	40184c <__adddf3>
  4039ce:	4606      	mov	r6, r0
  4039d0:	4628      	mov	r0, r5
  4039d2:	460f      	mov	r7, r1
  4039d4:	f7fe f886 	bl	401ae4 <__aeabi_i2d>
  4039d8:	a369      	add	r3, pc, #420	; (adr r3, 403b80 <_dtoa_r+0x2c0>)
  4039da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039de:	f7fe f8e7 	bl	401bb0 <__aeabi_dmul>
  4039e2:	4602      	mov	r2, r0
  4039e4:	460b      	mov	r3, r1
  4039e6:	4630      	mov	r0, r6
  4039e8:	4639      	mov	r1, r7
  4039ea:	f7fd ff2f 	bl	40184c <__adddf3>
  4039ee:	4606      	mov	r6, r0
  4039f0:	460f      	mov	r7, r1
  4039f2:	f002 fc9b 	bl	40632c <__aeabi_d2iz>
  4039f6:	4639      	mov	r1, r7
  4039f8:	9007      	str	r0, [sp, #28]
  4039fa:	2200      	movs	r2, #0
  4039fc:	4630      	mov	r0, r6
  4039fe:	2300      	movs	r3, #0
  403a00:	f002 fc6c 	bl	4062dc <__aeabi_dcmplt>
  403a04:	2800      	cmp	r0, #0
  403a06:	f040 8228 	bne.w	403e5a <_dtoa_r+0x59a>
  403a0a:	9e07      	ldr	r6, [sp, #28]
  403a0c:	2e16      	cmp	r6, #22
  403a0e:	f200 8221 	bhi.w	403e54 <_dtoa_r+0x594>
  403a12:	4b61      	ldr	r3, [pc, #388]	; (403b98 <_dtoa_r+0x2d8>)
  403a14:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  403a18:	e9d3 0100 	ldrd	r0, r1, [r3]
  403a1c:	4652      	mov	r2, sl
  403a1e:	465b      	mov	r3, fp
  403a20:	f002 fc7a 	bl	406318 <__aeabi_dcmpgt>
  403a24:	2800      	cmp	r0, #0
  403a26:	f000 824b 	beq.w	403ec0 <_dtoa_r+0x600>
  403a2a:	3e01      	subs	r6, #1
  403a2c:	9607      	str	r6, [sp, #28]
  403a2e:	2600      	movs	r6, #0
  403a30:	960e      	str	r6, [sp, #56]	; 0x38
  403a32:	ebc5 0508 	rsb	r5, r5, r8
  403a36:	3d01      	subs	r5, #1
  403a38:	9506      	str	r5, [sp, #24]
  403a3a:	f100 8225 	bmi.w	403e88 <_dtoa_r+0x5c8>
  403a3e:	2500      	movs	r5, #0
  403a40:	9508      	str	r5, [sp, #32]
  403a42:	9e07      	ldr	r6, [sp, #28]
  403a44:	2e00      	cmp	r6, #0
  403a46:	f2c0 8216 	blt.w	403e76 <_dtoa_r+0x5b6>
  403a4a:	9d06      	ldr	r5, [sp, #24]
  403a4c:	960d      	str	r6, [sp, #52]	; 0x34
  403a4e:	4435      	add	r5, r6
  403a50:	2600      	movs	r6, #0
  403a52:	9506      	str	r5, [sp, #24]
  403a54:	960c      	str	r6, [sp, #48]	; 0x30
  403a56:	9d24      	ldr	r5, [sp, #144]	; 0x90
  403a58:	2d09      	cmp	r5, #9
  403a5a:	d82c      	bhi.n	403ab6 <_dtoa_r+0x1f6>
  403a5c:	2d05      	cmp	r5, #5
  403a5e:	bfc4      	itt	gt
  403a60:	3d04      	subgt	r5, #4
  403a62:	9524      	strgt	r5, [sp, #144]	; 0x90
  403a64:	9e24      	ldr	r6, [sp, #144]	; 0x90
  403a66:	f1a6 0302 	sub.w	r3, r6, #2
  403a6a:	bfcc      	ite	gt
  403a6c:	2500      	movgt	r5, #0
  403a6e:	2501      	movle	r5, #1
  403a70:	2b03      	cmp	r3, #3
  403a72:	d822      	bhi.n	403aba <_dtoa_r+0x1fa>
  403a74:	e8df f013 	tbh	[pc, r3, lsl #1]
  403a78:	029e03b7 	.word	0x029e03b7
  403a7c:	049a03c0 	.word	0x049a03c0
  403a80:	4a46      	ldr	r2, [pc, #280]	; (403b9c <_dtoa_r+0x2dc>)
  403a82:	4b43      	ldr	r3, [pc, #268]	; (403b90 <_dtoa_r+0x2d0>)
  403a84:	f3c9 0013 	ubfx	r0, r9, #0, #20
  403a88:	2800      	cmp	r0, #0
  403a8a:	bf0c      	ite	eq
  403a8c:	4610      	moveq	r0, r2
  403a8e:	4618      	movne	r0, r3
  403a90:	e753      	b.n	40393a <_dtoa_r+0x7a>
  403a92:	f3cb 0313 	ubfx	r3, fp, #0, #20
  403a96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403a9a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  403a9e:	4650      	mov	r0, sl
  403aa0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  403aa4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403aa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  403aac:	e781      	b.n	4039b2 <_dtoa_r+0xf2>
  403aae:	483c      	ldr	r0, [pc, #240]	; (403ba0 <_dtoa_r+0x2e0>)
  403ab0:	e737      	b.n	403922 <_dtoa_r+0x62>
  403ab2:	1cc3      	adds	r3, r0, #3
  403ab4:	e74a      	b.n	40394c <_dtoa_r+0x8c>
  403ab6:	2500      	movs	r5, #0
  403ab8:	9524      	str	r5, [sp, #144]	; 0x90
  403aba:	2500      	movs	r5, #0
  403abc:	6465      	str	r5, [r4, #68]	; 0x44
  403abe:	4629      	mov	r1, r5
  403ac0:	4620      	mov	r0, r4
  403ac2:	f001 fca5 	bl	405410 <_Balloc>
  403ac6:	f04f 39ff 	mov.w	r9, #4294967295
  403aca:	2601      	movs	r6, #1
  403acc:	9009      	str	r0, [sp, #36]	; 0x24
  403ace:	9525      	str	r5, [sp, #148]	; 0x94
  403ad0:	6420      	str	r0, [r4, #64]	; 0x40
  403ad2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403ad6:	960b      	str	r6, [sp, #44]	; 0x2c
  403ad8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ada:	2b00      	cmp	r3, #0
  403adc:	f2c0 80d2 	blt.w	403c84 <_dtoa_r+0x3c4>
  403ae0:	9e07      	ldr	r6, [sp, #28]
  403ae2:	2e0e      	cmp	r6, #14
  403ae4:	f300 80ce 	bgt.w	403c84 <_dtoa_r+0x3c4>
  403ae8:	4b2b      	ldr	r3, [pc, #172]	; (403b98 <_dtoa_r+0x2d8>)
  403aea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  403aee:	e9d3 0100 	ldrd	r0, r1, [r3]
  403af2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403af6:	9925      	ldr	r1, [sp, #148]	; 0x94
  403af8:	2900      	cmp	r1, #0
  403afa:	f2c0 8380 	blt.w	4041fe <_dtoa_r+0x93e>
  403afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403b02:	4659      	mov	r1, fp
  403b04:	4650      	mov	r0, sl
  403b06:	f7fe f97d 	bl	401e04 <__aeabi_ddiv>
  403b0a:	f002 fc0f 	bl	40632c <__aeabi_d2iz>
  403b0e:	4605      	mov	r5, r0
  403b10:	f7fd ffe8 	bl	401ae4 <__aeabi_i2d>
  403b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403b18:	f7fe f84a 	bl	401bb0 <__aeabi_dmul>
  403b1c:	4602      	mov	r2, r0
  403b1e:	460b      	mov	r3, r1
  403b20:	4650      	mov	r0, sl
  403b22:	4659      	mov	r1, fp
  403b24:	f7fd fe90 	bl	401848 <__aeabi_dsub>
  403b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b2a:	f105 0330 	add.w	r3, r5, #48	; 0x30
  403b2e:	f1b9 0f01 	cmp.w	r9, #1
  403b32:	4606      	mov	r6, r0
  403b34:	460f      	mov	r7, r1
  403b36:	7013      	strb	r3, [r2, #0]
  403b38:	f102 0b01 	add.w	fp, r2, #1
  403b3c:	d064      	beq.n	403c08 <_dtoa_r+0x348>
  403b3e:	2200      	movs	r2, #0
  403b40:	4b18      	ldr	r3, [pc, #96]	; (403ba4 <_dtoa_r+0x2e4>)
  403b42:	f7fe f835 	bl	401bb0 <__aeabi_dmul>
  403b46:	2200      	movs	r2, #0
  403b48:	2300      	movs	r3, #0
  403b4a:	4606      	mov	r6, r0
  403b4c:	460f      	mov	r7, r1
  403b4e:	f002 fbbb 	bl	4062c8 <__aeabi_dcmpeq>
  403b52:	2800      	cmp	r0, #0
  403b54:	f040 8081 	bne.w	403c5a <_dtoa_r+0x39a>
  403b58:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  403b5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403b5e:	9403      	str	r4, [sp, #12]
  403b60:	44c8      	add	r8, r9
  403b62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  403b66:	f105 0902 	add.w	r9, r5, #2
  403b6a:	e028      	b.n	403bbe <_dtoa_r+0x2fe>
  403b6c:	f3af 8000 	nop.w
  403b70:	636f4361 	.word	0x636f4361
  403b74:	3fd287a7 	.word	0x3fd287a7
  403b78:	8b60c8b3 	.word	0x8b60c8b3
  403b7c:	3fc68a28 	.word	0x3fc68a28
  403b80:	509f79fb 	.word	0x509f79fb
  403b84:	3fd34413 	.word	0x3fd34413
  403b88:	7ff00000 	.word	0x7ff00000
  403b8c:	00407a49 	.word	0x00407a49
  403b90:	00407a68 	.word	0x00407a68
  403b94:	3ff80000 	.word	0x3ff80000
  403b98:	00407a78 	.word	0x00407a78
  403b9c:	00407a5c 	.word	0x00407a5c
  403ba0:	00407a48 	.word	0x00407a48
  403ba4:	40240000 	.word	0x40240000
  403ba8:	f7fe f802 	bl	401bb0 <__aeabi_dmul>
  403bac:	2200      	movs	r2, #0
  403bae:	2300      	movs	r3, #0
  403bb0:	4606      	mov	r6, r0
  403bb2:	460f      	mov	r7, r1
  403bb4:	f002 fb88 	bl	4062c8 <__aeabi_dcmpeq>
  403bb8:	2800      	cmp	r0, #0
  403bba:	f040 83c1 	bne.w	404340 <_dtoa_r+0xa80>
  403bbe:	4652      	mov	r2, sl
  403bc0:	465b      	mov	r3, fp
  403bc2:	4630      	mov	r0, r6
  403bc4:	4639      	mov	r1, r7
  403bc6:	f7fe f91d 	bl	401e04 <__aeabi_ddiv>
  403bca:	f002 fbaf 	bl	40632c <__aeabi_d2iz>
  403bce:	4605      	mov	r5, r0
  403bd0:	f7fd ff88 	bl	401ae4 <__aeabi_i2d>
  403bd4:	4652      	mov	r2, sl
  403bd6:	465b      	mov	r3, fp
  403bd8:	f7fd ffea 	bl	401bb0 <__aeabi_dmul>
  403bdc:	4602      	mov	r2, r0
  403bde:	460b      	mov	r3, r1
  403be0:	4630      	mov	r0, r6
  403be2:	4639      	mov	r1, r7
  403be4:	f7fd fe30 	bl	401848 <__aeabi_dsub>
  403be8:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  403bec:	45c1      	cmp	r9, r8
  403bee:	f809 ec01 	strb.w	lr, [r9, #-1]
  403bf2:	464c      	mov	r4, r9
  403bf4:	4606      	mov	r6, r0
  403bf6:	460f      	mov	r7, r1
  403bf8:	f04f 0200 	mov.w	r2, #0
  403bfc:	4ba7      	ldr	r3, [pc, #668]	; (403e9c <_dtoa_r+0x5dc>)
  403bfe:	f109 0901 	add.w	r9, r9, #1
  403c02:	d1d1      	bne.n	403ba8 <_dtoa_r+0x2e8>
  403c04:	46a3      	mov	fp, r4
  403c06:	9c03      	ldr	r4, [sp, #12]
  403c08:	4632      	mov	r2, r6
  403c0a:	463b      	mov	r3, r7
  403c0c:	4630      	mov	r0, r6
  403c0e:	4639      	mov	r1, r7
  403c10:	f7fd fe1c 	bl	40184c <__adddf3>
  403c14:	4606      	mov	r6, r0
  403c16:	460f      	mov	r7, r1
  403c18:	4632      	mov	r2, r6
  403c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403c1e:	463b      	mov	r3, r7
  403c20:	f002 fb5c 	bl	4062dc <__aeabi_dcmplt>
  403c24:	b940      	cbnz	r0, 403c38 <_dtoa_r+0x378>
  403c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403c2a:	4632      	mov	r2, r6
  403c2c:	463b      	mov	r3, r7
  403c2e:	f002 fb4b 	bl	4062c8 <__aeabi_dcmpeq>
  403c32:	b190      	cbz	r0, 403c5a <_dtoa_r+0x39a>
  403c34:	07eb      	lsls	r3, r5, #31
  403c36:	d510      	bpl.n	403c5a <_dtoa_r+0x39a>
  403c38:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  403c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403c3e:	e005      	b.n	403c4c <_dtoa_r+0x38c>
  403c40:	429a      	cmp	r2, r3
  403c42:	f000 8428 	beq.w	404496 <_dtoa_r+0xbd6>
  403c46:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  403c4a:	469b      	mov	fp, r3
  403c4c:	2d39      	cmp	r5, #57	; 0x39
  403c4e:	f10b 33ff 	add.w	r3, fp, #4294967295
  403c52:	d0f5      	beq.n	403c40 <_dtoa_r+0x380>
  403c54:	1c6a      	adds	r2, r5, #1
  403c56:	b2d2      	uxtb	r2, r2
  403c58:	701a      	strb	r2, [r3, #0]
  403c5a:	4620      	mov	r0, r4
  403c5c:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c5e:	f001 fbfd 	bl	40545c <_Bfree>
  403c62:	9e07      	ldr	r6, [sp, #28]
  403c64:	9d26      	ldr	r5, [sp, #152]	; 0x98
  403c66:	1c73      	adds	r3, r6, #1
  403c68:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  403c6a:	2200      	movs	r2, #0
  403c6c:	f88b 2000 	strb.w	r2, [fp]
  403c70:	602b      	str	r3, [r5, #0]
  403c72:	2e00      	cmp	r6, #0
  403c74:	f000 8325 	beq.w	4042c2 <_dtoa_r+0xa02>
  403c78:	9809      	ldr	r0, [sp, #36]	; 0x24
  403c7a:	f8c6 b000 	str.w	fp, [r6]
  403c7e:	b01b      	add	sp, #108	; 0x6c
  403c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403c86:	2d00      	cmp	r5, #0
  403c88:	f000 8103 	beq.w	403e92 <_dtoa_r+0x5d2>
  403c8c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  403c8e:	2e01      	cmp	r6, #1
  403c90:	f340 82dc 	ble.w	40424c <_dtoa_r+0x98c>
  403c94:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  403c96:	f109 37ff 	add.w	r7, r9, #4294967295
  403c9a:	42be      	cmp	r6, r7
  403c9c:	f2c0 8389 	blt.w	4043b2 <_dtoa_r+0xaf2>
  403ca0:	1bf7      	subs	r7, r6, r7
  403ca2:	f1b9 0f00 	cmp.w	r9, #0
  403ca6:	f2c0 8486 	blt.w	4045b6 <_dtoa_r+0xcf6>
  403caa:	9d08      	ldr	r5, [sp, #32]
  403cac:	464b      	mov	r3, r9
  403cae:	9e08      	ldr	r6, [sp, #32]
  403cb0:	441e      	add	r6, r3
  403cb2:	9608      	str	r6, [sp, #32]
  403cb4:	9e06      	ldr	r6, [sp, #24]
  403cb6:	4620      	mov	r0, r4
  403cb8:	441e      	add	r6, r3
  403cba:	2101      	movs	r1, #1
  403cbc:	9606      	str	r6, [sp, #24]
  403cbe:	f001 fc71 	bl	4055a4 <__i2b>
  403cc2:	4606      	mov	r6, r0
  403cc4:	b165      	cbz	r5, 403ce0 <_dtoa_r+0x420>
  403cc6:	9806      	ldr	r0, [sp, #24]
  403cc8:	2800      	cmp	r0, #0
  403cca:	dd09      	ble.n	403ce0 <_dtoa_r+0x420>
  403ccc:	4603      	mov	r3, r0
  403cce:	9908      	ldr	r1, [sp, #32]
  403cd0:	42ab      	cmp	r3, r5
  403cd2:	bfa8      	it	ge
  403cd4:	462b      	movge	r3, r5
  403cd6:	1ac9      	subs	r1, r1, r3
  403cd8:	1ac0      	subs	r0, r0, r3
  403cda:	9108      	str	r1, [sp, #32]
  403cdc:	1aed      	subs	r5, r5, r3
  403cde:	9006      	str	r0, [sp, #24]
  403ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403ce2:	2a00      	cmp	r2, #0
  403ce4:	dd1d      	ble.n	403d22 <_dtoa_r+0x462>
  403ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ce8:	2b00      	cmp	r3, #0
  403cea:	f000 8358 	beq.w	40439e <_dtoa_r+0xade>
  403cee:	2f00      	cmp	r7, #0
  403cf0:	dd11      	ble.n	403d16 <_dtoa_r+0x456>
  403cf2:	4631      	mov	r1, r6
  403cf4:	463a      	mov	r2, r7
  403cf6:	4620      	mov	r0, r4
  403cf8:	f001 fcfc 	bl	4056f4 <__pow5mult>
  403cfc:	4606      	mov	r6, r0
  403cfe:	4631      	mov	r1, r6
  403d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403d02:	4620      	mov	r0, r4
  403d04:	f001 fc58 	bl	4055b8 <__multiply>
  403d08:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d0a:	4680      	mov	r8, r0
  403d0c:	4620      	mov	r0, r4
  403d0e:	f001 fba5 	bl	40545c <_Bfree>
  403d12:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  403d16:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  403d1a:	ebbe 0207 	subs.w	r2, lr, r7
  403d1e:	f040 828f 	bne.w	404240 <_dtoa_r+0x980>
  403d22:	4620      	mov	r0, r4
  403d24:	2101      	movs	r1, #1
  403d26:	f001 fc3d 	bl	4055a4 <__i2b>
  403d2a:	4680      	mov	r8, r0
  403d2c:	980d      	ldr	r0, [sp, #52]	; 0x34
  403d2e:	2800      	cmp	r0, #0
  403d30:	dd05      	ble.n	403d3e <_dtoa_r+0x47e>
  403d32:	4641      	mov	r1, r8
  403d34:	4620      	mov	r0, r4
  403d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403d38:	f001 fcdc 	bl	4056f4 <__pow5mult>
  403d3c:	4680      	mov	r8, r0
  403d3e:	9924      	ldr	r1, [sp, #144]	; 0x90
  403d40:	2901      	cmp	r1, #1
  403d42:	f340 82c1 	ble.w	4042c8 <_dtoa_r+0xa08>
  403d46:	2700      	movs	r7, #0
  403d48:	980d      	ldr	r0, [sp, #52]	; 0x34
  403d4a:	2800      	cmp	r0, #0
  403d4c:	f040 82af 	bne.w	4042ae <_dtoa_r+0x9ee>
  403d50:	2001      	movs	r0, #1
  403d52:	9b06      	ldr	r3, [sp, #24]
  403d54:	4403      	add	r3, r0
  403d56:	f013 031f 	ands.w	r3, r3, #31
  403d5a:	f000 80a1 	beq.w	403ea0 <_dtoa_r+0x5e0>
  403d5e:	f1c3 0220 	rsb	r2, r3, #32
  403d62:	2a04      	cmp	r2, #4
  403d64:	f340 84b5 	ble.w	4046d2 <_dtoa_r+0xe12>
  403d68:	9908      	ldr	r1, [sp, #32]
  403d6a:	9a06      	ldr	r2, [sp, #24]
  403d6c:	f1c3 031c 	rsb	r3, r3, #28
  403d70:	4419      	add	r1, r3
  403d72:	441a      	add	r2, r3
  403d74:	9108      	str	r1, [sp, #32]
  403d76:	441d      	add	r5, r3
  403d78:	9206      	str	r2, [sp, #24]
  403d7a:	9908      	ldr	r1, [sp, #32]
  403d7c:	2900      	cmp	r1, #0
  403d7e:	dd05      	ble.n	403d8c <_dtoa_r+0x4cc>
  403d80:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d82:	9a08      	ldr	r2, [sp, #32]
  403d84:	4620      	mov	r0, r4
  403d86:	f001 fd03 	bl	405790 <__lshift>
  403d8a:	900a      	str	r0, [sp, #40]	; 0x28
  403d8c:	9a06      	ldr	r2, [sp, #24]
  403d8e:	2a00      	cmp	r2, #0
  403d90:	dd04      	ble.n	403d9c <_dtoa_r+0x4dc>
  403d92:	4641      	mov	r1, r8
  403d94:	4620      	mov	r0, r4
  403d96:	f001 fcfb 	bl	405790 <__lshift>
  403d9a:	4680      	mov	r8, r0
  403d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403d9e:	2b00      	cmp	r3, #0
  403da0:	f040 826a 	bne.w	404278 <_dtoa_r+0x9b8>
  403da4:	f1b9 0f00 	cmp.w	r9, #0
  403da8:	f340 82a6 	ble.w	4042f8 <_dtoa_r+0xa38>
  403dac:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403dae:	2800      	cmp	r0, #0
  403db0:	f040 8088 	bne.w	403ec4 <_dtoa_r+0x604>
  403db4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403db6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403db8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  403dbc:	e006      	b.n	403dcc <_dtoa_r+0x50c>
  403dbe:	4639      	mov	r1, r7
  403dc0:	4620      	mov	r0, r4
  403dc2:	220a      	movs	r2, #10
  403dc4:	2300      	movs	r3, #0
  403dc6:	f001 fb53 	bl	405470 <__multadd>
  403dca:	4607      	mov	r7, r0
  403dcc:	4638      	mov	r0, r7
  403dce:	4641      	mov	r1, r8
  403dd0:	f7ff fcdc 	bl	40378c <quorem>
  403dd4:	3030      	adds	r0, #48	; 0x30
  403dd6:	f80b 0005 	strb.w	r0, [fp, r5]
  403dda:	3501      	adds	r5, #1
  403ddc:	45a9      	cmp	r9, r5
  403dde:	dcee      	bgt.n	403dbe <_dtoa_r+0x4fe>
  403de0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  403de4:	970a      	str	r7, [sp, #40]	; 0x28
  403de6:	4682      	mov	sl, r0
  403de8:	f1b9 0f01 	cmp.w	r9, #1
  403dec:	bfac      	ite	ge
  403dee:	44cb      	addge	fp, r9
  403df0:	f10b 0b01 	addlt.w	fp, fp, #1
  403df4:	2500      	movs	r5, #0
  403df6:	990a      	ldr	r1, [sp, #40]	; 0x28
  403df8:	2201      	movs	r2, #1
  403dfa:	4620      	mov	r0, r4
  403dfc:	f001 fcc8 	bl	405790 <__lshift>
  403e00:	4641      	mov	r1, r8
  403e02:	900a      	str	r0, [sp, #40]	; 0x28
  403e04:	f001 fd22 	bl	40584c <__mcmp>
  403e08:	2800      	cmp	r0, #0
  403e0a:	f340 8309 	ble.w	404420 <_dtoa_r+0xb60>
  403e0e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  403e12:	9909      	ldr	r1, [sp, #36]	; 0x24
  403e14:	e005      	b.n	403e22 <_dtoa_r+0x562>
  403e16:	4299      	cmp	r1, r3
  403e18:	f000 828b 	beq.w	404332 <_dtoa_r+0xa72>
  403e1c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  403e20:	469b      	mov	fp, r3
  403e22:	2a39      	cmp	r2, #57	; 0x39
  403e24:	f10b 33ff 	add.w	r3, fp, #4294967295
  403e28:	d0f5      	beq.n	403e16 <_dtoa_r+0x556>
  403e2a:	3201      	adds	r2, #1
  403e2c:	701a      	strb	r2, [r3, #0]
  403e2e:	4641      	mov	r1, r8
  403e30:	4620      	mov	r0, r4
  403e32:	f001 fb13 	bl	40545c <_Bfree>
  403e36:	2e00      	cmp	r6, #0
  403e38:	f43f af0f 	beq.w	403c5a <_dtoa_r+0x39a>
  403e3c:	b12d      	cbz	r5, 403e4a <_dtoa_r+0x58a>
  403e3e:	42b5      	cmp	r5, r6
  403e40:	d003      	beq.n	403e4a <_dtoa_r+0x58a>
  403e42:	4629      	mov	r1, r5
  403e44:	4620      	mov	r0, r4
  403e46:	f001 fb09 	bl	40545c <_Bfree>
  403e4a:	4631      	mov	r1, r6
  403e4c:	4620      	mov	r0, r4
  403e4e:	f001 fb05 	bl	40545c <_Bfree>
  403e52:	e702      	b.n	403c5a <_dtoa_r+0x39a>
  403e54:	2601      	movs	r6, #1
  403e56:	960e      	str	r6, [sp, #56]	; 0x38
  403e58:	e5eb      	b.n	403a32 <_dtoa_r+0x172>
  403e5a:	9807      	ldr	r0, [sp, #28]
  403e5c:	f7fd fe42 	bl	401ae4 <__aeabi_i2d>
  403e60:	4632      	mov	r2, r6
  403e62:	463b      	mov	r3, r7
  403e64:	f002 fa30 	bl	4062c8 <__aeabi_dcmpeq>
  403e68:	2800      	cmp	r0, #0
  403e6a:	f47f adce 	bne.w	403a0a <_dtoa_r+0x14a>
  403e6e:	9e07      	ldr	r6, [sp, #28]
  403e70:	3e01      	subs	r6, #1
  403e72:	9607      	str	r6, [sp, #28]
  403e74:	e5c9      	b.n	403a0a <_dtoa_r+0x14a>
  403e76:	9e07      	ldr	r6, [sp, #28]
  403e78:	9d08      	ldr	r5, [sp, #32]
  403e7a:	1bad      	subs	r5, r5, r6
  403e7c:	9508      	str	r5, [sp, #32]
  403e7e:	4275      	negs	r5, r6
  403e80:	2600      	movs	r6, #0
  403e82:	950c      	str	r5, [sp, #48]	; 0x30
  403e84:	960d      	str	r6, [sp, #52]	; 0x34
  403e86:	e5e6      	b.n	403a56 <_dtoa_r+0x196>
  403e88:	426d      	negs	r5, r5
  403e8a:	2600      	movs	r6, #0
  403e8c:	9508      	str	r5, [sp, #32]
  403e8e:	9606      	str	r6, [sp, #24]
  403e90:	e5d7      	b.n	403a42 <_dtoa_r+0x182>
  403e92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403e94:	9d08      	ldr	r5, [sp, #32]
  403e96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403e98:	e714      	b.n	403cc4 <_dtoa_r+0x404>
  403e9a:	bf00      	nop
  403e9c:	40240000 	.word	0x40240000
  403ea0:	231c      	movs	r3, #28
  403ea2:	f8dd e020 	ldr.w	lr, [sp, #32]
  403ea6:	9806      	ldr	r0, [sp, #24]
  403ea8:	449e      	add	lr, r3
  403eaa:	4418      	add	r0, r3
  403eac:	f8cd e020 	str.w	lr, [sp, #32]
  403eb0:	441d      	add	r5, r3
  403eb2:	9006      	str	r0, [sp, #24]
  403eb4:	e761      	b.n	403d7a <_dtoa_r+0x4ba>
  403eb6:	48a7      	ldr	r0, [pc, #668]	; (404154 <_dtoa_r+0x894>)
  403eb8:	1b40      	subs	r0, r0, r5
  403eba:	fa0a f000 	lsl.w	r0, sl, r0
  403ebe:	e570      	b.n	4039a2 <_dtoa_r+0xe2>
  403ec0:	900e      	str	r0, [sp, #56]	; 0x38
  403ec2:	e5b6      	b.n	403a32 <_dtoa_r+0x172>
  403ec4:	2d00      	cmp	r5, #0
  403ec6:	dd05      	ble.n	403ed4 <_dtoa_r+0x614>
  403ec8:	4631      	mov	r1, r6
  403eca:	462a      	mov	r2, r5
  403ecc:	4620      	mov	r0, r4
  403ece:	f001 fc5f 	bl	405790 <__lshift>
  403ed2:	4606      	mov	r6, r0
  403ed4:	2f00      	cmp	r7, #0
  403ed6:	f040 82e8 	bne.w	4044aa <_dtoa_r+0xbea>
  403eda:	4637      	mov	r7, r6
  403edc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403ede:	9809      	ldr	r0, [sp, #36]	; 0x24
  403ee0:	444d      	add	r5, r9
  403ee2:	9508      	str	r5, [sp, #32]
  403ee4:	f00a 0501 	and.w	r5, sl, #1
  403ee8:	950b      	str	r5, [sp, #44]	; 0x2c
  403eea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  403eee:	1c45      	adds	r5, r0, #1
  403ef0:	e00a      	b.n	403f08 <_dtoa_r+0x648>
  403ef2:	f001 fabd 	bl	405470 <__multadd>
  403ef6:	4639      	mov	r1, r7
  403ef8:	4606      	mov	r6, r0
  403efa:	220a      	movs	r2, #10
  403efc:	4620      	mov	r0, r4
  403efe:	2300      	movs	r3, #0
  403f00:	f001 fab6 	bl	405470 <__multadd>
  403f04:	4607      	mov	r7, r0
  403f06:	3501      	adds	r5, #1
  403f08:	4641      	mov	r1, r8
  403f0a:	4648      	mov	r0, r9
  403f0c:	f7ff fc3e 	bl	40378c <quorem>
  403f10:	4631      	mov	r1, r6
  403f12:	4683      	mov	fp, r0
  403f14:	4648      	mov	r0, r9
  403f16:	f001 fc99 	bl	40584c <__mcmp>
  403f1a:	4641      	mov	r1, r8
  403f1c:	9003      	str	r0, [sp, #12]
  403f1e:	463a      	mov	r2, r7
  403f20:	4620      	mov	r0, r4
  403f22:	f001 fcb7 	bl	405894 <__mdiff>
  403f26:	68c2      	ldr	r2, [r0, #12]
  403f28:	1e69      	subs	r1, r5, #1
  403f2a:	4603      	mov	r3, r0
  403f2c:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  403f30:	9106      	str	r1, [sp, #24]
  403f32:	2a00      	cmp	r2, #0
  403f34:	f040 8193 	bne.w	40425e <_dtoa_r+0x99e>
  403f38:	4619      	mov	r1, r3
  403f3a:	4648      	mov	r0, r9
  403f3c:	9302      	str	r3, [sp, #8]
  403f3e:	f001 fc85 	bl	40584c <__mcmp>
  403f42:	9b02      	ldr	r3, [sp, #8]
  403f44:	4602      	mov	r2, r0
  403f46:	4619      	mov	r1, r3
  403f48:	4620      	mov	r0, r4
  403f4a:	9202      	str	r2, [sp, #8]
  403f4c:	f001 fa86 	bl	40545c <_Bfree>
  403f50:	9a02      	ldr	r2, [sp, #8]
  403f52:	b92a      	cbnz	r2, 403f60 <_dtoa_r+0x6a0>
  403f54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f56:	b91b      	cbnz	r3, 403f60 <_dtoa_r+0x6a0>
  403f58:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403f5a:	2800      	cmp	r0, #0
  403f5c:	f000 8391 	beq.w	404682 <_dtoa_r+0xdc2>
  403f60:	9b03      	ldr	r3, [sp, #12]
  403f62:	2b00      	cmp	r3, #0
  403f64:	f2c0 8234 	blt.w	4043d0 <_dtoa_r+0xb10>
  403f68:	d105      	bne.n	403f76 <_dtoa_r+0x6b6>
  403f6a:	9824      	ldr	r0, [sp, #144]	; 0x90
  403f6c:	b918      	cbnz	r0, 403f76 <_dtoa_r+0x6b6>
  403f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403f70:	2900      	cmp	r1, #0
  403f72:	f000 822d 	beq.w	4043d0 <_dtoa_r+0xb10>
  403f76:	2a00      	cmp	r2, #0
  403f78:	f300 82ab 	bgt.w	4044d2 <_dtoa_r+0xc12>
  403f7c:	f8dd e020 	ldr.w	lr, [sp, #32]
  403f80:	f805 ac01 	strb.w	sl, [r5, #-1]
  403f84:	4575      	cmp	r5, lr
  403f86:	46ab      	mov	fp, r5
  403f88:	f000 82b3 	beq.w	4044f2 <_dtoa_r+0xc32>
  403f8c:	4649      	mov	r1, r9
  403f8e:	220a      	movs	r2, #10
  403f90:	2300      	movs	r3, #0
  403f92:	4620      	mov	r0, r4
  403f94:	f001 fa6c 	bl	405470 <__multadd>
  403f98:	42be      	cmp	r6, r7
  403f9a:	4681      	mov	r9, r0
  403f9c:	4631      	mov	r1, r6
  403f9e:	4620      	mov	r0, r4
  403fa0:	f04f 020a 	mov.w	r2, #10
  403fa4:	f04f 0300 	mov.w	r3, #0
  403fa8:	d1a3      	bne.n	403ef2 <_dtoa_r+0x632>
  403faa:	f001 fa61 	bl	405470 <__multadd>
  403fae:	4606      	mov	r6, r0
  403fb0:	4607      	mov	r7, r0
  403fb2:	e7a8      	b.n	403f06 <_dtoa_r+0x646>
  403fb4:	2600      	movs	r6, #0
  403fb6:	960b      	str	r6, [sp, #44]	; 0x2c
  403fb8:	9e07      	ldr	r6, [sp, #28]
  403fba:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  403fbe:	44b6      	add	lr, r6
  403fc0:	f10e 0901 	add.w	r9, lr, #1
  403fc4:	f1b9 0f00 	cmp.w	r9, #0
  403fc8:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  403fcc:	464e      	mov	r6, r9
  403fce:	f340 8150 	ble.w	404272 <_dtoa_r+0x9b2>
  403fd2:	2100      	movs	r1, #0
  403fd4:	2e17      	cmp	r6, #23
  403fd6:	6461      	str	r1, [r4, #68]	; 0x44
  403fd8:	d90a      	bls.n	403ff0 <_dtoa_r+0x730>
  403fda:	2201      	movs	r2, #1
  403fdc:	2304      	movs	r3, #4
  403fde:	005b      	lsls	r3, r3, #1
  403fe0:	f103 0014 	add.w	r0, r3, #20
  403fe4:	42b0      	cmp	r0, r6
  403fe6:	4611      	mov	r1, r2
  403fe8:	f102 0201 	add.w	r2, r2, #1
  403fec:	d9f7      	bls.n	403fde <_dtoa_r+0x71e>
  403fee:	6461      	str	r1, [r4, #68]	; 0x44
  403ff0:	4620      	mov	r0, r4
  403ff2:	f001 fa0d 	bl	405410 <_Balloc>
  403ff6:	2e0e      	cmp	r6, #14
  403ff8:	9009      	str	r0, [sp, #36]	; 0x24
  403ffa:	6420      	str	r0, [r4, #64]	; 0x40
  403ffc:	f63f ad6c 	bhi.w	403ad8 <_dtoa_r+0x218>
  404000:	2d00      	cmp	r5, #0
  404002:	f43f ad69 	beq.w	403ad8 <_dtoa_r+0x218>
  404006:	9d07      	ldr	r5, [sp, #28]
  404008:	2d00      	cmp	r5, #0
  40400a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  40400e:	f340 821b 	ble.w	404448 <_dtoa_r+0xb88>
  404012:	4b51      	ldr	r3, [pc, #324]	; (404158 <_dtoa_r+0x898>)
  404014:	f005 020f 	and.w	r2, r5, #15
  404018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40401c:	112d      	asrs	r5, r5, #4
  40401e:	e9d3 6700 	ldrd	r6, r7, [r3]
  404022:	06eb      	lsls	r3, r5, #27
  404024:	f140 81cd 	bpl.w	4043c2 <_dtoa_r+0xb02>
  404028:	4b4c      	ldr	r3, [pc, #304]	; (40415c <_dtoa_r+0x89c>)
  40402a:	4650      	mov	r0, sl
  40402c:	4659      	mov	r1, fp
  40402e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404032:	f7fd fee7 	bl	401e04 <__aeabi_ddiv>
  404036:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40403a:	f005 050f 	and.w	r5, r5, #15
  40403e:	f04f 0803 	mov.w	r8, #3
  404042:	b18d      	cbz	r5, 404068 <_dtoa_r+0x7a8>
  404044:	f8df a114 	ldr.w	sl, [pc, #276]	; 40415c <_dtoa_r+0x89c>
  404048:	4630      	mov	r0, r6
  40404a:	4639      	mov	r1, r7
  40404c:	07ee      	lsls	r6, r5, #31
  40404e:	d505      	bpl.n	40405c <_dtoa_r+0x79c>
  404050:	e9da 2300 	ldrd	r2, r3, [sl]
  404054:	f108 0801 	add.w	r8, r8, #1
  404058:	f7fd fdaa 	bl	401bb0 <__aeabi_dmul>
  40405c:	106d      	asrs	r5, r5, #1
  40405e:	f10a 0a08 	add.w	sl, sl, #8
  404062:	d1f3      	bne.n	40404c <_dtoa_r+0x78c>
  404064:	4606      	mov	r6, r0
  404066:	460f      	mov	r7, r1
  404068:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40406c:	4632      	mov	r2, r6
  40406e:	463b      	mov	r3, r7
  404070:	f7fd fec8 	bl	401e04 <__aeabi_ddiv>
  404074:	4682      	mov	sl, r0
  404076:	468b      	mov	fp, r1
  404078:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40407a:	b145      	cbz	r5, 40408e <_dtoa_r+0x7ce>
  40407c:	4650      	mov	r0, sl
  40407e:	4659      	mov	r1, fp
  404080:	2200      	movs	r2, #0
  404082:	4b37      	ldr	r3, [pc, #220]	; (404160 <_dtoa_r+0x8a0>)
  404084:	f002 f92a 	bl	4062dc <__aeabi_dcmplt>
  404088:	2800      	cmp	r0, #0
  40408a:	f040 82a9 	bne.w	4045e0 <_dtoa_r+0xd20>
  40408e:	4640      	mov	r0, r8
  404090:	f7fd fd28 	bl	401ae4 <__aeabi_i2d>
  404094:	4652      	mov	r2, sl
  404096:	465b      	mov	r3, fp
  404098:	f7fd fd8a 	bl	401bb0 <__aeabi_dmul>
  40409c:	2200      	movs	r2, #0
  40409e:	4b31      	ldr	r3, [pc, #196]	; (404164 <_dtoa_r+0x8a4>)
  4040a0:	f7fd fbd4 	bl	40184c <__adddf3>
  4040a4:	4606      	mov	r6, r0
  4040a6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4040aa:	f1b9 0f00 	cmp.w	r9, #0
  4040ae:	f000 815a 	beq.w	404366 <_dtoa_r+0xaa6>
  4040b2:	9d07      	ldr	r5, [sp, #28]
  4040b4:	9517      	str	r5, [sp, #92]	; 0x5c
  4040b6:	46c8      	mov	r8, r9
  4040b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4040ba:	2d00      	cmp	r5, #0
  4040bc:	f000 8222 	beq.w	404504 <_dtoa_r+0xc44>
  4040c0:	4b25      	ldr	r3, [pc, #148]	; (404158 <_dtoa_r+0x898>)
  4040c2:	4929      	ldr	r1, [pc, #164]	; (404168 <_dtoa_r+0x8a8>)
  4040c4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4040c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4040cc:	2000      	movs	r0, #0
  4040ce:	f7fd fe99 	bl	401e04 <__aeabi_ddiv>
  4040d2:	4632      	mov	r2, r6
  4040d4:	463b      	mov	r3, r7
  4040d6:	f7fd fbb7 	bl	401848 <__aeabi_dsub>
  4040da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4040de:	4659      	mov	r1, fp
  4040e0:	4650      	mov	r0, sl
  4040e2:	f002 f923 	bl	40632c <__aeabi_d2iz>
  4040e6:	4605      	mov	r5, r0
  4040e8:	f7fd fcfc 	bl	401ae4 <__aeabi_i2d>
  4040ec:	4602      	mov	r2, r0
  4040ee:	460b      	mov	r3, r1
  4040f0:	4650      	mov	r0, sl
  4040f2:	4659      	mov	r1, fp
  4040f4:	f7fd fba8 	bl	401848 <__aeabi_dsub>
  4040f8:	3530      	adds	r5, #48	; 0x30
  4040fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4040fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404100:	b2ed      	uxtb	r5, r5
  404102:	7035      	strb	r5, [r6, #0]
  404104:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  404108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40410c:	f106 0b01 	add.w	fp, r6, #1
  404110:	f002 f902 	bl	406318 <__aeabi_dcmpgt>
  404114:	2800      	cmp	r0, #0
  404116:	f040 82a9 	bne.w	40466c <_dtoa_r+0xdac>
  40411a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40411e:	2000      	movs	r0, #0
  404120:	490f      	ldr	r1, [pc, #60]	; (404160 <_dtoa_r+0x8a0>)
  404122:	f7fd fb91 	bl	401848 <__aeabi_dsub>
  404126:	4602      	mov	r2, r0
  404128:	460b      	mov	r3, r1
  40412a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40412e:	f002 f8f3 	bl	406318 <__aeabi_dcmpgt>
  404132:	2800      	cmp	r0, #0
  404134:	f040 82a0 	bne.w	404678 <_dtoa_r+0xdb8>
  404138:	f1b8 0f01 	cmp.w	r8, #1
  40413c:	f340 8180 	ble.w	404440 <_dtoa_r+0xb80>
  404140:	44b0      	add	r8, r6
  404142:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  404146:	46a2      	mov	sl, r4
  404148:	46c1      	mov	r9, r8
  40414a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40414e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  404152:	e019      	b.n	404188 <_dtoa_r+0x8c8>
  404154:	fffffbee 	.word	0xfffffbee
  404158:	00407a78 	.word	0x00407a78
  40415c:	00407b40 	.word	0x00407b40
  404160:	3ff00000 	.word	0x3ff00000
  404164:	401c0000 	.word	0x401c0000
  404168:	3fe00000 	.word	0x3fe00000
  40416c:	2000      	movs	r0, #0
  40416e:	49a8      	ldr	r1, [pc, #672]	; (404410 <_dtoa_r+0xb50>)
  404170:	f7fd fb6a 	bl	401848 <__aeabi_dsub>
  404174:	4622      	mov	r2, r4
  404176:	462b      	mov	r3, r5
  404178:	f002 f8b0 	bl	4062dc <__aeabi_dcmplt>
  40417c:	2800      	cmp	r0, #0
  40417e:	f040 8279 	bne.w	404674 <_dtoa_r+0xdb4>
  404182:	45cb      	cmp	fp, r9
  404184:	f000 8159 	beq.w	40443a <_dtoa_r+0xb7a>
  404188:	4620      	mov	r0, r4
  40418a:	4629      	mov	r1, r5
  40418c:	2200      	movs	r2, #0
  40418e:	4ba1      	ldr	r3, [pc, #644]	; (404414 <_dtoa_r+0xb54>)
  404190:	f7fd fd0e 	bl	401bb0 <__aeabi_dmul>
  404194:	2200      	movs	r2, #0
  404196:	4b9f      	ldr	r3, [pc, #636]	; (404414 <_dtoa_r+0xb54>)
  404198:	4604      	mov	r4, r0
  40419a:	460d      	mov	r5, r1
  40419c:	4630      	mov	r0, r6
  40419e:	4639      	mov	r1, r7
  4041a0:	f7fd fd06 	bl	401bb0 <__aeabi_dmul>
  4041a4:	460f      	mov	r7, r1
  4041a6:	4606      	mov	r6, r0
  4041a8:	f002 f8c0 	bl	40632c <__aeabi_d2iz>
  4041ac:	4680      	mov	r8, r0
  4041ae:	f7fd fc99 	bl	401ae4 <__aeabi_i2d>
  4041b2:	4602      	mov	r2, r0
  4041b4:	460b      	mov	r3, r1
  4041b6:	4630      	mov	r0, r6
  4041b8:	4639      	mov	r1, r7
  4041ba:	f7fd fb45 	bl	401848 <__aeabi_dsub>
  4041be:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4041c2:	fa5f f888 	uxtb.w	r8, r8
  4041c6:	4622      	mov	r2, r4
  4041c8:	462b      	mov	r3, r5
  4041ca:	f80b 8b01 	strb.w	r8, [fp], #1
  4041ce:	4606      	mov	r6, r0
  4041d0:	460f      	mov	r7, r1
  4041d2:	f002 f883 	bl	4062dc <__aeabi_dcmplt>
  4041d6:	4632      	mov	r2, r6
  4041d8:	463b      	mov	r3, r7
  4041da:	2800      	cmp	r0, #0
  4041dc:	d0c6      	beq.n	40416c <_dtoa_r+0x8ac>
  4041de:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4041e0:	9607      	str	r6, [sp, #28]
  4041e2:	4654      	mov	r4, sl
  4041e4:	e539      	b.n	403c5a <_dtoa_r+0x39a>
  4041e6:	2600      	movs	r6, #0
  4041e8:	960b      	str	r6, [sp, #44]	; 0x2c
  4041ea:	9825      	ldr	r0, [sp, #148]	; 0x94
  4041ec:	2800      	cmp	r0, #0
  4041ee:	dd3c      	ble.n	40426a <_dtoa_r+0x9aa>
  4041f0:	4606      	mov	r6, r0
  4041f2:	900f      	str	r0, [sp, #60]	; 0x3c
  4041f4:	4681      	mov	r9, r0
  4041f6:	e6ec      	b.n	403fd2 <_dtoa_r+0x712>
  4041f8:	2601      	movs	r6, #1
  4041fa:	960b      	str	r6, [sp, #44]	; 0x2c
  4041fc:	e7f5      	b.n	4041ea <_dtoa_r+0x92a>
  4041fe:	f1b9 0f00 	cmp.w	r9, #0
  404202:	f73f ac7c 	bgt.w	403afe <_dtoa_r+0x23e>
  404206:	f040 80c6 	bne.w	404396 <_dtoa_r+0xad6>
  40420a:	2200      	movs	r2, #0
  40420c:	4b82      	ldr	r3, [pc, #520]	; (404418 <_dtoa_r+0xb58>)
  40420e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404212:	f7fd fccd 	bl	401bb0 <__aeabi_dmul>
  404216:	4652      	mov	r2, sl
  404218:	465b      	mov	r3, fp
  40421a:	f002 f873 	bl	406304 <__aeabi_dcmpge>
  40421e:	46c8      	mov	r8, r9
  404220:	464e      	mov	r6, r9
  404222:	2800      	cmp	r0, #0
  404224:	d07c      	beq.n	404320 <_dtoa_r+0xa60>
  404226:	9d25      	ldr	r5, [sp, #148]	; 0x94
  404228:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40422c:	43ed      	mvns	r5, r5
  40422e:	9507      	str	r5, [sp, #28]
  404230:	4641      	mov	r1, r8
  404232:	4620      	mov	r0, r4
  404234:	f001 f912 	bl	40545c <_Bfree>
  404238:	2e00      	cmp	r6, #0
  40423a:	f47f ae06 	bne.w	403e4a <_dtoa_r+0x58a>
  40423e:	e50c      	b.n	403c5a <_dtoa_r+0x39a>
  404240:	990a      	ldr	r1, [sp, #40]	; 0x28
  404242:	4620      	mov	r0, r4
  404244:	f001 fa56 	bl	4056f4 <__pow5mult>
  404248:	900a      	str	r0, [sp, #40]	; 0x28
  40424a:	e56a      	b.n	403d22 <_dtoa_r+0x462>
  40424c:	9d16      	ldr	r5, [sp, #88]	; 0x58
  40424e:	2d00      	cmp	r5, #0
  404250:	f000 81b7 	beq.w	4045c2 <_dtoa_r+0xd02>
  404254:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404258:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40425a:	9d08      	ldr	r5, [sp, #32]
  40425c:	e527      	b.n	403cae <_dtoa_r+0x3ee>
  40425e:	4601      	mov	r1, r0
  404260:	4620      	mov	r0, r4
  404262:	f001 f8fb 	bl	40545c <_Bfree>
  404266:	2201      	movs	r2, #1
  404268:	e67a      	b.n	403f60 <_dtoa_r+0x6a0>
  40426a:	2601      	movs	r6, #1
  40426c:	9625      	str	r6, [sp, #148]	; 0x94
  40426e:	960f      	str	r6, [sp, #60]	; 0x3c
  404270:	46b1      	mov	r9, r6
  404272:	2100      	movs	r1, #0
  404274:	6461      	str	r1, [r4, #68]	; 0x44
  404276:	e6bb      	b.n	403ff0 <_dtoa_r+0x730>
  404278:	980a      	ldr	r0, [sp, #40]	; 0x28
  40427a:	4641      	mov	r1, r8
  40427c:	f001 fae6 	bl	40584c <__mcmp>
  404280:	2800      	cmp	r0, #0
  404282:	f6bf ad8f 	bge.w	403da4 <_dtoa_r+0x4e4>
  404286:	f8dd e01c 	ldr.w	lr, [sp, #28]
  40428a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40428c:	f10e 3eff 	add.w	lr, lr, #4294967295
  404290:	4620      	mov	r0, r4
  404292:	220a      	movs	r2, #10
  404294:	2300      	movs	r3, #0
  404296:	f8cd e01c 	str.w	lr, [sp, #28]
  40429a:	f001 f8e9 	bl	405470 <__multadd>
  40429e:	900a      	str	r0, [sp, #40]	; 0x28
  4042a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4042a2:	2800      	cmp	r0, #0
  4042a4:	f040 8207 	bne.w	4046b6 <_dtoa_r+0xdf6>
  4042a8:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4042ac:	e57a      	b.n	403da4 <_dtoa_r+0x4e4>
  4042ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4042b2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4042b6:	6918      	ldr	r0, [r3, #16]
  4042b8:	f001 f926 	bl	405508 <__hi0bits>
  4042bc:	f1c0 0020 	rsb	r0, r0, #32
  4042c0:	e547      	b.n	403d52 <_dtoa_r+0x492>
  4042c2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4042c4:	f7ff bb2d 	b.w	403922 <_dtoa_r+0x62>
  4042c8:	f1ba 0f00 	cmp.w	sl, #0
  4042cc:	f47f ad3b 	bne.w	403d46 <_dtoa_r+0x486>
  4042d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4042d4:	2b00      	cmp	r3, #0
  4042d6:	f040 817b 	bne.w	4045d0 <_dtoa_r+0xd10>
  4042da:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4042de:	0d3f      	lsrs	r7, r7, #20
  4042e0:	053f      	lsls	r7, r7, #20
  4042e2:	2f00      	cmp	r7, #0
  4042e4:	f43f ad30 	beq.w	403d48 <_dtoa_r+0x488>
  4042e8:	9a08      	ldr	r2, [sp, #32]
  4042ea:	9b06      	ldr	r3, [sp, #24]
  4042ec:	3201      	adds	r2, #1
  4042ee:	3301      	adds	r3, #1
  4042f0:	9208      	str	r2, [sp, #32]
  4042f2:	9306      	str	r3, [sp, #24]
  4042f4:	2701      	movs	r7, #1
  4042f6:	e527      	b.n	403d48 <_dtoa_r+0x488>
  4042f8:	9924      	ldr	r1, [sp, #144]	; 0x90
  4042fa:	2902      	cmp	r1, #2
  4042fc:	f77f ad56 	ble.w	403dac <_dtoa_r+0x4ec>
  404300:	f1b9 0f00 	cmp.w	r9, #0
  404304:	d18f      	bne.n	404226 <_dtoa_r+0x966>
  404306:	4641      	mov	r1, r8
  404308:	464b      	mov	r3, r9
  40430a:	2205      	movs	r2, #5
  40430c:	4620      	mov	r0, r4
  40430e:	f001 f8af 	bl	405470 <__multadd>
  404312:	4680      	mov	r8, r0
  404314:	4641      	mov	r1, r8
  404316:	980a      	ldr	r0, [sp, #40]	; 0x28
  404318:	f001 fa98 	bl	40584c <__mcmp>
  40431c:	2800      	cmp	r0, #0
  40431e:	dd82      	ble.n	404226 <_dtoa_r+0x966>
  404320:	9d07      	ldr	r5, [sp, #28]
  404322:	3501      	adds	r5, #1
  404324:	9507      	str	r5, [sp, #28]
  404326:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404328:	2331      	movs	r3, #49	; 0x31
  40432a:	702b      	strb	r3, [r5, #0]
  40432c:	f105 0b01 	add.w	fp, r5, #1
  404330:	e77e      	b.n	404230 <_dtoa_r+0x970>
  404332:	9807      	ldr	r0, [sp, #28]
  404334:	9909      	ldr	r1, [sp, #36]	; 0x24
  404336:	2331      	movs	r3, #49	; 0x31
  404338:	3001      	adds	r0, #1
  40433a:	9007      	str	r0, [sp, #28]
  40433c:	700b      	strb	r3, [r1, #0]
  40433e:	e576      	b.n	403e2e <_dtoa_r+0x56e>
  404340:	46a3      	mov	fp, r4
  404342:	9c03      	ldr	r4, [sp, #12]
  404344:	e489      	b.n	403c5a <_dtoa_r+0x39a>
  404346:	4640      	mov	r0, r8
  404348:	f7fd fbcc 	bl	401ae4 <__aeabi_i2d>
  40434c:	4602      	mov	r2, r0
  40434e:	460b      	mov	r3, r1
  404350:	4650      	mov	r0, sl
  404352:	4659      	mov	r1, fp
  404354:	f7fd fc2c 	bl	401bb0 <__aeabi_dmul>
  404358:	2200      	movs	r2, #0
  40435a:	4b30      	ldr	r3, [pc, #192]	; (40441c <_dtoa_r+0xb5c>)
  40435c:	f7fd fa76 	bl	40184c <__adddf3>
  404360:	4606      	mov	r6, r0
  404362:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  404366:	4650      	mov	r0, sl
  404368:	4659      	mov	r1, fp
  40436a:	2200      	movs	r2, #0
  40436c:	4b2a      	ldr	r3, [pc, #168]	; (404418 <_dtoa_r+0xb58>)
  40436e:	f7fd fa6b 	bl	401848 <__aeabi_dsub>
  404372:	4632      	mov	r2, r6
  404374:	463b      	mov	r3, r7
  404376:	4682      	mov	sl, r0
  404378:	468b      	mov	fp, r1
  40437a:	f001 ffcd 	bl	406318 <__aeabi_dcmpgt>
  40437e:	2800      	cmp	r0, #0
  404380:	f040 80bc 	bne.w	4044fc <_dtoa_r+0xc3c>
  404384:	4632      	mov	r2, r6
  404386:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40438a:	4650      	mov	r0, sl
  40438c:	4659      	mov	r1, fp
  40438e:	f001 ffa5 	bl	4062dc <__aeabi_dcmplt>
  404392:	2800      	cmp	r0, #0
  404394:	d054      	beq.n	404440 <_dtoa_r+0xb80>
  404396:	f04f 0800 	mov.w	r8, #0
  40439a:	4646      	mov	r6, r8
  40439c:	e743      	b.n	404226 <_dtoa_r+0x966>
  40439e:	990a      	ldr	r1, [sp, #40]	; 0x28
  4043a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4043a2:	4620      	mov	r0, r4
  4043a4:	f001 f9a6 	bl	4056f4 <__pow5mult>
  4043a8:	900a      	str	r0, [sp, #40]	; 0x28
  4043aa:	e4ba      	b.n	403d22 <_dtoa_r+0x462>
  4043ac:	2601      	movs	r6, #1
  4043ae:	960b      	str	r6, [sp, #44]	; 0x2c
  4043b0:	e602      	b.n	403fb8 <_dtoa_r+0x6f8>
  4043b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4043b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  4043b6:	970c      	str	r7, [sp, #48]	; 0x30
  4043b8:	1b7b      	subs	r3, r7, r5
  4043ba:	441e      	add	r6, r3
  4043bc:	960d      	str	r6, [sp, #52]	; 0x34
  4043be:	2700      	movs	r7, #0
  4043c0:	e46f      	b.n	403ca2 <_dtoa_r+0x3e2>
  4043c2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4043c6:	f04f 0802 	mov.w	r8, #2
  4043ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4043ce:	e638      	b.n	404042 <_dtoa_r+0x782>
  4043d0:	2a00      	cmp	r2, #0
  4043d2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4043d6:	46d9      	mov	r9, fp
  4043d8:	dd11      	ble.n	4043fe <_dtoa_r+0xb3e>
  4043da:	990a      	ldr	r1, [sp, #40]	; 0x28
  4043dc:	2201      	movs	r2, #1
  4043de:	4620      	mov	r0, r4
  4043e0:	f001 f9d6 	bl	405790 <__lshift>
  4043e4:	4641      	mov	r1, r8
  4043e6:	900a      	str	r0, [sp, #40]	; 0x28
  4043e8:	f001 fa30 	bl	40584c <__mcmp>
  4043ec:	2800      	cmp	r0, #0
  4043ee:	f340 815b 	ble.w	4046a8 <_dtoa_r+0xde8>
  4043f2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4043f6:	f000 811a 	beq.w	40462e <_dtoa_r+0xd6e>
  4043fa:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  4043fe:	9b06      	ldr	r3, [sp, #24]
  404400:	4635      	mov	r5, r6
  404402:	f883 a000 	strb.w	sl, [r3]
  404406:	f103 0b01 	add.w	fp, r3, #1
  40440a:	463e      	mov	r6, r7
  40440c:	e50f      	b.n	403e2e <_dtoa_r+0x56e>
  40440e:	bf00      	nop
  404410:	3ff00000 	.word	0x3ff00000
  404414:	40240000 	.word	0x40240000
  404418:	40140000 	.word	0x40140000
  40441c:	401c0000 	.word	0x401c0000
  404420:	d103      	bne.n	40442a <_dtoa_r+0xb6a>
  404422:	f01a 0f01 	tst.w	sl, #1
  404426:	f47f acf2 	bne.w	403e0e <_dtoa_r+0x54e>
  40442a:	465b      	mov	r3, fp
  40442c:	469b      	mov	fp, r3
  40442e:	3b01      	subs	r3, #1
  404430:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  404434:	2a30      	cmp	r2, #48	; 0x30
  404436:	d0f9      	beq.n	40442c <_dtoa_r+0xb6c>
  404438:	e4f9      	b.n	403e2e <_dtoa_r+0x56e>
  40443a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  40443e:	4654      	mov	r4, sl
  404440:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  404444:	f7ff bb48 	b.w	403ad8 <_dtoa_r+0x218>
  404448:	9e07      	ldr	r6, [sp, #28]
  40444a:	4275      	negs	r5, r6
  40444c:	2d00      	cmp	r5, #0
  40444e:	f000 80c2 	beq.w	4045d6 <_dtoa_r+0xd16>
  404452:	4ba3      	ldr	r3, [pc, #652]	; (4046e0 <_dtoa_r+0xe20>)
  404454:	f005 020f 	and.w	r2, r5, #15
  404458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40445c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404460:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404464:	f7fd fba4 	bl	401bb0 <__aeabi_dmul>
  404468:	112d      	asrs	r5, r5, #4
  40446a:	4682      	mov	sl, r0
  40446c:	468b      	mov	fp, r1
  40446e:	f000 812d 	beq.w	4046cc <_dtoa_r+0xe0c>
  404472:	4e9c      	ldr	r6, [pc, #624]	; (4046e4 <_dtoa_r+0xe24>)
  404474:	f04f 0802 	mov.w	r8, #2
  404478:	07ea      	lsls	r2, r5, #31
  40447a:	d505      	bpl.n	404488 <_dtoa_r+0xbc8>
  40447c:	e9d6 2300 	ldrd	r2, r3, [r6]
  404480:	f108 0801 	add.w	r8, r8, #1
  404484:	f7fd fb94 	bl	401bb0 <__aeabi_dmul>
  404488:	106d      	asrs	r5, r5, #1
  40448a:	f106 0608 	add.w	r6, r6, #8
  40448e:	d1f3      	bne.n	404478 <_dtoa_r+0xbb8>
  404490:	4682      	mov	sl, r0
  404492:	468b      	mov	fp, r1
  404494:	e5f0      	b.n	404078 <_dtoa_r+0x7b8>
  404496:	9e07      	ldr	r6, [sp, #28]
  404498:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40449a:	2230      	movs	r2, #48	; 0x30
  40449c:	702a      	strb	r2, [r5, #0]
  40449e:	3601      	adds	r6, #1
  4044a0:	2231      	movs	r2, #49	; 0x31
  4044a2:	9607      	str	r6, [sp, #28]
  4044a4:	701a      	strb	r2, [r3, #0]
  4044a6:	f7ff bbd8 	b.w	403c5a <_dtoa_r+0x39a>
  4044aa:	6871      	ldr	r1, [r6, #4]
  4044ac:	4620      	mov	r0, r4
  4044ae:	f000 ffaf 	bl	405410 <_Balloc>
  4044b2:	6933      	ldr	r3, [r6, #16]
  4044b4:	1c9a      	adds	r2, r3, #2
  4044b6:	4605      	mov	r5, r0
  4044b8:	0092      	lsls	r2, r2, #2
  4044ba:	f106 010c 	add.w	r1, r6, #12
  4044be:	300c      	adds	r0, #12
  4044c0:	f000 fea8 	bl	405214 <memcpy>
  4044c4:	4620      	mov	r0, r4
  4044c6:	4629      	mov	r1, r5
  4044c8:	2201      	movs	r2, #1
  4044ca:	f001 f961 	bl	405790 <__lshift>
  4044ce:	4607      	mov	r7, r0
  4044d0:	e504      	b.n	403edc <_dtoa_r+0x61c>
  4044d2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4044d6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4044da:	f000 80a8 	beq.w	40462e <_dtoa_r+0xd6e>
  4044de:	9d06      	ldr	r5, [sp, #24]
  4044e0:	f10a 0301 	add.w	r3, sl, #1
  4044e4:	702b      	strb	r3, [r5, #0]
  4044e6:	4635      	mov	r5, r6
  4044e8:	9e06      	ldr	r6, [sp, #24]
  4044ea:	f106 0b01 	add.w	fp, r6, #1
  4044ee:	463e      	mov	r6, r7
  4044f0:	e49d      	b.n	403e2e <_dtoa_r+0x56e>
  4044f2:	4635      	mov	r5, r6
  4044f4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4044f8:	463e      	mov	r6, r7
  4044fa:	e47c      	b.n	403df6 <_dtoa_r+0x536>
  4044fc:	f04f 0800 	mov.w	r8, #0
  404500:	4646      	mov	r6, r8
  404502:	e70d      	b.n	404320 <_dtoa_r+0xa60>
  404504:	4976      	ldr	r1, [pc, #472]	; (4046e0 <_dtoa_r+0xe20>)
  404506:	f108 35ff 	add.w	r5, r8, #4294967295
  40450a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  40450e:	4632      	mov	r2, r6
  404510:	463b      	mov	r3, r7
  404512:	e9d1 0100 	ldrd	r0, r1, [r1]
  404516:	9510      	str	r5, [sp, #64]	; 0x40
  404518:	f7fd fb4a 	bl	401bb0 <__aeabi_dmul>
  40451c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  404520:	4659      	mov	r1, fp
  404522:	4650      	mov	r0, sl
  404524:	f001 ff02 	bl	40632c <__aeabi_d2iz>
  404528:	4605      	mov	r5, r0
  40452a:	f7fd fadb 	bl	401ae4 <__aeabi_i2d>
  40452e:	4602      	mov	r2, r0
  404530:	460b      	mov	r3, r1
  404532:	4650      	mov	r0, sl
  404534:	4659      	mov	r1, fp
  404536:	f7fd f987 	bl	401848 <__aeabi_dsub>
  40453a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  40453e:	3530      	adds	r5, #48	; 0x30
  404540:	f1b8 0f01 	cmp.w	r8, #1
  404544:	4606      	mov	r6, r0
  404546:	460f      	mov	r7, r1
  404548:	f88e 5000 	strb.w	r5, [lr]
  40454c:	f10e 0b01 	add.w	fp, lr, #1
  404550:	d01e      	beq.n	404590 <_dtoa_r+0xcd0>
  404552:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404554:	1e6b      	subs	r3, r5, #1
  404556:	eb03 0a08 	add.w	sl, r3, r8
  40455a:	2200      	movs	r2, #0
  40455c:	4b62      	ldr	r3, [pc, #392]	; (4046e8 <_dtoa_r+0xe28>)
  40455e:	f7fd fb27 	bl	401bb0 <__aeabi_dmul>
  404562:	460f      	mov	r7, r1
  404564:	4606      	mov	r6, r0
  404566:	f001 fee1 	bl	40632c <__aeabi_d2iz>
  40456a:	4680      	mov	r8, r0
  40456c:	f7fd faba 	bl	401ae4 <__aeabi_i2d>
  404570:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404574:	4602      	mov	r2, r0
  404576:	460b      	mov	r3, r1
  404578:	4630      	mov	r0, r6
  40457a:	4639      	mov	r1, r7
  40457c:	f7fd f964 	bl	401848 <__aeabi_dsub>
  404580:	f805 8f01 	strb.w	r8, [r5, #1]!
  404584:	4555      	cmp	r5, sl
  404586:	d1e8      	bne.n	40455a <_dtoa_r+0xc9a>
  404588:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40458a:	4606      	mov	r6, r0
  40458c:	460f      	mov	r7, r1
  40458e:	44ab      	add	fp, r5
  404590:	2200      	movs	r2, #0
  404592:	4b56      	ldr	r3, [pc, #344]	; (4046ec <_dtoa_r+0xe2c>)
  404594:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  404598:	f7fd f958 	bl	40184c <__adddf3>
  40459c:	4632      	mov	r2, r6
  40459e:	463b      	mov	r3, r7
  4045a0:	f001 fe9c 	bl	4062dc <__aeabi_dcmplt>
  4045a4:	2800      	cmp	r0, #0
  4045a6:	d04d      	beq.n	404644 <_dtoa_r+0xd84>
  4045a8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4045aa:	9607      	str	r6, [sp, #28]
  4045ac:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  4045b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4045b2:	f7ff bb4b 	b.w	403c4c <_dtoa_r+0x38c>
  4045b6:	9e08      	ldr	r6, [sp, #32]
  4045b8:	2300      	movs	r3, #0
  4045ba:	ebc9 0506 	rsb	r5, r9, r6
  4045be:	f7ff bb76 	b.w	403cae <_dtoa_r+0x3ee>
  4045c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4045c4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4045c6:	9d08      	ldr	r5, [sp, #32]
  4045c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4045cc:	f7ff bb6f 	b.w	403cae <_dtoa_r+0x3ee>
  4045d0:	4657      	mov	r7, sl
  4045d2:	f7ff bbb9 	b.w	403d48 <_dtoa_r+0x488>
  4045d6:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  4045da:	f04f 0802 	mov.w	r8, #2
  4045de:	e54b      	b.n	404078 <_dtoa_r+0x7b8>
  4045e0:	f1b9 0f00 	cmp.w	r9, #0
  4045e4:	f43f aeaf 	beq.w	404346 <_dtoa_r+0xa86>
  4045e8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  4045ea:	2e00      	cmp	r6, #0
  4045ec:	f77f af28 	ble.w	404440 <_dtoa_r+0xb80>
  4045f0:	2200      	movs	r2, #0
  4045f2:	4b3d      	ldr	r3, [pc, #244]	; (4046e8 <_dtoa_r+0xe28>)
  4045f4:	4650      	mov	r0, sl
  4045f6:	4659      	mov	r1, fp
  4045f8:	f7fd fada 	bl	401bb0 <__aeabi_dmul>
  4045fc:	4682      	mov	sl, r0
  4045fe:	f108 0001 	add.w	r0, r8, #1
  404602:	468b      	mov	fp, r1
  404604:	f7fd fa6e 	bl	401ae4 <__aeabi_i2d>
  404608:	4602      	mov	r2, r0
  40460a:	460b      	mov	r3, r1
  40460c:	4650      	mov	r0, sl
  40460e:	4659      	mov	r1, fp
  404610:	f7fd face 	bl	401bb0 <__aeabi_dmul>
  404614:	2200      	movs	r2, #0
  404616:	4b36      	ldr	r3, [pc, #216]	; (4046f0 <_dtoa_r+0xe30>)
  404618:	f7fd f918 	bl	40184c <__adddf3>
  40461c:	9d07      	ldr	r5, [sp, #28]
  40461e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  404622:	3d01      	subs	r5, #1
  404624:	4606      	mov	r6, r0
  404626:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40462a:	9517      	str	r5, [sp, #92]	; 0x5c
  40462c:	e544      	b.n	4040b8 <_dtoa_r+0x7f8>
  40462e:	4635      	mov	r5, r6
  404630:	9b06      	ldr	r3, [sp, #24]
  404632:	9e06      	ldr	r6, [sp, #24]
  404634:	9909      	ldr	r1, [sp, #36]	; 0x24
  404636:	2239      	movs	r2, #57	; 0x39
  404638:	7032      	strb	r2, [r6, #0]
  40463a:	f103 0b01 	add.w	fp, r3, #1
  40463e:	463e      	mov	r6, r7
  404640:	f7ff bbef 	b.w	403e22 <_dtoa_r+0x562>
  404644:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  404648:	2000      	movs	r0, #0
  40464a:	4928      	ldr	r1, [pc, #160]	; (4046ec <_dtoa_r+0xe2c>)
  40464c:	f7fd f8fc 	bl	401848 <__aeabi_dsub>
  404650:	4632      	mov	r2, r6
  404652:	463b      	mov	r3, r7
  404654:	f001 fe60 	bl	406318 <__aeabi_dcmpgt>
  404658:	2800      	cmp	r0, #0
  40465a:	f43f aef1 	beq.w	404440 <_dtoa_r+0xb80>
  40465e:	465b      	mov	r3, fp
  404660:	469b      	mov	fp, r3
  404662:	3b01      	subs	r3, #1
  404664:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  404668:	2a30      	cmp	r2, #48	; 0x30
  40466a:	d0f9      	beq.n	404660 <_dtoa_r+0xda0>
  40466c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40466e:	9507      	str	r5, [sp, #28]
  404670:	f7ff baf3 	b.w	403c5a <_dtoa_r+0x39a>
  404674:	4645      	mov	r5, r8
  404676:	4654      	mov	r4, sl
  404678:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40467a:	9607      	str	r6, [sp, #28]
  40467c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40467e:	f7ff bae5 	b.w	403c4c <_dtoa_r+0x38c>
  404682:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  404686:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40468a:	d0d0      	beq.n	40462e <_dtoa_r+0xd6e>
  40468c:	9b03      	ldr	r3, [sp, #12]
  40468e:	4635      	mov	r5, r6
  404690:	2b00      	cmp	r3, #0
  404692:	9e06      	ldr	r6, [sp, #24]
  404694:	bfc8      	it	gt
  404696:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  40469a:	f886 a000 	strb.w	sl, [r6]
  40469e:	f106 0b01 	add.w	fp, r6, #1
  4046a2:	463e      	mov	r6, r7
  4046a4:	f7ff bbc3 	b.w	403e2e <_dtoa_r+0x56e>
  4046a8:	f47f aea9 	bne.w	4043fe <_dtoa_r+0xb3e>
  4046ac:	f01a 0f01 	tst.w	sl, #1
  4046b0:	f43f aea5 	beq.w	4043fe <_dtoa_r+0xb3e>
  4046b4:	e69d      	b.n	4043f2 <_dtoa_r+0xb32>
  4046b6:	4631      	mov	r1, r6
  4046b8:	4620      	mov	r0, r4
  4046ba:	220a      	movs	r2, #10
  4046bc:	2300      	movs	r3, #0
  4046be:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4046c2:	f000 fed5 	bl	405470 <__multadd>
  4046c6:	4606      	mov	r6, r0
  4046c8:	f7ff bb6c 	b.w	403da4 <_dtoa_r+0x4e4>
  4046cc:	f04f 0802 	mov.w	r8, #2
  4046d0:	e4d2      	b.n	404078 <_dtoa_r+0x7b8>
  4046d2:	f43f ab52 	beq.w	403d7a <_dtoa_r+0x4ba>
  4046d6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  4046da:	f7ff bbe2 	b.w	403ea2 <_dtoa_r+0x5e2>
  4046de:	bf00      	nop
  4046e0:	00407a78 	.word	0x00407a78
  4046e4:	00407b40 	.word	0x00407b40
  4046e8:	40240000 	.word	0x40240000
  4046ec:	3fe00000 	.word	0x3fe00000
  4046f0:	401c0000 	.word	0x401c0000
  4046f4:	f3af 8000 	nop.w

004046f8 <__sflush_r>:
  4046f8:	898b      	ldrh	r3, [r1, #12]
  4046fa:	b29a      	uxth	r2, r3
  4046fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404700:	460d      	mov	r5, r1
  404702:	0711      	lsls	r1, r2, #28
  404704:	4680      	mov	r8, r0
  404706:	d43c      	bmi.n	404782 <__sflush_r+0x8a>
  404708:	686a      	ldr	r2, [r5, #4]
  40470a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40470e:	2a00      	cmp	r2, #0
  404710:	81ab      	strh	r3, [r5, #12]
  404712:	dd59      	ble.n	4047c8 <__sflush_r+0xd0>
  404714:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404716:	2c00      	cmp	r4, #0
  404718:	d04b      	beq.n	4047b2 <__sflush_r+0xba>
  40471a:	b29b      	uxth	r3, r3
  40471c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  404720:	2100      	movs	r1, #0
  404722:	b292      	uxth	r2, r2
  404724:	f8d8 6000 	ldr.w	r6, [r8]
  404728:	f8c8 1000 	str.w	r1, [r8]
  40472c:	2a00      	cmp	r2, #0
  40472e:	d04f      	beq.n	4047d0 <__sflush_r+0xd8>
  404730:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404732:	075f      	lsls	r7, r3, #29
  404734:	d505      	bpl.n	404742 <__sflush_r+0x4a>
  404736:	6869      	ldr	r1, [r5, #4]
  404738:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40473a:	1a52      	subs	r2, r2, r1
  40473c:	b10b      	cbz	r3, 404742 <__sflush_r+0x4a>
  40473e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404740:	1ad2      	subs	r2, r2, r3
  404742:	4640      	mov	r0, r8
  404744:	69e9      	ldr	r1, [r5, #28]
  404746:	2300      	movs	r3, #0
  404748:	47a0      	blx	r4
  40474a:	1c44      	adds	r4, r0, #1
  40474c:	d04a      	beq.n	4047e4 <__sflush_r+0xec>
  40474e:	89aa      	ldrh	r2, [r5, #12]
  404750:	692b      	ldr	r3, [r5, #16]
  404752:	602b      	str	r3, [r5, #0]
  404754:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404758:	b29b      	uxth	r3, r3
  40475a:	2200      	movs	r2, #0
  40475c:	606a      	str	r2, [r5, #4]
  40475e:	04da      	lsls	r2, r3, #19
  404760:	81ab      	strh	r3, [r5, #12]
  404762:	d44c      	bmi.n	4047fe <__sflush_r+0x106>
  404764:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404766:	f8c8 6000 	str.w	r6, [r8]
  40476a:	b311      	cbz	r1, 4047b2 <__sflush_r+0xba>
  40476c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404770:	4299      	cmp	r1, r3
  404772:	d002      	beq.n	40477a <__sflush_r+0x82>
  404774:	4640      	mov	r0, r8
  404776:	f000 f969 	bl	404a4c <_free_r>
  40477a:	2000      	movs	r0, #0
  40477c:	6328      	str	r0, [r5, #48]	; 0x30
  40477e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404782:	692e      	ldr	r6, [r5, #16]
  404784:	b1ae      	cbz	r6, 4047b2 <__sflush_r+0xba>
  404786:	682c      	ldr	r4, [r5, #0]
  404788:	602e      	str	r6, [r5, #0]
  40478a:	0791      	lsls	r1, r2, #30
  40478c:	bf0c      	ite	eq
  40478e:	696b      	ldreq	r3, [r5, #20]
  404790:	2300      	movne	r3, #0
  404792:	1ba4      	subs	r4, r4, r6
  404794:	60ab      	str	r3, [r5, #8]
  404796:	e00a      	b.n	4047ae <__sflush_r+0xb6>
  404798:	4632      	mov	r2, r6
  40479a:	4623      	mov	r3, r4
  40479c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40479e:	69e9      	ldr	r1, [r5, #28]
  4047a0:	4640      	mov	r0, r8
  4047a2:	47b8      	blx	r7
  4047a4:	2800      	cmp	r0, #0
  4047a6:	ebc0 0404 	rsb	r4, r0, r4
  4047aa:	4406      	add	r6, r0
  4047ac:	dd04      	ble.n	4047b8 <__sflush_r+0xc0>
  4047ae:	2c00      	cmp	r4, #0
  4047b0:	dcf2      	bgt.n	404798 <__sflush_r+0xa0>
  4047b2:	2000      	movs	r0, #0
  4047b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4047b8:	89ab      	ldrh	r3, [r5, #12]
  4047ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047be:	81ab      	strh	r3, [r5, #12]
  4047c0:	f04f 30ff 	mov.w	r0, #4294967295
  4047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4047c8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4047ca:	2a00      	cmp	r2, #0
  4047cc:	dca2      	bgt.n	404714 <__sflush_r+0x1c>
  4047ce:	e7f0      	b.n	4047b2 <__sflush_r+0xba>
  4047d0:	2301      	movs	r3, #1
  4047d2:	4640      	mov	r0, r8
  4047d4:	69e9      	ldr	r1, [r5, #28]
  4047d6:	47a0      	blx	r4
  4047d8:	1c43      	adds	r3, r0, #1
  4047da:	4602      	mov	r2, r0
  4047dc:	d01e      	beq.n	40481c <__sflush_r+0x124>
  4047de:	89ab      	ldrh	r3, [r5, #12]
  4047e0:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4047e2:	e7a6      	b.n	404732 <__sflush_r+0x3a>
  4047e4:	f8d8 3000 	ldr.w	r3, [r8]
  4047e8:	b95b      	cbnz	r3, 404802 <__sflush_r+0x10a>
  4047ea:	89a9      	ldrh	r1, [r5, #12]
  4047ec:	606b      	str	r3, [r5, #4]
  4047ee:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  4047f2:	b29b      	uxth	r3, r3
  4047f4:	692a      	ldr	r2, [r5, #16]
  4047f6:	81ab      	strh	r3, [r5, #12]
  4047f8:	04db      	lsls	r3, r3, #19
  4047fa:	602a      	str	r2, [r5, #0]
  4047fc:	d5b2      	bpl.n	404764 <__sflush_r+0x6c>
  4047fe:	6528      	str	r0, [r5, #80]	; 0x50
  404800:	e7b0      	b.n	404764 <__sflush_r+0x6c>
  404802:	2b1d      	cmp	r3, #29
  404804:	d001      	beq.n	40480a <__sflush_r+0x112>
  404806:	2b16      	cmp	r3, #22
  404808:	d119      	bne.n	40483e <__sflush_r+0x146>
  40480a:	89aa      	ldrh	r2, [r5, #12]
  40480c:	692b      	ldr	r3, [r5, #16]
  40480e:	602b      	str	r3, [r5, #0]
  404810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  404814:	2300      	movs	r3, #0
  404816:	81aa      	strh	r2, [r5, #12]
  404818:	606b      	str	r3, [r5, #4]
  40481a:	e7a3      	b.n	404764 <__sflush_r+0x6c>
  40481c:	f8d8 3000 	ldr.w	r3, [r8]
  404820:	2b00      	cmp	r3, #0
  404822:	d0dc      	beq.n	4047de <__sflush_r+0xe6>
  404824:	2b1d      	cmp	r3, #29
  404826:	d007      	beq.n	404838 <__sflush_r+0x140>
  404828:	2b16      	cmp	r3, #22
  40482a:	d005      	beq.n	404838 <__sflush_r+0x140>
  40482c:	89ab      	ldrh	r3, [r5, #12]
  40482e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404832:	81ab      	strh	r3, [r5, #12]
  404834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404838:	f8c8 6000 	str.w	r6, [r8]
  40483c:	e7b9      	b.n	4047b2 <__sflush_r+0xba>
  40483e:	89ab      	ldrh	r3, [r5, #12]
  404840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404844:	81ab      	strh	r3, [r5, #12]
  404846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40484a:	bf00      	nop

0040484c <_fflush_r>:
  40484c:	b510      	push	{r4, lr}
  40484e:	4604      	mov	r4, r0
  404850:	b082      	sub	sp, #8
  404852:	b108      	cbz	r0, 404858 <_fflush_r+0xc>
  404854:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404856:	b153      	cbz	r3, 40486e <_fflush_r+0x22>
  404858:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40485c:	b908      	cbnz	r0, 404862 <_fflush_r+0x16>
  40485e:	b002      	add	sp, #8
  404860:	bd10      	pop	{r4, pc}
  404862:	4620      	mov	r0, r4
  404864:	b002      	add	sp, #8
  404866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40486a:	f7ff bf45 	b.w	4046f8 <__sflush_r>
  40486e:	9101      	str	r1, [sp, #4]
  404870:	f000 f808 	bl	404884 <__sinit>
  404874:	9901      	ldr	r1, [sp, #4]
  404876:	e7ef      	b.n	404858 <_fflush_r+0xc>

00404878 <_cleanup_r>:
  404878:	4901      	ldr	r1, [pc, #4]	; (404880 <_cleanup_r+0x8>)
  40487a:	f000 b9b5 	b.w	404be8 <_fwalk>
  40487e:	bf00      	nop
  404880:	004061bd 	.word	0x004061bd

00404884 <__sinit>:
  404884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404888:	6b84      	ldr	r4, [r0, #56]	; 0x38
  40488a:	b083      	sub	sp, #12
  40488c:	4607      	mov	r7, r0
  40488e:	2c00      	cmp	r4, #0
  404890:	d165      	bne.n	40495e <__sinit+0xda>
  404892:	6845      	ldr	r5, [r0, #4]
  404894:	4833      	ldr	r0, [pc, #204]	; (404964 <__sinit+0xe0>)
  404896:	63f8      	str	r0, [r7, #60]	; 0x3c
  404898:	2304      	movs	r3, #4
  40489a:	2103      	movs	r1, #3
  40489c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  4048a0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  4048a4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  4048a8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  4048ac:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4048b0:	81ab      	strh	r3, [r5, #12]
  4048b2:	602c      	str	r4, [r5, #0]
  4048b4:	606c      	str	r4, [r5, #4]
  4048b6:	60ac      	str	r4, [r5, #8]
  4048b8:	666c      	str	r4, [r5, #100]	; 0x64
  4048ba:	81ec      	strh	r4, [r5, #14]
  4048bc:	612c      	str	r4, [r5, #16]
  4048be:	616c      	str	r4, [r5, #20]
  4048c0:	61ac      	str	r4, [r5, #24]
  4048c2:	4621      	mov	r1, r4
  4048c4:	2208      	movs	r2, #8
  4048c6:	f7fd fbad 	bl	402024 <memset>
  4048ca:	68be      	ldr	r6, [r7, #8]
  4048cc:	f8df b098 	ldr.w	fp, [pc, #152]	; 404968 <__sinit+0xe4>
  4048d0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40496c <__sinit+0xe8>
  4048d4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 404970 <__sinit+0xec>
  4048d8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404974 <__sinit+0xf0>
  4048dc:	61ed      	str	r5, [r5, #28]
  4048de:	2301      	movs	r3, #1
  4048e0:	2209      	movs	r2, #9
  4048e2:	f8c5 b020 	str.w	fp, [r5, #32]
  4048e6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4048ea:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4048ee:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4048f2:	4621      	mov	r1, r4
  4048f4:	81f3      	strh	r3, [r6, #14]
  4048f6:	81b2      	strh	r2, [r6, #12]
  4048f8:	6034      	str	r4, [r6, #0]
  4048fa:	6074      	str	r4, [r6, #4]
  4048fc:	60b4      	str	r4, [r6, #8]
  4048fe:	6674      	str	r4, [r6, #100]	; 0x64
  404900:	6134      	str	r4, [r6, #16]
  404902:	6174      	str	r4, [r6, #20]
  404904:	61b4      	str	r4, [r6, #24]
  404906:	2208      	movs	r2, #8
  404908:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40490c:	9301      	str	r3, [sp, #4]
  40490e:	f7fd fb89 	bl	402024 <memset>
  404912:	68fd      	ldr	r5, [r7, #12]
  404914:	61f6      	str	r6, [r6, #28]
  404916:	2012      	movs	r0, #18
  404918:	2202      	movs	r2, #2
  40491a:	f8c6 b020 	str.w	fp, [r6, #32]
  40491e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  404922:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  404926:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40492a:	4621      	mov	r1, r4
  40492c:	81a8      	strh	r0, [r5, #12]
  40492e:	81ea      	strh	r2, [r5, #14]
  404930:	602c      	str	r4, [r5, #0]
  404932:	606c      	str	r4, [r5, #4]
  404934:	60ac      	str	r4, [r5, #8]
  404936:	666c      	str	r4, [r5, #100]	; 0x64
  404938:	612c      	str	r4, [r5, #16]
  40493a:	616c      	str	r4, [r5, #20]
  40493c:	61ac      	str	r4, [r5, #24]
  40493e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404942:	2208      	movs	r2, #8
  404944:	f7fd fb6e 	bl	402024 <memset>
  404948:	9b01      	ldr	r3, [sp, #4]
  40494a:	61ed      	str	r5, [r5, #28]
  40494c:	f8c5 b020 	str.w	fp, [r5, #32]
  404950:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404954:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404958:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40495c:	63bb      	str	r3, [r7, #56]	; 0x38
  40495e:	b003      	add	sp, #12
  404960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404964:	00404879 	.word	0x00404879
  404968:	00405e65 	.word	0x00405e65
  40496c:	00405e89 	.word	0x00405e89
  404970:	00405ec1 	.word	0x00405ec1
  404974:	00405ee1 	.word	0x00405ee1

00404978 <__sfp_lock_acquire>:
  404978:	4770      	bx	lr
  40497a:	bf00      	nop

0040497c <__sfp_lock_release>:
  40497c:	4770      	bx	lr
  40497e:	bf00      	nop

00404980 <__libc_fini_array>:
  404980:	b538      	push	{r3, r4, r5, lr}
  404982:	4d09      	ldr	r5, [pc, #36]	; (4049a8 <__libc_fini_array+0x28>)
  404984:	4c09      	ldr	r4, [pc, #36]	; (4049ac <__libc_fini_array+0x2c>)
  404986:	1b64      	subs	r4, r4, r5
  404988:	10a4      	asrs	r4, r4, #2
  40498a:	bf18      	it	ne
  40498c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  404990:	d005      	beq.n	40499e <__libc_fini_array+0x1e>
  404992:	3c01      	subs	r4, #1
  404994:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404998:	4798      	blx	r3
  40499a:	2c00      	cmp	r4, #0
  40499c:	d1f9      	bne.n	404992 <__libc_fini_array+0x12>
  40499e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4049a2:	f003 b8f1 	b.w	407b88 <_fini>
  4049a6:	bf00      	nop
  4049a8:	00407b94 	.word	0x00407b94
  4049ac:	00407b98 	.word	0x00407b98

004049b0 <_malloc_trim_r>:
  4049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4049b2:	4d23      	ldr	r5, [pc, #140]	; (404a40 <_malloc_trim_r+0x90>)
  4049b4:	460f      	mov	r7, r1
  4049b6:	4604      	mov	r4, r0
  4049b8:	f000 fd26 	bl	405408 <__malloc_lock>
  4049bc:	68ab      	ldr	r3, [r5, #8]
  4049be:	685e      	ldr	r6, [r3, #4]
  4049c0:	f026 0603 	bic.w	r6, r6, #3
  4049c4:	1bf1      	subs	r1, r6, r7
  4049c6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4049ca:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4049ce:	f021 010f 	bic.w	r1, r1, #15
  4049d2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  4049d6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  4049da:	db07      	blt.n	4049ec <_malloc_trim_r+0x3c>
  4049dc:	4620      	mov	r0, r4
  4049de:	2100      	movs	r1, #0
  4049e0:	f001 fa2e 	bl	405e40 <_sbrk_r>
  4049e4:	68ab      	ldr	r3, [r5, #8]
  4049e6:	4433      	add	r3, r6
  4049e8:	4298      	cmp	r0, r3
  4049ea:	d004      	beq.n	4049f6 <_malloc_trim_r+0x46>
  4049ec:	4620      	mov	r0, r4
  4049ee:	f000 fd0d 	bl	40540c <__malloc_unlock>
  4049f2:	2000      	movs	r0, #0
  4049f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4049f6:	4620      	mov	r0, r4
  4049f8:	4279      	negs	r1, r7
  4049fa:	f001 fa21 	bl	405e40 <_sbrk_r>
  4049fe:	3001      	adds	r0, #1
  404a00:	d00d      	beq.n	404a1e <_malloc_trim_r+0x6e>
  404a02:	4b10      	ldr	r3, [pc, #64]	; (404a44 <_malloc_trim_r+0x94>)
  404a04:	68aa      	ldr	r2, [r5, #8]
  404a06:	6819      	ldr	r1, [r3, #0]
  404a08:	1bf6      	subs	r6, r6, r7
  404a0a:	f046 0601 	orr.w	r6, r6, #1
  404a0e:	4620      	mov	r0, r4
  404a10:	1bc9      	subs	r1, r1, r7
  404a12:	6056      	str	r6, [r2, #4]
  404a14:	6019      	str	r1, [r3, #0]
  404a16:	f000 fcf9 	bl	40540c <__malloc_unlock>
  404a1a:	2001      	movs	r0, #1
  404a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404a1e:	4620      	mov	r0, r4
  404a20:	2100      	movs	r1, #0
  404a22:	f001 fa0d 	bl	405e40 <_sbrk_r>
  404a26:	68ab      	ldr	r3, [r5, #8]
  404a28:	1ac2      	subs	r2, r0, r3
  404a2a:	2a0f      	cmp	r2, #15
  404a2c:	ddde      	ble.n	4049ec <_malloc_trim_r+0x3c>
  404a2e:	4d06      	ldr	r5, [pc, #24]	; (404a48 <_malloc_trim_r+0x98>)
  404a30:	4904      	ldr	r1, [pc, #16]	; (404a44 <_malloc_trim_r+0x94>)
  404a32:	682d      	ldr	r5, [r5, #0]
  404a34:	f042 0201 	orr.w	r2, r2, #1
  404a38:	1b40      	subs	r0, r0, r5
  404a3a:	605a      	str	r2, [r3, #4]
  404a3c:	6008      	str	r0, [r1, #0]
  404a3e:	e7d5      	b.n	4049ec <_malloc_trim_r+0x3c>
  404a40:	2000047c 	.word	0x2000047c
  404a44:	20000940 	.word	0x20000940
  404a48:	20000888 	.word	0x20000888

00404a4c <_free_r>:
  404a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a50:	460d      	mov	r5, r1
  404a52:	4606      	mov	r6, r0
  404a54:	2900      	cmp	r1, #0
  404a56:	d055      	beq.n	404b04 <_free_r+0xb8>
  404a58:	f000 fcd6 	bl	405408 <__malloc_lock>
  404a5c:	f855 1c04 	ldr.w	r1, [r5, #-4]
  404a60:	f8df c174 	ldr.w	ip, [pc, #372]	; 404bd8 <_free_r+0x18c>
  404a64:	f021 0301 	bic.w	r3, r1, #1
  404a68:	f1a5 0408 	sub.w	r4, r5, #8
  404a6c:	18e2      	adds	r2, r4, r3
  404a6e:	f8dc 0008 	ldr.w	r0, [ip, #8]
  404a72:	6857      	ldr	r7, [r2, #4]
  404a74:	4290      	cmp	r0, r2
  404a76:	f027 0703 	bic.w	r7, r7, #3
  404a7a:	d069      	beq.n	404b50 <_free_r+0x104>
  404a7c:	f011 0101 	ands.w	r1, r1, #1
  404a80:	6057      	str	r7, [r2, #4]
  404a82:	d032      	beq.n	404aea <_free_r+0x9e>
  404a84:	2100      	movs	r1, #0
  404a86:	19d0      	adds	r0, r2, r7
  404a88:	6840      	ldr	r0, [r0, #4]
  404a8a:	07c0      	lsls	r0, r0, #31
  404a8c:	d406      	bmi.n	404a9c <_free_r+0x50>
  404a8e:	443b      	add	r3, r7
  404a90:	6890      	ldr	r0, [r2, #8]
  404a92:	2900      	cmp	r1, #0
  404a94:	d04e      	beq.n	404b34 <_free_r+0xe8>
  404a96:	68d2      	ldr	r2, [r2, #12]
  404a98:	60c2      	str	r2, [r0, #12]
  404a9a:	6090      	str	r0, [r2, #8]
  404a9c:	f043 0201 	orr.w	r2, r3, #1
  404aa0:	6062      	str	r2, [r4, #4]
  404aa2:	50e3      	str	r3, [r4, r3]
  404aa4:	b9e1      	cbnz	r1, 404ae0 <_free_r+0x94>
  404aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404aaa:	d32d      	bcc.n	404b08 <_free_r+0xbc>
  404aac:	0a5a      	lsrs	r2, r3, #9
  404aae:	2a04      	cmp	r2, #4
  404ab0:	d86a      	bhi.n	404b88 <_free_r+0x13c>
  404ab2:	0998      	lsrs	r0, r3, #6
  404ab4:	3038      	adds	r0, #56	; 0x38
  404ab6:	0041      	lsls	r1, r0, #1
  404ab8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  404abc:	4946      	ldr	r1, [pc, #280]	; (404bd8 <_free_r+0x18c>)
  404abe:	f8dc 2008 	ldr.w	r2, [ip, #8]
  404ac2:	4562      	cmp	r2, ip
  404ac4:	d066      	beq.n	404b94 <_free_r+0x148>
  404ac6:	6851      	ldr	r1, [r2, #4]
  404ac8:	f021 0103 	bic.w	r1, r1, #3
  404acc:	428b      	cmp	r3, r1
  404ace:	d202      	bcs.n	404ad6 <_free_r+0x8a>
  404ad0:	6892      	ldr	r2, [r2, #8]
  404ad2:	4594      	cmp	ip, r2
  404ad4:	d1f7      	bne.n	404ac6 <_free_r+0x7a>
  404ad6:	68d3      	ldr	r3, [r2, #12]
  404ad8:	60e3      	str	r3, [r4, #12]
  404ada:	60a2      	str	r2, [r4, #8]
  404adc:	609c      	str	r4, [r3, #8]
  404ade:	60d4      	str	r4, [r2, #12]
  404ae0:	4630      	mov	r0, r6
  404ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404ae6:	f000 bc91 	b.w	40540c <__malloc_unlock>
  404aea:	f855 5c08 	ldr.w	r5, [r5, #-8]
  404aee:	1b64      	subs	r4, r4, r5
  404af0:	f10c 0808 	add.w	r8, ip, #8
  404af4:	68a0      	ldr	r0, [r4, #8]
  404af6:	4540      	cmp	r0, r8
  404af8:	442b      	add	r3, r5
  404afa:	d043      	beq.n	404b84 <_free_r+0x138>
  404afc:	68e5      	ldr	r5, [r4, #12]
  404afe:	60c5      	str	r5, [r0, #12]
  404b00:	60a8      	str	r0, [r5, #8]
  404b02:	e7c0      	b.n	404a86 <_free_r+0x3a>
  404b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b08:	08db      	lsrs	r3, r3, #3
  404b0a:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  404b0e:	2501      	movs	r5, #1
  404b10:	f8dc 0004 	ldr.w	r0, [ip, #4]
  404b14:	6891      	ldr	r1, [r2, #8]
  404b16:	60a1      	str	r1, [r4, #8]
  404b18:	109b      	asrs	r3, r3, #2
  404b1a:	fa05 f303 	lsl.w	r3, r5, r3
  404b1e:	4318      	orrs	r0, r3
  404b20:	60e2      	str	r2, [r4, #12]
  404b22:	f8cc 0004 	str.w	r0, [ip, #4]
  404b26:	6094      	str	r4, [r2, #8]
  404b28:	4630      	mov	r0, r6
  404b2a:	60cc      	str	r4, [r1, #12]
  404b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404b30:	f000 bc6c 	b.w	40540c <__malloc_unlock>
  404b34:	4d29      	ldr	r5, [pc, #164]	; (404bdc <_free_r+0x190>)
  404b36:	42a8      	cmp	r0, r5
  404b38:	d1ad      	bne.n	404a96 <_free_r+0x4a>
  404b3a:	f043 0201 	orr.w	r2, r3, #1
  404b3e:	f8cc 4014 	str.w	r4, [ip, #20]
  404b42:	f8cc 4010 	str.w	r4, [ip, #16]
  404b46:	60e0      	str	r0, [r4, #12]
  404b48:	60a0      	str	r0, [r4, #8]
  404b4a:	6062      	str	r2, [r4, #4]
  404b4c:	50e3      	str	r3, [r4, r3]
  404b4e:	e7c7      	b.n	404ae0 <_free_r+0x94>
  404b50:	441f      	add	r7, r3
  404b52:	07cb      	lsls	r3, r1, #31
  404b54:	d407      	bmi.n	404b66 <_free_r+0x11a>
  404b56:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404b5a:	1ae4      	subs	r4, r4, r3
  404b5c:	441f      	add	r7, r3
  404b5e:	68a2      	ldr	r2, [r4, #8]
  404b60:	68e3      	ldr	r3, [r4, #12]
  404b62:	60d3      	str	r3, [r2, #12]
  404b64:	609a      	str	r2, [r3, #8]
  404b66:	4b1e      	ldr	r3, [pc, #120]	; (404be0 <_free_r+0x194>)
  404b68:	681b      	ldr	r3, [r3, #0]
  404b6a:	f047 0201 	orr.w	r2, r7, #1
  404b6e:	429f      	cmp	r7, r3
  404b70:	6062      	str	r2, [r4, #4]
  404b72:	f8cc 4008 	str.w	r4, [ip, #8]
  404b76:	d3b3      	bcc.n	404ae0 <_free_r+0x94>
  404b78:	4b1a      	ldr	r3, [pc, #104]	; (404be4 <_free_r+0x198>)
  404b7a:	4630      	mov	r0, r6
  404b7c:	6819      	ldr	r1, [r3, #0]
  404b7e:	f7ff ff17 	bl	4049b0 <_malloc_trim_r>
  404b82:	e7ad      	b.n	404ae0 <_free_r+0x94>
  404b84:	2101      	movs	r1, #1
  404b86:	e77e      	b.n	404a86 <_free_r+0x3a>
  404b88:	2a14      	cmp	r2, #20
  404b8a:	d80c      	bhi.n	404ba6 <_free_r+0x15a>
  404b8c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  404b90:	0041      	lsls	r1, r0, #1
  404b92:	e791      	b.n	404ab8 <_free_r+0x6c>
  404b94:	684b      	ldr	r3, [r1, #4]
  404b96:	1080      	asrs	r0, r0, #2
  404b98:	2501      	movs	r5, #1
  404b9a:	fa05 f000 	lsl.w	r0, r5, r0
  404b9e:	4303      	orrs	r3, r0
  404ba0:	604b      	str	r3, [r1, #4]
  404ba2:	4613      	mov	r3, r2
  404ba4:	e798      	b.n	404ad8 <_free_r+0x8c>
  404ba6:	2a54      	cmp	r2, #84	; 0x54
  404ba8:	d803      	bhi.n	404bb2 <_free_r+0x166>
  404baa:	0b18      	lsrs	r0, r3, #12
  404bac:	306e      	adds	r0, #110	; 0x6e
  404bae:	0041      	lsls	r1, r0, #1
  404bb0:	e782      	b.n	404ab8 <_free_r+0x6c>
  404bb2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404bb6:	d803      	bhi.n	404bc0 <_free_r+0x174>
  404bb8:	0bd8      	lsrs	r0, r3, #15
  404bba:	3077      	adds	r0, #119	; 0x77
  404bbc:	0041      	lsls	r1, r0, #1
  404bbe:	e77b      	b.n	404ab8 <_free_r+0x6c>
  404bc0:	f240 5154 	movw	r1, #1364	; 0x554
  404bc4:	428a      	cmp	r2, r1
  404bc6:	d803      	bhi.n	404bd0 <_free_r+0x184>
  404bc8:	0c98      	lsrs	r0, r3, #18
  404bca:	307c      	adds	r0, #124	; 0x7c
  404bcc:	0041      	lsls	r1, r0, #1
  404bce:	e773      	b.n	404ab8 <_free_r+0x6c>
  404bd0:	21fc      	movs	r1, #252	; 0xfc
  404bd2:	207e      	movs	r0, #126	; 0x7e
  404bd4:	e770      	b.n	404ab8 <_free_r+0x6c>
  404bd6:	bf00      	nop
  404bd8:	2000047c 	.word	0x2000047c
  404bdc:	20000484 	.word	0x20000484
  404be0:	20000884 	.word	0x20000884
  404be4:	2000093c 	.word	0x2000093c

00404be8 <_fwalk>:
  404be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404bec:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404bf0:	4688      	mov	r8, r1
  404bf2:	d01a      	beq.n	404c2a <_fwalk+0x42>
  404bf4:	2600      	movs	r6, #0
  404bf6:	687d      	ldr	r5, [r7, #4]
  404bf8:	68bc      	ldr	r4, [r7, #8]
  404bfa:	3d01      	subs	r5, #1
  404bfc:	d40f      	bmi.n	404c1e <_fwalk+0x36>
  404bfe:	89a3      	ldrh	r3, [r4, #12]
  404c00:	2b01      	cmp	r3, #1
  404c02:	f105 35ff 	add.w	r5, r5, #4294967295
  404c06:	d906      	bls.n	404c16 <_fwalk+0x2e>
  404c08:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404c0c:	3301      	adds	r3, #1
  404c0e:	4620      	mov	r0, r4
  404c10:	d001      	beq.n	404c16 <_fwalk+0x2e>
  404c12:	47c0      	blx	r8
  404c14:	4306      	orrs	r6, r0
  404c16:	1c6b      	adds	r3, r5, #1
  404c18:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404c1c:	d1ef      	bne.n	404bfe <_fwalk+0x16>
  404c1e:	683f      	ldr	r7, [r7, #0]
  404c20:	2f00      	cmp	r7, #0
  404c22:	d1e8      	bne.n	404bf6 <_fwalk+0xe>
  404c24:	4630      	mov	r0, r6
  404c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c2a:	463e      	mov	r6, r7
  404c2c:	4630      	mov	r0, r6
  404c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c32:	bf00      	nop

00404c34 <_localeconv_r>:
  404c34:	4800      	ldr	r0, [pc, #0]	; (404c38 <_localeconv_r+0x4>)
  404c36:	4770      	bx	lr
  404c38:	20000444 	.word	0x20000444

00404c3c <malloc>:
  404c3c:	4b02      	ldr	r3, [pc, #8]	; (404c48 <malloc+0xc>)
  404c3e:	4601      	mov	r1, r0
  404c40:	6818      	ldr	r0, [r3, #0]
  404c42:	f000 b803 	b.w	404c4c <_malloc_r>
  404c46:	bf00      	nop
  404c48:	20000440 	.word	0x20000440

00404c4c <_malloc_r>:
  404c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c50:	f101 050b 	add.w	r5, r1, #11
  404c54:	2d16      	cmp	r5, #22
  404c56:	b083      	sub	sp, #12
  404c58:	4606      	mov	r6, r0
  404c5a:	d927      	bls.n	404cac <_malloc_r+0x60>
  404c5c:	f035 0507 	bics.w	r5, r5, #7
  404c60:	d427      	bmi.n	404cb2 <_malloc_r+0x66>
  404c62:	42a9      	cmp	r1, r5
  404c64:	d825      	bhi.n	404cb2 <_malloc_r+0x66>
  404c66:	4630      	mov	r0, r6
  404c68:	f000 fbce 	bl	405408 <__malloc_lock>
  404c6c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  404c70:	d226      	bcs.n	404cc0 <_malloc_r+0x74>
  404c72:	4fc1      	ldr	r7, [pc, #772]	; (404f78 <_malloc_r+0x32c>)
  404c74:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  404c78:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  404c7c:	68dc      	ldr	r4, [r3, #12]
  404c7e:	429c      	cmp	r4, r3
  404c80:	f000 81d2 	beq.w	405028 <_malloc_r+0x3dc>
  404c84:	6863      	ldr	r3, [r4, #4]
  404c86:	68e2      	ldr	r2, [r4, #12]
  404c88:	68a1      	ldr	r1, [r4, #8]
  404c8a:	f023 0303 	bic.w	r3, r3, #3
  404c8e:	4423      	add	r3, r4
  404c90:	4630      	mov	r0, r6
  404c92:	685d      	ldr	r5, [r3, #4]
  404c94:	60ca      	str	r2, [r1, #12]
  404c96:	f045 0501 	orr.w	r5, r5, #1
  404c9a:	6091      	str	r1, [r2, #8]
  404c9c:	605d      	str	r5, [r3, #4]
  404c9e:	f000 fbb5 	bl	40540c <__malloc_unlock>
  404ca2:	3408      	adds	r4, #8
  404ca4:	4620      	mov	r0, r4
  404ca6:	b003      	add	sp, #12
  404ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cac:	2510      	movs	r5, #16
  404cae:	42a9      	cmp	r1, r5
  404cb0:	d9d9      	bls.n	404c66 <_malloc_r+0x1a>
  404cb2:	2400      	movs	r4, #0
  404cb4:	230c      	movs	r3, #12
  404cb6:	4620      	mov	r0, r4
  404cb8:	6033      	str	r3, [r6, #0]
  404cba:	b003      	add	sp, #12
  404cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cc0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  404cc4:	f000 808a 	beq.w	404ddc <_malloc_r+0x190>
  404cc8:	f1bc 0f04 	cmp.w	ip, #4
  404ccc:	f200 8160 	bhi.w	404f90 <_malloc_r+0x344>
  404cd0:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  404cd4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  404cd8:	ea4f 014c 	mov.w	r1, ip, lsl #1
  404cdc:	4fa6      	ldr	r7, [pc, #664]	; (404f78 <_malloc_r+0x32c>)
  404cde:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  404ce2:	68cc      	ldr	r4, [r1, #12]
  404ce4:	42a1      	cmp	r1, r4
  404ce6:	d105      	bne.n	404cf4 <_malloc_r+0xa8>
  404ce8:	e00c      	b.n	404d04 <_malloc_r+0xb8>
  404cea:	2b00      	cmp	r3, #0
  404cec:	da7a      	bge.n	404de4 <_malloc_r+0x198>
  404cee:	68e4      	ldr	r4, [r4, #12]
  404cf0:	42a1      	cmp	r1, r4
  404cf2:	d007      	beq.n	404d04 <_malloc_r+0xb8>
  404cf4:	6862      	ldr	r2, [r4, #4]
  404cf6:	f022 0203 	bic.w	r2, r2, #3
  404cfa:	1b53      	subs	r3, r2, r5
  404cfc:	2b0f      	cmp	r3, #15
  404cfe:	ddf4      	ble.n	404cea <_malloc_r+0x9e>
  404d00:	f10c 3cff 	add.w	ip, ip, #4294967295
  404d04:	f10c 0c01 	add.w	ip, ip, #1
  404d08:	4b9b      	ldr	r3, [pc, #620]	; (404f78 <_malloc_r+0x32c>)
  404d0a:	693c      	ldr	r4, [r7, #16]
  404d0c:	f103 0e08 	add.w	lr, r3, #8
  404d10:	4574      	cmp	r4, lr
  404d12:	f000 817e 	beq.w	405012 <_malloc_r+0x3c6>
  404d16:	6861      	ldr	r1, [r4, #4]
  404d18:	f021 0103 	bic.w	r1, r1, #3
  404d1c:	1b4a      	subs	r2, r1, r5
  404d1e:	2a0f      	cmp	r2, #15
  404d20:	f300 8164 	bgt.w	404fec <_malloc_r+0x3a0>
  404d24:	2a00      	cmp	r2, #0
  404d26:	f8c3 e014 	str.w	lr, [r3, #20]
  404d2a:	f8c3 e010 	str.w	lr, [r3, #16]
  404d2e:	da6a      	bge.n	404e06 <_malloc_r+0x1ba>
  404d30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  404d34:	f080 813a 	bcs.w	404fac <_malloc_r+0x360>
  404d38:	08c9      	lsrs	r1, r1, #3
  404d3a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  404d3e:	ea4f 08a1 	mov.w	r8, r1, asr #2
  404d42:	685a      	ldr	r2, [r3, #4]
  404d44:	6881      	ldr	r1, [r0, #8]
  404d46:	60a1      	str	r1, [r4, #8]
  404d48:	f04f 0901 	mov.w	r9, #1
  404d4c:	fa09 f808 	lsl.w	r8, r9, r8
  404d50:	ea48 0202 	orr.w	r2, r8, r2
  404d54:	60e0      	str	r0, [r4, #12]
  404d56:	605a      	str	r2, [r3, #4]
  404d58:	6084      	str	r4, [r0, #8]
  404d5a:	60cc      	str	r4, [r1, #12]
  404d5c:	ea4f 03ac 	mov.w	r3, ip, asr #2
  404d60:	2001      	movs	r0, #1
  404d62:	4098      	lsls	r0, r3
  404d64:	4290      	cmp	r0, r2
  404d66:	d85b      	bhi.n	404e20 <_malloc_r+0x1d4>
  404d68:	4202      	tst	r2, r0
  404d6a:	d106      	bne.n	404d7a <_malloc_r+0x12e>
  404d6c:	f02c 0c03 	bic.w	ip, ip, #3
  404d70:	0040      	lsls	r0, r0, #1
  404d72:	4202      	tst	r2, r0
  404d74:	f10c 0c04 	add.w	ip, ip, #4
  404d78:	d0fa      	beq.n	404d70 <_malloc_r+0x124>
  404d7a:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  404d7e:	4644      	mov	r4, r8
  404d80:	46e1      	mov	r9, ip
  404d82:	68e3      	ldr	r3, [r4, #12]
  404d84:	429c      	cmp	r4, r3
  404d86:	d107      	bne.n	404d98 <_malloc_r+0x14c>
  404d88:	e145      	b.n	405016 <_malloc_r+0x3ca>
  404d8a:	2a00      	cmp	r2, #0
  404d8c:	f280 8156 	bge.w	40503c <_malloc_r+0x3f0>
  404d90:	68db      	ldr	r3, [r3, #12]
  404d92:	429c      	cmp	r4, r3
  404d94:	f000 813f 	beq.w	405016 <_malloc_r+0x3ca>
  404d98:	6859      	ldr	r1, [r3, #4]
  404d9a:	f021 0103 	bic.w	r1, r1, #3
  404d9e:	1b4a      	subs	r2, r1, r5
  404da0:	2a0f      	cmp	r2, #15
  404da2:	ddf2      	ble.n	404d8a <_malloc_r+0x13e>
  404da4:	461c      	mov	r4, r3
  404da6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404daa:	f854 8f08 	ldr.w	r8, [r4, #8]!
  404dae:	1959      	adds	r1, r3, r5
  404db0:	f045 0901 	orr.w	r9, r5, #1
  404db4:	f042 0501 	orr.w	r5, r2, #1
  404db8:	f8c3 9004 	str.w	r9, [r3, #4]
  404dbc:	4630      	mov	r0, r6
  404dbe:	f8c8 c00c 	str.w	ip, [r8, #12]
  404dc2:	f8cc 8008 	str.w	r8, [ip, #8]
  404dc6:	6179      	str	r1, [r7, #20]
  404dc8:	6139      	str	r1, [r7, #16]
  404dca:	f8c1 e00c 	str.w	lr, [r1, #12]
  404dce:	f8c1 e008 	str.w	lr, [r1, #8]
  404dd2:	604d      	str	r5, [r1, #4]
  404dd4:	508a      	str	r2, [r1, r2]
  404dd6:	f000 fb19 	bl	40540c <__malloc_unlock>
  404dda:	e763      	b.n	404ca4 <_malloc_r+0x58>
  404ddc:	217e      	movs	r1, #126	; 0x7e
  404dde:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  404de2:	e77b      	b.n	404cdc <_malloc_r+0x90>
  404de4:	4422      	add	r2, r4
  404de6:	68e3      	ldr	r3, [r4, #12]
  404de8:	6850      	ldr	r0, [r2, #4]
  404dea:	68a1      	ldr	r1, [r4, #8]
  404dec:	f040 0501 	orr.w	r5, r0, #1
  404df0:	60cb      	str	r3, [r1, #12]
  404df2:	4630      	mov	r0, r6
  404df4:	6099      	str	r1, [r3, #8]
  404df6:	6055      	str	r5, [r2, #4]
  404df8:	f000 fb08 	bl	40540c <__malloc_unlock>
  404dfc:	3408      	adds	r4, #8
  404dfe:	4620      	mov	r0, r4
  404e00:	b003      	add	sp, #12
  404e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e06:	4421      	add	r1, r4
  404e08:	4630      	mov	r0, r6
  404e0a:	684b      	ldr	r3, [r1, #4]
  404e0c:	f043 0301 	orr.w	r3, r3, #1
  404e10:	604b      	str	r3, [r1, #4]
  404e12:	f000 fafb 	bl	40540c <__malloc_unlock>
  404e16:	3408      	adds	r4, #8
  404e18:	4620      	mov	r0, r4
  404e1a:	b003      	add	sp, #12
  404e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e20:	68bc      	ldr	r4, [r7, #8]
  404e22:	6863      	ldr	r3, [r4, #4]
  404e24:	f023 0903 	bic.w	r9, r3, #3
  404e28:	45a9      	cmp	r9, r5
  404e2a:	d304      	bcc.n	404e36 <_malloc_r+0x1ea>
  404e2c:	ebc5 0309 	rsb	r3, r5, r9
  404e30:	2b0f      	cmp	r3, #15
  404e32:	f300 8091 	bgt.w	404f58 <_malloc_r+0x30c>
  404e36:	4b51      	ldr	r3, [pc, #324]	; (404f7c <_malloc_r+0x330>)
  404e38:	4a51      	ldr	r2, [pc, #324]	; (404f80 <_malloc_r+0x334>)
  404e3a:	6819      	ldr	r1, [r3, #0]
  404e3c:	6813      	ldr	r3, [r2, #0]
  404e3e:	3301      	adds	r3, #1
  404e40:	eb05 0a01 	add.w	sl, r5, r1
  404e44:	eb04 0b09 	add.w	fp, r4, r9
  404e48:	f000 8161 	beq.w	40510e <_malloc_r+0x4c2>
  404e4c:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  404e50:	f10a 0a0f 	add.w	sl, sl, #15
  404e54:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  404e58:	f02a 0a0f 	bic.w	sl, sl, #15
  404e5c:	4630      	mov	r0, r6
  404e5e:	4651      	mov	r1, sl
  404e60:	9201      	str	r2, [sp, #4]
  404e62:	f000 ffed 	bl	405e40 <_sbrk_r>
  404e66:	f1b0 3fff 	cmp.w	r0, #4294967295
  404e6a:	4680      	mov	r8, r0
  404e6c:	9a01      	ldr	r2, [sp, #4]
  404e6e:	f000 8100 	beq.w	405072 <_malloc_r+0x426>
  404e72:	4583      	cmp	fp, r0
  404e74:	f200 80fa 	bhi.w	40506c <_malloc_r+0x420>
  404e78:	f8df c110 	ldr.w	ip, [pc, #272]	; 404f8c <_malloc_r+0x340>
  404e7c:	f8dc 3000 	ldr.w	r3, [ip]
  404e80:	45c3      	cmp	fp, r8
  404e82:	4453      	add	r3, sl
  404e84:	f8cc 3000 	str.w	r3, [ip]
  404e88:	f000 814a 	beq.w	405120 <_malloc_r+0x4d4>
  404e8c:	6812      	ldr	r2, [r2, #0]
  404e8e:	493c      	ldr	r1, [pc, #240]	; (404f80 <_malloc_r+0x334>)
  404e90:	3201      	adds	r2, #1
  404e92:	bf1b      	ittet	ne
  404e94:	ebcb 0b08 	rsbne	fp, fp, r8
  404e98:	445b      	addne	r3, fp
  404e9a:	f8c1 8000 	streq.w	r8, [r1]
  404e9e:	f8cc 3000 	strne.w	r3, [ip]
  404ea2:	f018 0307 	ands.w	r3, r8, #7
  404ea6:	f000 8113 	beq.w	4050d0 <_malloc_r+0x484>
  404eaa:	f1c3 0208 	rsb	r2, r3, #8
  404eae:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  404eb2:	4490      	add	r8, r2
  404eb4:	3308      	adds	r3, #8
  404eb6:	44c2      	add	sl, r8
  404eb8:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  404ebc:	ebca 0a03 	rsb	sl, sl, r3
  404ec0:	4651      	mov	r1, sl
  404ec2:	4630      	mov	r0, r6
  404ec4:	f8cd c004 	str.w	ip, [sp, #4]
  404ec8:	f000 ffba 	bl	405e40 <_sbrk_r>
  404ecc:	1c43      	adds	r3, r0, #1
  404ece:	f8dd c004 	ldr.w	ip, [sp, #4]
  404ed2:	f000 8135 	beq.w	405140 <_malloc_r+0x4f4>
  404ed6:	ebc8 0200 	rsb	r2, r8, r0
  404eda:	4452      	add	r2, sl
  404edc:	f042 0201 	orr.w	r2, r2, #1
  404ee0:	f8dc 3000 	ldr.w	r3, [ip]
  404ee4:	f8c7 8008 	str.w	r8, [r7, #8]
  404ee8:	4453      	add	r3, sl
  404eea:	42bc      	cmp	r4, r7
  404eec:	f8c8 2004 	str.w	r2, [r8, #4]
  404ef0:	f8cc 3000 	str.w	r3, [ip]
  404ef4:	f8df a094 	ldr.w	sl, [pc, #148]	; 404f8c <_malloc_r+0x340>
  404ef8:	d015      	beq.n	404f26 <_malloc_r+0x2da>
  404efa:	f1b9 0f0f 	cmp.w	r9, #15
  404efe:	f240 80ea 	bls.w	4050d6 <_malloc_r+0x48a>
  404f02:	6861      	ldr	r1, [r4, #4]
  404f04:	f1a9 020c 	sub.w	r2, r9, #12
  404f08:	f022 0207 	bic.w	r2, r2, #7
  404f0c:	f001 0e01 	and.w	lr, r1, #1
  404f10:	18a1      	adds	r1, r4, r2
  404f12:	2005      	movs	r0, #5
  404f14:	ea42 0e0e 	orr.w	lr, r2, lr
  404f18:	2a0f      	cmp	r2, #15
  404f1a:	f8c4 e004 	str.w	lr, [r4, #4]
  404f1e:	6048      	str	r0, [r1, #4]
  404f20:	6088      	str	r0, [r1, #8]
  404f22:	f200 8111 	bhi.w	405148 <_malloc_r+0x4fc>
  404f26:	4a17      	ldr	r2, [pc, #92]	; (404f84 <_malloc_r+0x338>)
  404f28:	68bc      	ldr	r4, [r7, #8]
  404f2a:	6811      	ldr	r1, [r2, #0]
  404f2c:	428b      	cmp	r3, r1
  404f2e:	bf88      	it	hi
  404f30:	6013      	strhi	r3, [r2, #0]
  404f32:	4a15      	ldr	r2, [pc, #84]	; (404f88 <_malloc_r+0x33c>)
  404f34:	6811      	ldr	r1, [r2, #0]
  404f36:	428b      	cmp	r3, r1
  404f38:	bf88      	it	hi
  404f3a:	6013      	strhi	r3, [r2, #0]
  404f3c:	6862      	ldr	r2, [r4, #4]
  404f3e:	f022 0203 	bic.w	r2, r2, #3
  404f42:	4295      	cmp	r5, r2
  404f44:	ebc5 0302 	rsb	r3, r5, r2
  404f48:	d801      	bhi.n	404f4e <_malloc_r+0x302>
  404f4a:	2b0f      	cmp	r3, #15
  404f4c:	dc04      	bgt.n	404f58 <_malloc_r+0x30c>
  404f4e:	4630      	mov	r0, r6
  404f50:	f000 fa5c 	bl	40540c <__malloc_unlock>
  404f54:	2400      	movs	r4, #0
  404f56:	e6a5      	b.n	404ca4 <_malloc_r+0x58>
  404f58:	1962      	adds	r2, r4, r5
  404f5a:	f043 0301 	orr.w	r3, r3, #1
  404f5e:	f045 0501 	orr.w	r5, r5, #1
  404f62:	6065      	str	r5, [r4, #4]
  404f64:	4630      	mov	r0, r6
  404f66:	60ba      	str	r2, [r7, #8]
  404f68:	6053      	str	r3, [r2, #4]
  404f6a:	f000 fa4f 	bl	40540c <__malloc_unlock>
  404f6e:	3408      	adds	r4, #8
  404f70:	4620      	mov	r0, r4
  404f72:	b003      	add	sp, #12
  404f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f78:	2000047c 	.word	0x2000047c
  404f7c:	2000093c 	.word	0x2000093c
  404f80:	20000888 	.word	0x20000888
  404f84:	20000938 	.word	0x20000938
  404f88:	20000934 	.word	0x20000934
  404f8c:	20000940 	.word	0x20000940
  404f90:	f1bc 0f14 	cmp.w	ip, #20
  404f94:	d961      	bls.n	40505a <_malloc_r+0x40e>
  404f96:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  404f9a:	f200 808f 	bhi.w	4050bc <_malloc_r+0x470>
  404f9e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  404fa2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  404fa6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  404faa:	e697      	b.n	404cdc <_malloc_r+0x90>
  404fac:	0a4b      	lsrs	r3, r1, #9
  404fae:	2b04      	cmp	r3, #4
  404fb0:	d958      	bls.n	405064 <_malloc_r+0x418>
  404fb2:	2b14      	cmp	r3, #20
  404fb4:	f200 80ae 	bhi.w	405114 <_malloc_r+0x4c8>
  404fb8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  404fbc:	0050      	lsls	r0, r2, #1
  404fbe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  404fc2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 405180 <_malloc_r+0x534>
  404fc6:	6883      	ldr	r3, [r0, #8]
  404fc8:	4283      	cmp	r3, r0
  404fca:	f000 808a 	beq.w	4050e2 <_malloc_r+0x496>
  404fce:	685a      	ldr	r2, [r3, #4]
  404fd0:	f022 0203 	bic.w	r2, r2, #3
  404fd4:	4291      	cmp	r1, r2
  404fd6:	d202      	bcs.n	404fde <_malloc_r+0x392>
  404fd8:	689b      	ldr	r3, [r3, #8]
  404fda:	4298      	cmp	r0, r3
  404fdc:	d1f7      	bne.n	404fce <_malloc_r+0x382>
  404fde:	68d9      	ldr	r1, [r3, #12]
  404fe0:	687a      	ldr	r2, [r7, #4]
  404fe2:	60e1      	str	r1, [r4, #12]
  404fe4:	60a3      	str	r3, [r4, #8]
  404fe6:	608c      	str	r4, [r1, #8]
  404fe8:	60dc      	str	r4, [r3, #12]
  404fea:	e6b7      	b.n	404d5c <_malloc_r+0x110>
  404fec:	1961      	adds	r1, r4, r5
  404fee:	f042 0701 	orr.w	r7, r2, #1
  404ff2:	f045 0501 	orr.w	r5, r5, #1
  404ff6:	6065      	str	r5, [r4, #4]
  404ff8:	4630      	mov	r0, r6
  404ffa:	6159      	str	r1, [r3, #20]
  404ffc:	6119      	str	r1, [r3, #16]
  404ffe:	f8c1 e00c 	str.w	lr, [r1, #12]
  405002:	f8c1 e008 	str.w	lr, [r1, #8]
  405006:	604f      	str	r7, [r1, #4]
  405008:	508a      	str	r2, [r1, r2]
  40500a:	3408      	adds	r4, #8
  40500c:	f000 f9fe 	bl	40540c <__malloc_unlock>
  405010:	e648      	b.n	404ca4 <_malloc_r+0x58>
  405012:	685a      	ldr	r2, [r3, #4]
  405014:	e6a2      	b.n	404d5c <_malloc_r+0x110>
  405016:	f109 0901 	add.w	r9, r9, #1
  40501a:	f019 0f03 	tst.w	r9, #3
  40501e:	f104 0408 	add.w	r4, r4, #8
  405022:	f47f aeae 	bne.w	404d82 <_malloc_r+0x136>
  405026:	e02d      	b.n	405084 <_malloc_r+0x438>
  405028:	f104 0308 	add.w	r3, r4, #8
  40502c:	6964      	ldr	r4, [r4, #20]
  40502e:	42a3      	cmp	r3, r4
  405030:	bf08      	it	eq
  405032:	f10c 0c02 	addeq.w	ip, ip, #2
  405036:	f43f ae67 	beq.w	404d08 <_malloc_r+0xbc>
  40503a:	e623      	b.n	404c84 <_malloc_r+0x38>
  40503c:	4419      	add	r1, r3
  40503e:	461c      	mov	r4, r3
  405040:	6848      	ldr	r0, [r1, #4]
  405042:	68db      	ldr	r3, [r3, #12]
  405044:	f854 2f08 	ldr.w	r2, [r4, #8]!
  405048:	f040 0501 	orr.w	r5, r0, #1
  40504c:	604d      	str	r5, [r1, #4]
  40504e:	4630      	mov	r0, r6
  405050:	60d3      	str	r3, [r2, #12]
  405052:	609a      	str	r2, [r3, #8]
  405054:	f000 f9da 	bl	40540c <__malloc_unlock>
  405058:	e624      	b.n	404ca4 <_malloc_r+0x58>
  40505a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40505e:	ea4f 014c 	mov.w	r1, ip, lsl #1
  405062:	e63b      	b.n	404cdc <_malloc_r+0x90>
  405064:	098a      	lsrs	r2, r1, #6
  405066:	3238      	adds	r2, #56	; 0x38
  405068:	0050      	lsls	r0, r2, #1
  40506a:	e7a8      	b.n	404fbe <_malloc_r+0x372>
  40506c:	42bc      	cmp	r4, r7
  40506e:	f43f af03 	beq.w	404e78 <_malloc_r+0x22c>
  405072:	68bc      	ldr	r4, [r7, #8]
  405074:	6862      	ldr	r2, [r4, #4]
  405076:	f022 0203 	bic.w	r2, r2, #3
  40507a:	e762      	b.n	404f42 <_malloc_r+0x2f6>
  40507c:	f8d8 8000 	ldr.w	r8, [r8]
  405080:	4598      	cmp	r8, r3
  405082:	d17b      	bne.n	40517c <_malloc_r+0x530>
  405084:	f01c 0f03 	tst.w	ip, #3
  405088:	f1a8 0308 	sub.w	r3, r8, #8
  40508c:	f10c 3cff 	add.w	ip, ip, #4294967295
  405090:	d1f4      	bne.n	40507c <_malloc_r+0x430>
  405092:	687b      	ldr	r3, [r7, #4]
  405094:	ea23 0300 	bic.w	r3, r3, r0
  405098:	607b      	str	r3, [r7, #4]
  40509a:	0040      	lsls	r0, r0, #1
  40509c:	4298      	cmp	r0, r3
  40509e:	f63f aebf 	bhi.w	404e20 <_malloc_r+0x1d4>
  4050a2:	2800      	cmp	r0, #0
  4050a4:	f43f aebc 	beq.w	404e20 <_malloc_r+0x1d4>
  4050a8:	4203      	tst	r3, r0
  4050aa:	46cc      	mov	ip, r9
  4050ac:	f47f ae65 	bne.w	404d7a <_malloc_r+0x12e>
  4050b0:	0040      	lsls	r0, r0, #1
  4050b2:	4203      	tst	r3, r0
  4050b4:	f10c 0c04 	add.w	ip, ip, #4
  4050b8:	d0fa      	beq.n	4050b0 <_malloc_r+0x464>
  4050ba:	e65e      	b.n	404d7a <_malloc_r+0x12e>
  4050bc:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  4050c0:	d81a      	bhi.n	4050f8 <_malloc_r+0x4ac>
  4050c2:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  4050c6:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  4050ca:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4050ce:	e605      	b.n	404cdc <_malloc_r+0x90>
  4050d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4050d4:	e6ef      	b.n	404eb6 <_malloc_r+0x26a>
  4050d6:	2301      	movs	r3, #1
  4050d8:	f8c8 3004 	str.w	r3, [r8, #4]
  4050dc:	4644      	mov	r4, r8
  4050de:	2200      	movs	r2, #0
  4050e0:	e72f      	b.n	404f42 <_malloc_r+0x2f6>
  4050e2:	1091      	asrs	r1, r2, #2
  4050e4:	2001      	movs	r0, #1
  4050e6:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4050ea:	fa00 f101 	lsl.w	r1, r0, r1
  4050ee:	430a      	orrs	r2, r1
  4050f0:	f8c8 2004 	str.w	r2, [r8, #4]
  4050f4:	4619      	mov	r1, r3
  4050f6:	e774      	b.n	404fe2 <_malloc_r+0x396>
  4050f8:	f240 5354 	movw	r3, #1364	; 0x554
  4050fc:	459c      	cmp	ip, r3
  4050fe:	d81b      	bhi.n	405138 <_malloc_r+0x4ec>
  405100:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  405104:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  405108:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40510c:	e5e6      	b.n	404cdc <_malloc_r+0x90>
  40510e:	f10a 0a10 	add.w	sl, sl, #16
  405112:	e6a3      	b.n	404e5c <_malloc_r+0x210>
  405114:	2b54      	cmp	r3, #84	; 0x54
  405116:	d81f      	bhi.n	405158 <_malloc_r+0x50c>
  405118:	0b0a      	lsrs	r2, r1, #12
  40511a:	326e      	adds	r2, #110	; 0x6e
  40511c:	0050      	lsls	r0, r2, #1
  40511e:	e74e      	b.n	404fbe <_malloc_r+0x372>
  405120:	f3cb 010b 	ubfx	r1, fp, #0, #12
  405124:	2900      	cmp	r1, #0
  405126:	f47f aeb1 	bne.w	404e8c <_malloc_r+0x240>
  40512a:	eb0a 0109 	add.w	r1, sl, r9
  40512e:	68ba      	ldr	r2, [r7, #8]
  405130:	f041 0101 	orr.w	r1, r1, #1
  405134:	6051      	str	r1, [r2, #4]
  405136:	e6f6      	b.n	404f26 <_malloc_r+0x2da>
  405138:	21fc      	movs	r1, #252	; 0xfc
  40513a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40513e:	e5cd      	b.n	404cdc <_malloc_r+0x90>
  405140:	2201      	movs	r2, #1
  405142:	f04f 0a00 	mov.w	sl, #0
  405146:	e6cb      	b.n	404ee0 <_malloc_r+0x294>
  405148:	f104 0108 	add.w	r1, r4, #8
  40514c:	4630      	mov	r0, r6
  40514e:	f7ff fc7d 	bl	404a4c <_free_r>
  405152:	f8da 3000 	ldr.w	r3, [sl]
  405156:	e6e6      	b.n	404f26 <_malloc_r+0x2da>
  405158:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40515c:	d803      	bhi.n	405166 <_malloc_r+0x51a>
  40515e:	0bca      	lsrs	r2, r1, #15
  405160:	3277      	adds	r2, #119	; 0x77
  405162:	0050      	lsls	r0, r2, #1
  405164:	e72b      	b.n	404fbe <_malloc_r+0x372>
  405166:	f240 5254 	movw	r2, #1364	; 0x554
  40516a:	4293      	cmp	r3, r2
  40516c:	d803      	bhi.n	405176 <_malloc_r+0x52a>
  40516e:	0c8a      	lsrs	r2, r1, #18
  405170:	327c      	adds	r2, #124	; 0x7c
  405172:	0050      	lsls	r0, r2, #1
  405174:	e723      	b.n	404fbe <_malloc_r+0x372>
  405176:	20fc      	movs	r0, #252	; 0xfc
  405178:	227e      	movs	r2, #126	; 0x7e
  40517a:	e720      	b.n	404fbe <_malloc_r+0x372>
  40517c:	687b      	ldr	r3, [r7, #4]
  40517e:	e78c      	b.n	40509a <_malloc_r+0x44e>
  405180:	2000047c 	.word	0x2000047c

00405184 <memchr>:
  405184:	0783      	lsls	r3, r0, #30
  405186:	b470      	push	{r4, r5, r6}
  405188:	b2c9      	uxtb	r1, r1
  40518a:	d03f      	beq.n	40520c <memchr+0x88>
  40518c:	1e54      	subs	r4, r2, #1
  40518e:	b32a      	cbz	r2, 4051dc <memchr+0x58>
  405190:	7803      	ldrb	r3, [r0, #0]
  405192:	428b      	cmp	r3, r1
  405194:	d023      	beq.n	4051de <memchr+0x5a>
  405196:	1c43      	adds	r3, r0, #1
  405198:	e004      	b.n	4051a4 <memchr+0x20>
  40519a:	b1fc      	cbz	r4, 4051dc <memchr+0x58>
  40519c:	7804      	ldrb	r4, [r0, #0]
  40519e:	428c      	cmp	r4, r1
  4051a0:	d01d      	beq.n	4051de <memchr+0x5a>
  4051a2:	4614      	mov	r4, r2
  4051a4:	f013 0f03 	tst.w	r3, #3
  4051a8:	4618      	mov	r0, r3
  4051aa:	f104 32ff 	add.w	r2, r4, #4294967295
  4051ae:	f103 0301 	add.w	r3, r3, #1
  4051b2:	d1f2      	bne.n	40519a <memchr+0x16>
  4051b4:	2c03      	cmp	r4, #3
  4051b6:	d814      	bhi.n	4051e2 <memchr+0x5e>
  4051b8:	1e65      	subs	r5, r4, #1
  4051ba:	b34c      	cbz	r4, 405210 <memchr+0x8c>
  4051bc:	7803      	ldrb	r3, [r0, #0]
  4051be:	428b      	cmp	r3, r1
  4051c0:	d00d      	beq.n	4051de <memchr+0x5a>
  4051c2:	1c42      	adds	r2, r0, #1
  4051c4:	2300      	movs	r3, #0
  4051c6:	e002      	b.n	4051ce <memchr+0x4a>
  4051c8:	7804      	ldrb	r4, [r0, #0]
  4051ca:	428c      	cmp	r4, r1
  4051cc:	d007      	beq.n	4051de <memchr+0x5a>
  4051ce:	42ab      	cmp	r3, r5
  4051d0:	4610      	mov	r0, r2
  4051d2:	f103 0301 	add.w	r3, r3, #1
  4051d6:	f102 0201 	add.w	r2, r2, #1
  4051da:	d1f5      	bne.n	4051c8 <memchr+0x44>
  4051dc:	2000      	movs	r0, #0
  4051de:	bc70      	pop	{r4, r5, r6}
  4051e0:	4770      	bx	lr
  4051e2:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  4051e6:	4603      	mov	r3, r0
  4051e8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4051ec:	4618      	mov	r0, r3
  4051ee:	3304      	adds	r3, #4
  4051f0:	6802      	ldr	r2, [r0, #0]
  4051f2:	4072      	eors	r2, r6
  4051f4:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  4051f8:	ea25 0202 	bic.w	r2, r5, r2
  4051fc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  405200:	d1da      	bne.n	4051b8 <memchr+0x34>
  405202:	3c04      	subs	r4, #4
  405204:	2c03      	cmp	r4, #3
  405206:	4618      	mov	r0, r3
  405208:	d8f0      	bhi.n	4051ec <memchr+0x68>
  40520a:	e7d5      	b.n	4051b8 <memchr+0x34>
  40520c:	4614      	mov	r4, r2
  40520e:	e7d1      	b.n	4051b4 <memchr+0x30>
  405210:	4620      	mov	r0, r4
  405212:	e7e4      	b.n	4051de <memchr+0x5a>

00405214 <memcpy>:
  405214:	4684      	mov	ip, r0
  405216:	ea41 0300 	orr.w	r3, r1, r0
  40521a:	f013 0303 	ands.w	r3, r3, #3
  40521e:	d16d      	bne.n	4052fc <memcpy+0xe8>
  405220:	3a40      	subs	r2, #64	; 0x40
  405222:	d341      	bcc.n	4052a8 <memcpy+0x94>
  405224:	f851 3b04 	ldr.w	r3, [r1], #4
  405228:	f840 3b04 	str.w	r3, [r0], #4
  40522c:	f851 3b04 	ldr.w	r3, [r1], #4
  405230:	f840 3b04 	str.w	r3, [r0], #4
  405234:	f851 3b04 	ldr.w	r3, [r1], #4
  405238:	f840 3b04 	str.w	r3, [r0], #4
  40523c:	f851 3b04 	ldr.w	r3, [r1], #4
  405240:	f840 3b04 	str.w	r3, [r0], #4
  405244:	f851 3b04 	ldr.w	r3, [r1], #4
  405248:	f840 3b04 	str.w	r3, [r0], #4
  40524c:	f851 3b04 	ldr.w	r3, [r1], #4
  405250:	f840 3b04 	str.w	r3, [r0], #4
  405254:	f851 3b04 	ldr.w	r3, [r1], #4
  405258:	f840 3b04 	str.w	r3, [r0], #4
  40525c:	f851 3b04 	ldr.w	r3, [r1], #4
  405260:	f840 3b04 	str.w	r3, [r0], #4
  405264:	f851 3b04 	ldr.w	r3, [r1], #4
  405268:	f840 3b04 	str.w	r3, [r0], #4
  40526c:	f851 3b04 	ldr.w	r3, [r1], #4
  405270:	f840 3b04 	str.w	r3, [r0], #4
  405274:	f851 3b04 	ldr.w	r3, [r1], #4
  405278:	f840 3b04 	str.w	r3, [r0], #4
  40527c:	f851 3b04 	ldr.w	r3, [r1], #4
  405280:	f840 3b04 	str.w	r3, [r0], #4
  405284:	f851 3b04 	ldr.w	r3, [r1], #4
  405288:	f840 3b04 	str.w	r3, [r0], #4
  40528c:	f851 3b04 	ldr.w	r3, [r1], #4
  405290:	f840 3b04 	str.w	r3, [r0], #4
  405294:	f851 3b04 	ldr.w	r3, [r1], #4
  405298:	f840 3b04 	str.w	r3, [r0], #4
  40529c:	f851 3b04 	ldr.w	r3, [r1], #4
  4052a0:	f840 3b04 	str.w	r3, [r0], #4
  4052a4:	3a40      	subs	r2, #64	; 0x40
  4052a6:	d2bd      	bcs.n	405224 <memcpy+0x10>
  4052a8:	3230      	adds	r2, #48	; 0x30
  4052aa:	d311      	bcc.n	4052d0 <memcpy+0xbc>
  4052ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4052b0:	f840 3b04 	str.w	r3, [r0], #4
  4052b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4052b8:	f840 3b04 	str.w	r3, [r0], #4
  4052bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4052c0:	f840 3b04 	str.w	r3, [r0], #4
  4052c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4052c8:	f840 3b04 	str.w	r3, [r0], #4
  4052cc:	3a10      	subs	r2, #16
  4052ce:	d2ed      	bcs.n	4052ac <memcpy+0x98>
  4052d0:	320c      	adds	r2, #12
  4052d2:	d305      	bcc.n	4052e0 <memcpy+0xcc>
  4052d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4052d8:	f840 3b04 	str.w	r3, [r0], #4
  4052dc:	3a04      	subs	r2, #4
  4052de:	d2f9      	bcs.n	4052d4 <memcpy+0xc0>
  4052e0:	3204      	adds	r2, #4
  4052e2:	d008      	beq.n	4052f6 <memcpy+0xe2>
  4052e4:	07d2      	lsls	r2, r2, #31
  4052e6:	bf1c      	itt	ne
  4052e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4052ec:	f800 3b01 	strbne.w	r3, [r0], #1
  4052f0:	d301      	bcc.n	4052f6 <memcpy+0xe2>
  4052f2:	880b      	ldrh	r3, [r1, #0]
  4052f4:	8003      	strh	r3, [r0, #0]
  4052f6:	4660      	mov	r0, ip
  4052f8:	4770      	bx	lr
  4052fa:	bf00      	nop
  4052fc:	2a08      	cmp	r2, #8
  4052fe:	d313      	bcc.n	405328 <memcpy+0x114>
  405300:	078b      	lsls	r3, r1, #30
  405302:	d08d      	beq.n	405220 <memcpy+0xc>
  405304:	f010 0303 	ands.w	r3, r0, #3
  405308:	d08a      	beq.n	405220 <memcpy+0xc>
  40530a:	f1c3 0304 	rsb	r3, r3, #4
  40530e:	1ad2      	subs	r2, r2, r3
  405310:	07db      	lsls	r3, r3, #31
  405312:	bf1c      	itt	ne
  405314:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405318:	f800 3b01 	strbne.w	r3, [r0], #1
  40531c:	d380      	bcc.n	405220 <memcpy+0xc>
  40531e:	f831 3b02 	ldrh.w	r3, [r1], #2
  405322:	f820 3b02 	strh.w	r3, [r0], #2
  405326:	e77b      	b.n	405220 <memcpy+0xc>
  405328:	3a04      	subs	r2, #4
  40532a:	d3d9      	bcc.n	4052e0 <memcpy+0xcc>
  40532c:	3a01      	subs	r2, #1
  40532e:	f811 3b01 	ldrb.w	r3, [r1], #1
  405332:	f800 3b01 	strb.w	r3, [r0], #1
  405336:	d2f9      	bcs.n	40532c <memcpy+0x118>
  405338:	780b      	ldrb	r3, [r1, #0]
  40533a:	7003      	strb	r3, [r0, #0]
  40533c:	784b      	ldrb	r3, [r1, #1]
  40533e:	7043      	strb	r3, [r0, #1]
  405340:	788b      	ldrb	r3, [r1, #2]
  405342:	7083      	strb	r3, [r0, #2]
  405344:	4660      	mov	r0, ip
  405346:	4770      	bx	lr

00405348 <memmove>:
  405348:	4288      	cmp	r0, r1
  40534a:	b4f0      	push	{r4, r5, r6, r7}
  40534c:	d910      	bls.n	405370 <memmove+0x28>
  40534e:	188c      	adds	r4, r1, r2
  405350:	42a0      	cmp	r0, r4
  405352:	d20d      	bcs.n	405370 <memmove+0x28>
  405354:	1885      	adds	r5, r0, r2
  405356:	1e53      	subs	r3, r2, #1
  405358:	b142      	cbz	r2, 40536c <memmove+0x24>
  40535a:	4621      	mov	r1, r4
  40535c:	462a      	mov	r2, r5
  40535e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  405362:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405366:	3b01      	subs	r3, #1
  405368:	1c5c      	adds	r4, r3, #1
  40536a:	d1f8      	bne.n	40535e <memmove+0x16>
  40536c:	bcf0      	pop	{r4, r5, r6, r7}
  40536e:	4770      	bx	lr
  405370:	2a0f      	cmp	r2, #15
  405372:	d93f      	bls.n	4053f4 <memmove+0xac>
  405374:	ea40 0301 	orr.w	r3, r0, r1
  405378:	079b      	lsls	r3, r3, #30
  40537a:	d13f      	bne.n	4053fc <memmove+0xb4>
  40537c:	f1a2 0710 	sub.w	r7, r2, #16
  405380:	093f      	lsrs	r7, r7, #4
  405382:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  405386:	3610      	adds	r6, #16
  405388:	460c      	mov	r4, r1
  40538a:	4603      	mov	r3, r0
  40538c:	6825      	ldr	r5, [r4, #0]
  40538e:	601d      	str	r5, [r3, #0]
  405390:	6865      	ldr	r5, [r4, #4]
  405392:	605d      	str	r5, [r3, #4]
  405394:	68a5      	ldr	r5, [r4, #8]
  405396:	609d      	str	r5, [r3, #8]
  405398:	68e5      	ldr	r5, [r4, #12]
  40539a:	60dd      	str	r5, [r3, #12]
  40539c:	3310      	adds	r3, #16
  40539e:	42b3      	cmp	r3, r6
  4053a0:	f104 0410 	add.w	r4, r4, #16
  4053a4:	d1f2      	bne.n	40538c <memmove+0x44>
  4053a6:	1c7b      	adds	r3, r7, #1
  4053a8:	f002 0c0f 	and.w	ip, r2, #15
  4053ac:	011b      	lsls	r3, r3, #4
  4053ae:	f1bc 0f03 	cmp.w	ip, #3
  4053b2:	4419      	add	r1, r3
  4053b4:	4403      	add	r3, r0
  4053b6:	d923      	bls.n	405400 <memmove+0xb8>
  4053b8:	460e      	mov	r6, r1
  4053ba:	461d      	mov	r5, r3
  4053bc:	4664      	mov	r4, ip
  4053be:	3c04      	subs	r4, #4
  4053c0:	f856 7b04 	ldr.w	r7, [r6], #4
  4053c4:	f845 7b04 	str.w	r7, [r5], #4
  4053c8:	2c03      	cmp	r4, #3
  4053ca:	d8f8      	bhi.n	4053be <memmove+0x76>
  4053cc:	f1ac 0404 	sub.w	r4, ip, #4
  4053d0:	f024 0403 	bic.w	r4, r4, #3
  4053d4:	3404      	adds	r4, #4
  4053d6:	f002 0203 	and.w	r2, r2, #3
  4053da:	4423      	add	r3, r4
  4053dc:	4421      	add	r1, r4
  4053de:	2a00      	cmp	r2, #0
  4053e0:	d0c4      	beq.n	40536c <memmove+0x24>
  4053e2:	441a      	add	r2, r3
  4053e4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4053e8:	f803 4b01 	strb.w	r4, [r3], #1
  4053ec:	4293      	cmp	r3, r2
  4053ee:	d1f9      	bne.n	4053e4 <memmove+0x9c>
  4053f0:	bcf0      	pop	{r4, r5, r6, r7}
  4053f2:	4770      	bx	lr
  4053f4:	4603      	mov	r3, r0
  4053f6:	2a00      	cmp	r2, #0
  4053f8:	d1f3      	bne.n	4053e2 <memmove+0x9a>
  4053fa:	e7b7      	b.n	40536c <memmove+0x24>
  4053fc:	4603      	mov	r3, r0
  4053fe:	e7f0      	b.n	4053e2 <memmove+0x9a>
  405400:	4662      	mov	r2, ip
  405402:	2a00      	cmp	r2, #0
  405404:	d1ed      	bne.n	4053e2 <memmove+0x9a>
  405406:	e7b1      	b.n	40536c <memmove+0x24>

00405408 <__malloc_lock>:
  405408:	4770      	bx	lr
  40540a:	bf00      	nop

0040540c <__malloc_unlock>:
  40540c:	4770      	bx	lr
  40540e:	bf00      	nop

00405410 <_Balloc>:
  405410:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  405412:	b570      	push	{r4, r5, r6, lr}
  405414:	4605      	mov	r5, r0
  405416:	460c      	mov	r4, r1
  405418:	b14a      	cbz	r2, 40542e <_Balloc+0x1e>
  40541a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40541e:	b180      	cbz	r0, 405442 <_Balloc+0x32>
  405420:	6801      	ldr	r1, [r0, #0]
  405422:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  405426:	2200      	movs	r2, #0
  405428:	6102      	str	r2, [r0, #16]
  40542a:	60c2      	str	r2, [r0, #12]
  40542c:	bd70      	pop	{r4, r5, r6, pc}
  40542e:	2221      	movs	r2, #33	; 0x21
  405430:	2104      	movs	r1, #4
  405432:	f000 fe41 	bl	4060b8 <_calloc_r>
  405436:	64e8      	str	r0, [r5, #76]	; 0x4c
  405438:	4602      	mov	r2, r0
  40543a:	2800      	cmp	r0, #0
  40543c:	d1ed      	bne.n	40541a <_Balloc+0xa>
  40543e:	2000      	movs	r0, #0
  405440:	bd70      	pop	{r4, r5, r6, pc}
  405442:	2101      	movs	r1, #1
  405444:	fa01 f604 	lsl.w	r6, r1, r4
  405448:	1d72      	adds	r2, r6, #5
  40544a:	4628      	mov	r0, r5
  40544c:	0092      	lsls	r2, r2, #2
  40544e:	f000 fe33 	bl	4060b8 <_calloc_r>
  405452:	2800      	cmp	r0, #0
  405454:	d0f3      	beq.n	40543e <_Balloc+0x2e>
  405456:	6044      	str	r4, [r0, #4]
  405458:	6086      	str	r6, [r0, #8]
  40545a:	e7e4      	b.n	405426 <_Balloc+0x16>

0040545c <_Bfree>:
  40545c:	b131      	cbz	r1, 40546c <_Bfree+0x10>
  40545e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405460:	684a      	ldr	r2, [r1, #4]
  405462:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405466:	6008      	str	r0, [r1, #0]
  405468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40546c:	4770      	bx	lr
  40546e:	bf00      	nop

00405470 <__multadd>:
  405470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405474:	f8d1 8010 	ldr.w	r8, [r1, #16]
  405478:	b082      	sub	sp, #8
  40547a:	4689      	mov	r9, r1
  40547c:	4682      	mov	sl, r0
  40547e:	f101 0514 	add.w	r5, r1, #20
  405482:	2400      	movs	r4, #0
  405484:	682f      	ldr	r7, [r5, #0]
  405486:	b2be      	uxth	r6, r7
  405488:	0c3f      	lsrs	r7, r7, #16
  40548a:	fb02 3606 	mla	r6, r2, r6, r3
  40548e:	fb02 f307 	mul.w	r3, r2, r7
  405492:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  405496:	3401      	adds	r4, #1
  405498:	b2b6      	uxth	r6, r6
  40549a:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  40549e:	45a0      	cmp	r8, r4
  4054a0:	f845 6b04 	str.w	r6, [r5], #4
  4054a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4054a8:	dcec      	bgt.n	405484 <__multadd+0x14>
  4054aa:	b153      	cbz	r3, 4054c2 <__multadd+0x52>
  4054ac:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4054b0:	4590      	cmp	r8, r2
  4054b2:	da0a      	bge.n	4054ca <__multadd+0x5a>
  4054b4:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  4054b8:	f108 0201 	add.w	r2, r8, #1
  4054bc:	614b      	str	r3, [r1, #20]
  4054be:	f8c9 2010 	str.w	r2, [r9, #16]
  4054c2:	4648      	mov	r0, r9
  4054c4:	b002      	add	sp, #8
  4054c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054ca:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4054ce:	9301      	str	r3, [sp, #4]
  4054d0:	3101      	adds	r1, #1
  4054d2:	4650      	mov	r0, sl
  4054d4:	f7ff ff9c 	bl	405410 <_Balloc>
  4054d8:	f8d9 2010 	ldr.w	r2, [r9, #16]
  4054dc:	3202      	adds	r2, #2
  4054de:	f109 010c 	add.w	r1, r9, #12
  4054e2:	4604      	mov	r4, r0
  4054e4:	0092      	lsls	r2, r2, #2
  4054e6:	300c      	adds	r0, #12
  4054e8:	f7ff fe94 	bl	405214 <memcpy>
  4054ec:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  4054f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4054f4:	9b01      	ldr	r3, [sp, #4]
  4054f6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4054fa:	f8c9 0000 	str.w	r0, [r9]
  4054fe:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  405502:	46a1      	mov	r9, r4
  405504:	e7d6      	b.n	4054b4 <__multadd+0x44>
  405506:	bf00      	nop

00405508 <__hi0bits>:
  405508:	0c03      	lsrs	r3, r0, #16
  40550a:	041b      	lsls	r3, r3, #16
  40550c:	b9b3      	cbnz	r3, 40553c <__hi0bits+0x34>
  40550e:	0400      	lsls	r0, r0, #16
  405510:	2310      	movs	r3, #16
  405512:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  405516:	bf04      	itt	eq
  405518:	0200      	lsleq	r0, r0, #8
  40551a:	3308      	addeq	r3, #8
  40551c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  405520:	bf04      	itt	eq
  405522:	0100      	lsleq	r0, r0, #4
  405524:	3304      	addeq	r3, #4
  405526:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40552a:	bf04      	itt	eq
  40552c:	0080      	lsleq	r0, r0, #2
  40552e:	3302      	addeq	r3, #2
  405530:	2800      	cmp	r0, #0
  405532:	db07      	blt.n	405544 <__hi0bits+0x3c>
  405534:	0042      	lsls	r2, r0, #1
  405536:	d403      	bmi.n	405540 <__hi0bits+0x38>
  405538:	2020      	movs	r0, #32
  40553a:	4770      	bx	lr
  40553c:	2300      	movs	r3, #0
  40553e:	e7e8      	b.n	405512 <__hi0bits+0xa>
  405540:	1c58      	adds	r0, r3, #1
  405542:	4770      	bx	lr
  405544:	4618      	mov	r0, r3
  405546:	4770      	bx	lr

00405548 <__lo0bits>:
  405548:	6803      	ldr	r3, [r0, #0]
  40554a:	f013 0207 	ands.w	r2, r3, #7
  40554e:	d007      	beq.n	405560 <__lo0bits+0x18>
  405550:	07d9      	lsls	r1, r3, #31
  405552:	d420      	bmi.n	405596 <__lo0bits+0x4e>
  405554:	079a      	lsls	r2, r3, #30
  405556:	d420      	bmi.n	40559a <__lo0bits+0x52>
  405558:	089b      	lsrs	r3, r3, #2
  40555a:	6003      	str	r3, [r0, #0]
  40555c:	2002      	movs	r0, #2
  40555e:	4770      	bx	lr
  405560:	b299      	uxth	r1, r3
  405562:	b909      	cbnz	r1, 405568 <__lo0bits+0x20>
  405564:	0c1b      	lsrs	r3, r3, #16
  405566:	2210      	movs	r2, #16
  405568:	f013 0fff 	tst.w	r3, #255	; 0xff
  40556c:	bf04      	itt	eq
  40556e:	0a1b      	lsreq	r3, r3, #8
  405570:	3208      	addeq	r2, #8
  405572:	0719      	lsls	r1, r3, #28
  405574:	bf04      	itt	eq
  405576:	091b      	lsreq	r3, r3, #4
  405578:	3204      	addeq	r2, #4
  40557a:	0799      	lsls	r1, r3, #30
  40557c:	bf04      	itt	eq
  40557e:	089b      	lsreq	r3, r3, #2
  405580:	3202      	addeq	r2, #2
  405582:	07d9      	lsls	r1, r3, #31
  405584:	d404      	bmi.n	405590 <__lo0bits+0x48>
  405586:	085b      	lsrs	r3, r3, #1
  405588:	d101      	bne.n	40558e <__lo0bits+0x46>
  40558a:	2020      	movs	r0, #32
  40558c:	4770      	bx	lr
  40558e:	3201      	adds	r2, #1
  405590:	6003      	str	r3, [r0, #0]
  405592:	4610      	mov	r0, r2
  405594:	4770      	bx	lr
  405596:	2000      	movs	r0, #0
  405598:	4770      	bx	lr
  40559a:	085b      	lsrs	r3, r3, #1
  40559c:	6003      	str	r3, [r0, #0]
  40559e:	2001      	movs	r0, #1
  4055a0:	4770      	bx	lr
  4055a2:	bf00      	nop

004055a4 <__i2b>:
  4055a4:	b510      	push	{r4, lr}
  4055a6:	460c      	mov	r4, r1
  4055a8:	2101      	movs	r1, #1
  4055aa:	f7ff ff31 	bl	405410 <_Balloc>
  4055ae:	2201      	movs	r2, #1
  4055b0:	6144      	str	r4, [r0, #20]
  4055b2:	6102      	str	r2, [r0, #16]
  4055b4:	bd10      	pop	{r4, pc}
  4055b6:	bf00      	nop

004055b8 <__multiply>:
  4055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4055bc:	690d      	ldr	r5, [r1, #16]
  4055be:	f8d2 9010 	ldr.w	r9, [r2, #16]
  4055c2:	454d      	cmp	r5, r9
  4055c4:	b085      	sub	sp, #20
  4055c6:	460c      	mov	r4, r1
  4055c8:	4692      	mov	sl, r2
  4055ca:	da04      	bge.n	4055d6 <__multiply+0x1e>
  4055cc:	462a      	mov	r2, r5
  4055ce:	4654      	mov	r4, sl
  4055d0:	464d      	mov	r5, r9
  4055d2:	468a      	mov	sl, r1
  4055d4:	4691      	mov	r9, r2
  4055d6:	68a3      	ldr	r3, [r4, #8]
  4055d8:	6861      	ldr	r1, [r4, #4]
  4055da:	eb05 0709 	add.w	r7, r5, r9
  4055de:	429f      	cmp	r7, r3
  4055e0:	bfc8      	it	gt
  4055e2:	3101      	addgt	r1, #1
  4055e4:	f7ff ff14 	bl	405410 <_Balloc>
  4055e8:	f100 0614 	add.w	r6, r0, #20
  4055ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  4055f0:	4546      	cmp	r6, r8
  4055f2:	9001      	str	r0, [sp, #4]
  4055f4:	d205      	bcs.n	405602 <__multiply+0x4a>
  4055f6:	4633      	mov	r3, r6
  4055f8:	2000      	movs	r0, #0
  4055fa:	f843 0b04 	str.w	r0, [r3], #4
  4055fe:	4598      	cmp	r8, r3
  405600:	d8fb      	bhi.n	4055fa <__multiply+0x42>
  405602:	f10a 0c14 	add.w	ip, sl, #20
  405606:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  40560a:	3414      	adds	r4, #20
  40560c:	45cc      	cmp	ip, r9
  40560e:	9400      	str	r4, [sp, #0]
  405610:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  405614:	d25b      	bcs.n	4056ce <__multiply+0x116>
  405616:	f8cd 8008 	str.w	r8, [sp, #8]
  40561a:	9703      	str	r7, [sp, #12]
  40561c:	46c8      	mov	r8, r9
  40561e:	f85c 3b04 	ldr.w	r3, [ip], #4
  405622:	b29c      	uxth	r4, r3
  405624:	b324      	cbz	r4, 405670 <__multiply+0xb8>
  405626:	9a00      	ldr	r2, [sp, #0]
  405628:	4633      	mov	r3, r6
  40562a:	f04f 0900 	mov.w	r9, #0
  40562e:	e000      	b.n	405632 <__multiply+0x7a>
  405630:	460b      	mov	r3, r1
  405632:	f852 7b04 	ldr.w	r7, [r2], #4
  405636:	6819      	ldr	r1, [r3, #0]
  405638:	fa1f fb87 	uxth.w	fp, r7
  40563c:	fa1f fa81 	uxth.w	sl, r1
  405640:	0c38      	lsrs	r0, r7, #16
  405642:	0c09      	lsrs	r1, r1, #16
  405644:	fb04 a70b 	mla	r7, r4, fp, sl
  405648:	44b9      	add	r9, r7
  40564a:	fb04 1000 	mla	r0, r4, r0, r1
  40564e:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  405652:	4619      	mov	r1, r3
  405654:	fa1f f989 	uxth.w	r9, r9
  405658:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  40565c:	4295      	cmp	r5, r2
  40565e:	ea4f 4910 	mov.w	r9, r0, lsr #16
  405662:	f841 7b04 	str.w	r7, [r1], #4
  405666:	d8e3      	bhi.n	405630 <__multiply+0x78>
  405668:	f8c3 9004 	str.w	r9, [r3, #4]
  40566c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  405670:	ea5f 4913 	movs.w	r9, r3, lsr #16
  405674:	d024      	beq.n	4056c0 <__multiply+0x108>
  405676:	f8d6 a000 	ldr.w	sl, [r6]
  40567a:	9b00      	ldr	r3, [sp, #0]
  40567c:	4650      	mov	r0, sl
  40567e:	4631      	mov	r1, r6
  405680:	f04f 0b00 	mov.w	fp, #0
  405684:	e000      	b.n	405688 <__multiply+0xd0>
  405686:	4611      	mov	r1, r2
  405688:	881a      	ldrh	r2, [r3, #0]
  40568a:	0c00      	lsrs	r0, r0, #16
  40568c:	fb09 0002 	mla	r0, r9, r2, r0
  405690:	4483      	add	fp, r0
  405692:	fa1f fa8a 	uxth.w	sl, sl
  405696:	460a      	mov	r2, r1
  405698:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  40569c:	f842 0b04 	str.w	r0, [r2], #4
  4056a0:	f853 7b04 	ldr.w	r7, [r3], #4
  4056a4:	6848      	ldr	r0, [r1, #4]
  4056a6:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4056aa:	b284      	uxth	r4, r0
  4056ac:	fb09 4a0a 	mla	sl, r9, sl, r4
  4056b0:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  4056b4:	429d      	cmp	r5, r3
  4056b6:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  4056ba:	d8e4      	bhi.n	405686 <__multiply+0xce>
  4056bc:	f8c1 a004 	str.w	sl, [r1, #4]
  4056c0:	45e0      	cmp	r8, ip
  4056c2:	f106 0604 	add.w	r6, r6, #4
  4056c6:	d8aa      	bhi.n	40561e <__multiply+0x66>
  4056c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4056cc:	9f03      	ldr	r7, [sp, #12]
  4056ce:	2f00      	cmp	r7, #0
  4056d0:	dd0a      	ble.n	4056e8 <__multiply+0x130>
  4056d2:	f858 3c04 	ldr.w	r3, [r8, #-4]
  4056d6:	f1a8 0804 	sub.w	r8, r8, #4
  4056da:	b11b      	cbz	r3, 4056e4 <__multiply+0x12c>
  4056dc:	e004      	b.n	4056e8 <__multiply+0x130>
  4056de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4056e2:	b90b      	cbnz	r3, 4056e8 <__multiply+0x130>
  4056e4:	3f01      	subs	r7, #1
  4056e6:	d1fa      	bne.n	4056de <__multiply+0x126>
  4056e8:	9b01      	ldr	r3, [sp, #4]
  4056ea:	4618      	mov	r0, r3
  4056ec:	611f      	str	r7, [r3, #16]
  4056ee:	b005      	add	sp, #20
  4056f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004056f4 <__pow5mult>:
  4056f4:	f012 0303 	ands.w	r3, r2, #3
  4056f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4056fc:	4614      	mov	r4, r2
  4056fe:	4607      	mov	r7, r0
  405700:	460e      	mov	r6, r1
  405702:	d12c      	bne.n	40575e <__pow5mult+0x6a>
  405704:	10a4      	asrs	r4, r4, #2
  405706:	d01c      	beq.n	405742 <__pow5mult+0x4e>
  405708:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40570a:	2d00      	cmp	r5, #0
  40570c:	d030      	beq.n	405770 <__pow5mult+0x7c>
  40570e:	f04f 0800 	mov.w	r8, #0
  405712:	e004      	b.n	40571e <__pow5mult+0x2a>
  405714:	1064      	asrs	r4, r4, #1
  405716:	d014      	beq.n	405742 <__pow5mult+0x4e>
  405718:	6828      	ldr	r0, [r5, #0]
  40571a:	b1a8      	cbz	r0, 405748 <__pow5mult+0x54>
  40571c:	4605      	mov	r5, r0
  40571e:	07e3      	lsls	r3, r4, #31
  405720:	d5f8      	bpl.n	405714 <__pow5mult+0x20>
  405722:	4638      	mov	r0, r7
  405724:	4631      	mov	r1, r6
  405726:	462a      	mov	r2, r5
  405728:	f7ff ff46 	bl	4055b8 <__multiply>
  40572c:	b1ae      	cbz	r6, 40575a <__pow5mult+0x66>
  40572e:	6872      	ldr	r2, [r6, #4]
  405730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405732:	1064      	asrs	r4, r4, #1
  405734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405738:	6031      	str	r1, [r6, #0]
  40573a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40573e:	4606      	mov	r6, r0
  405740:	d1ea      	bne.n	405718 <__pow5mult+0x24>
  405742:	4630      	mov	r0, r6
  405744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405748:	4638      	mov	r0, r7
  40574a:	4629      	mov	r1, r5
  40574c:	462a      	mov	r2, r5
  40574e:	f7ff ff33 	bl	4055b8 <__multiply>
  405752:	6028      	str	r0, [r5, #0]
  405754:	f8c0 8000 	str.w	r8, [r0]
  405758:	e7e0      	b.n	40571c <__pow5mult+0x28>
  40575a:	4606      	mov	r6, r0
  40575c:	e7da      	b.n	405714 <__pow5mult+0x20>
  40575e:	1e5d      	subs	r5, r3, #1
  405760:	4a0a      	ldr	r2, [pc, #40]	; (40578c <__pow5mult+0x98>)
  405762:	2300      	movs	r3, #0
  405764:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  405768:	f7ff fe82 	bl	405470 <__multadd>
  40576c:	4606      	mov	r6, r0
  40576e:	e7c9      	b.n	405704 <__pow5mult+0x10>
  405770:	2101      	movs	r1, #1
  405772:	4638      	mov	r0, r7
  405774:	f7ff fe4c 	bl	405410 <_Balloc>
  405778:	f240 2171 	movw	r1, #625	; 0x271
  40577c:	2201      	movs	r2, #1
  40577e:	2300      	movs	r3, #0
  405780:	6141      	str	r1, [r0, #20]
  405782:	6102      	str	r2, [r0, #16]
  405784:	4605      	mov	r5, r0
  405786:	64b8      	str	r0, [r7, #72]	; 0x48
  405788:	6003      	str	r3, [r0, #0]
  40578a:	e7c0      	b.n	40570e <__pow5mult+0x1a>
  40578c:	00407b68 	.word	0x00407b68

00405790 <__lshift>:
  405790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405794:	4693      	mov	fp, r2
  405796:	690a      	ldr	r2, [r1, #16]
  405798:	688b      	ldr	r3, [r1, #8]
  40579a:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  40579e:	eb0a 0902 	add.w	r9, sl, r2
  4057a2:	f109 0601 	add.w	r6, r9, #1
  4057a6:	429e      	cmp	r6, r3
  4057a8:	460f      	mov	r7, r1
  4057aa:	4680      	mov	r8, r0
  4057ac:	6849      	ldr	r1, [r1, #4]
  4057ae:	dd04      	ble.n	4057ba <__lshift+0x2a>
  4057b0:	005b      	lsls	r3, r3, #1
  4057b2:	429e      	cmp	r6, r3
  4057b4:	f101 0101 	add.w	r1, r1, #1
  4057b8:	dcfa      	bgt.n	4057b0 <__lshift+0x20>
  4057ba:	4640      	mov	r0, r8
  4057bc:	f7ff fe28 	bl	405410 <_Balloc>
  4057c0:	f1ba 0f00 	cmp.w	sl, #0
  4057c4:	f100 0414 	add.w	r4, r0, #20
  4057c8:	dd09      	ble.n	4057de <__lshift+0x4e>
  4057ca:	2300      	movs	r3, #0
  4057cc:	461a      	mov	r2, r3
  4057ce:	4625      	mov	r5, r4
  4057d0:	3301      	adds	r3, #1
  4057d2:	4553      	cmp	r3, sl
  4057d4:	f845 2b04 	str.w	r2, [r5], #4
  4057d8:	d1fa      	bne.n	4057d0 <__lshift+0x40>
  4057da:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  4057de:	693a      	ldr	r2, [r7, #16]
  4057e0:	f107 0314 	add.w	r3, r7, #20
  4057e4:	f01b 0b1f 	ands.w	fp, fp, #31
  4057e8:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  4057ec:	d021      	beq.n	405832 <__lshift+0xa2>
  4057ee:	f1cb 0a20 	rsb	sl, fp, #32
  4057f2:	2200      	movs	r2, #0
  4057f4:	e000      	b.n	4057f8 <__lshift+0x68>
  4057f6:	462c      	mov	r4, r5
  4057f8:	6819      	ldr	r1, [r3, #0]
  4057fa:	4625      	mov	r5, r4
  4057fc:	fa01 f10b 	lsl.w	r1, r1, fp
  405800:	430a      	orrs	r2, r1
  405802:	f845 2b04 	str.w	r2, [r5], #4
  405806:	f853 2b04 	ldr.w	r2, [r3], #4
  40580a:	4563      	cmp	r3, ip
  40580c:	fa22 f20a 	lsr.w	r2, r2, sl
  405810:	d3f1      	bcc.n	4057f6 <__lshift+0x66>
  405812:	6062      	str	r2, [r4, #4]
  405814:	b10a      	cbz	r2, 40581a <__lshift+0x8a>
  405816:	f109 0602 	add.w	r6, r9, #2
  40581a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40581e:	687a      	ldr	r2, [r7, #4]
  405820:	3e01      	subs	r6, #1
  405822:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405826:	6106      	str	r6, [r0, #16]
  405828:	6039      	str	r1, [r7, #0]
  40582a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40582e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405832:	f853 2b04 	ldr.w	r2, [r3], #4
  405836:	f844 2b04 	str.w	r2, [r4], #4
  40583a:	459c      	cmp	ip, r3
  40583c:	d9ed      	bls.n	40581a <__lshift+0x8a>
  40583e:	f853 2b04 	ldr.w	r2, [r3], #4
  405842:	f844 2b04 	str.w	r2, [r4], #4
  405846:	459c      	cmp	ip, r3
  405848:	d8f3      	bhi.n	405832 <__lshift+0xa2>
  40584a:	e7e6      	b.n	40581a <__lshift+0x8a>

0040584c <__mcmp>:
  40584c:	6902      	ldr	r2, [r0, #16]
  40584e:	690b      	ldr	r3, [r1, #16]
  405850:	1ad2      	subs	r2, r2, r3
  405852:	b410      	push	{r4}
  405854:	d115      	bne.n	405882 <__mcmp+0x36>
  405856:	009b      	lsls	r3, r3, #2
  405858:	3014      	adds	r0, #20
  40585a:	3114      	adds	r1, #20
  40585c:	4419      	add	r1, r3
  40585e:	4403      	add	r3, r0
  405860:	e001      	b.n	405866 <__mcmp+0x1a>
  405862:	4298      	cmp	r0, r3
  405864:	d211      	bcs.n	40588a <__mcmp+0x3e>
  405866:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40586a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40586e:	42a2      	cmp	r2, r4
  405870:	d0f7      	beq.n	405862 <__mcmp+0x16>
  405872:	4294      	cmp	r4, r2
  405874:	bf94      	ite	ls
  405876:	2001      	movls	r0, #1
  405878:	f04f 30ff 	movhi.w	r0, #4294967295
  40587c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405880:	4770      	bx	lr
  405882:	4610      	mov	r0, r2
  405884:	f85d 4b04 	ldr.w	r4, [sp], #4
  405888:	4770      	bx	lr
  40588a:	2000      	movs	r0, #0
  40588c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405890:	4770      	bx	lr
  405892:	bf00      	nop

00405894 <__mdiff>:
  405894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405898:	460d      	mov	r5, r1
  40589a:	4604      	mov	r4, r0
  40589c:	4611      	mov	r1, r2
  40589e:	4628      	mov	r0, r5
  4058a0:	4616      	mov	r6, r2
  4058a2:	f7ff ffd3 	bl	40584c <__mcmp>
  4058a6:	1e07      	subs	r7, r0, #0
  4058a8:	d055      	beq.n	405956 <__mdiff+0xc2>
  4058aa:	db4e      	blt.n	40594a <__mdiff+0xb6>
  4058ac:	f04f 0800 	mov.w	r8, #0
  4058b0:	6869      	ldr	r1, [r5, #4]
  4058b2:	4620      	mov	r0, r4
  4058b4:	f7ff fdac 	bl	405410 <_Balloc>
  4058b8:	692f      	ldr	r7, [r5, #16]
  4058ba:	6932      	ldr	r2, [r6, #16]
  4058bc:	f8c0 800c 	str.w	r8, [r0, #12]
  4058c0:	3514      	adds	r5, #20
  4058c2:	3614      	adds	r6, #20
  4058c4:	f100 0314 	add.w	r3, r0, #20
  4058c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  4058cc:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  4058d0:	2100      	movs	r1, #0
  4058d2:	f856 2b04 	ldr.w	r2, [r6], #4
  4058d6:	f855 4b04 	ldr.w	r4, [r5], #4
  4058da:	fa1f f982 	uxth.w	r9, r2
  4058de:	fa11 fa84 	uxtah	sl, r1, r4
  4058e2:	0c11      	lsrs	r1, r2, #16
  4058e4:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  4058e8:	ebc9 020a 	rsb	r2, r9, sl
  4058ec:	eb01 4122 	add.w	r1, r1, r2, asr #16
  4058f0:	b292      	uxth	r2, r2
  4058f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  4058f6:	45b0      	cmp	r8, r6
  4058f8:	f843 2b04 	str.w	r2, [r3], #4
  4058fc:	ea4f 4121 	mov.w	r1, r1, asr #16
  405900:	462c      	mov	r4, r5
  405902:	d8e6      	bhi.n	4058d2 <__mdiff+0x3e>
  405904:	45ac      	cmp	ip, r5
  405906:	4698      	mov	r8, r3
  405908:	d915      	bls.n	405936 <__mdiff+0xa2>
  40590a:	f854 6b04 	ldr.w	r6, [r4], #4
  40590e:	fa11 f186 	uxtah	r1, r1, r6
  405912:	0c36      	lsrs	r6, r6, #16
  405914:	eb06 4621 	add.w	r6, r6, r1, asr #16
  405918:	b289      	uxth	r1, r1
  40591a:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  40591e:	45a4      	cmp	ip, r4
  405920:	f843 2b04 	str.w	r2, [r3], #4
  405924:	ea4f 4126 	mov.w	r1, r6, asr #16
  405928:	d8ef      	bhi.n	40590a <__mdiff+0x76>
  40592a:	43eb      	mvns	r3, r5
  40592c:	4463      	add	r3, ip
  40592e:	f023 0303 	bic.w	r3, r3, #3
  405932:	3304      	adds	r3, #4
  405934:	4443      	add	r3, r8
  405936:	3b04      	subs	r3, #4
  405938:	b922      	cbnz	r2, 405944 <__mdiff+0xb0>
  40593a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40593e:	3f01      	subs	r7, #1
  405940:	2a00      	cmp	r2, #0
  405942:	d0fa      	beq.n	40593a <__mdiff+0xa6>
  405944:	6107      	str	r7, [r0, #16]
  405946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40594a:	462b      	mov	r3, r5
  40594c:	f04f 0801 	mov.w	r8, #1
  405950:	4635      	mov	r5, r6
  405952:	461e      	mov	r6, r3
  405954:	e7ac      	b.n	4058b0 <__mdiff+0x1c>
  405956:	4620      	mov	r0, r4
  405958:	4639      	mov	r1, r7
  40595a:	f7ff fd59 	bl	405410 <_Balloc>
  40595e:	2301      	movs	r3, #1
  405960:	6147      	str	r7, [r0, #20]
  405962:	6103      	str	r3, [r0, #16]
  405964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405968 <__d2b>:
  405968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40596c:	b083      	sub	sp, #12
  40596e:	2101      	movs	r1, #1
  405970:	461d      	mov	r5, r3
  405972:	f3c3 560a 	ubfx	r6, r3, #20, #11
  405976:	4614      	mov	r4, r2
  405978:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40597a:	f7ff fd49 	bl	405410 <_Balloc>
  40597e:	f3c5 0313 	ubfx	r3, r5, #0, #20
  405982:	4680      	mov	r8, r0
  405984:	b10e      	cbz	r6, 40598a <__d2b+0x22>
  405986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40598a:	9301      	str	r3, [sp, #4]
  40598c:	b324      	cbz	r4, 4059d8 <__d2b+0x70>
  40598e:	a802      	add	r0, sp, #8
  405990:	f840 4d08 	str.w	r4, [r0, #-8]!
  405994:	4668      	mov	r0, sp
  405996:	f7ff fdd7 	bl	405548 <__lo0bits>
  40599a:	2800      	cmp	r0, #0
  40599c:	d135      	bne.n	405a0a <__d2b+0xa2>
  40599e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4059a2:	f8c8 2014 	str.w	r2, [r8, #20]
  4059a6:	2b00      	cmp	r3, #0
  4059a8:	bf0c      	ite	eq
  4059aa:	2401      	moveq	r4, #1
  4059ac:	2402      	movne	r4, #2
  4059ae:	f8c8 3018 	str.w	r3, [r8, #24]
  4059b2:	f8c8 4010 	str.w	r4, [r8, #16]
  4059b6:	b9de      	cbnz	r6, 4059f0 <__d2b+0x88>
  4059b8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  4059bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4059c0:	6038      	str	r0, [r7, #0]
  4059c2:	6918      	ldr	r0, [r3, #16]
  4059c4:	f7ff fda0 	bl	405508 <__hi0bits>
  4059c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4059ca:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  4059ce:	6018      	str	r0, [r3, #0]
  4059d0:	4640      	mov	r0, r8
  4059d2:	b003      	add	sp, #12
  4059d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4059d8:	a801      	add	r0, sp, #4
  4059da:	f7ff fdb5 	bl	405548 <__lo0bits>
  4059de:	2401      	movs	r4, #1
  4059e0:	9b01      	ldr	r3, [sp, #4]
  4059e2:	f8c8 3014 	str.w	r3, [r8, #20]
  4059e6:	3020      	adds	r0, #32
  4059e8:	f8c8 4010 	str.w	r4, [r8, #16]
  4059ec:	2e00      	cmp	r6, #0
  4059ee:	d0e3      	beq.n	4059b8 <__d2b+0x50>
  4059f0:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  4059f4:	eb09 0300 	add.w	r3, r9, r0
  4059f8:	603b      	str	r3, [r7, #0]
  4059fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4059fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405a00:	6018      	str	r0, [r3, #0]
  405a02:	4640      	mov	r0, r8
  405a04:	b003      	add	sp, #12
  405a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405a0a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405a0e:	f1c0 0120 	rsb	r1, r0, #32
  405a12:	fa03 f101 	lsl.w	r1, r3, r1
  405a16:	430a      	orrs	r2, r1
  405a18:	40c3      	lsrs	r3, r0
  405a1a:	9301      	str	r3, [sp, #4]
  405a1c:	f8c8 2014 	str.w	r2, [r8, #20]
  405a20:	e7c1      	b.n	4059a6 <__d2b+0x3e>
  405a22:	bf00      	nop

00405a24 <_realloc_r>:
  405a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a28:	460c      	mov	r4, r1
  405a2a:	b083      	sub	sp, #12
  405a2c:	4690      	mov	r8, r2
  405a2e:	4681      	mov	r9, r0
  405a30:	2900      	cmp	r1, #0
  405a32:	f000 80e2 	beq.w	405bfa <_realloc_r+0x1d6>
  405a36:	f7ff fce7 	bl	405408 <__malloc_lock>
  405a3a:	f108 060b 	add.w	r6, r8, #11
  405a3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405a42:	2e16      	cmp	r6, #22
  405a44:	f023 0503 	bic.w	r5, r3, #3
  405a48:	f1a4 0708 	sub.w	r7, r4, #8
  405a4c:	d84b      	bhi.n	405ae6 <_realloc_r+0xc2>
  405a4e:	2110      	movs	r1, #16
  405a50:	460e      	mov	r6, r1
  405a52:	45b0      	cmp	r8, r6
  405a54:	d84c      	bhi.n	405af0 <_realloc_r+0xcc>
  405a56:	428d      	cmp	r5, r1
  405a58:	da78      	bge.n	405b4c <_realloc_r+0x128>
  405a5a:	f8df b390 	ldr.w	fp, [pc, #912]	; 405dec <_realloc_r+0x3c8>
  405a5e:	f8db e008 	ldr.w	lr, [fp, #8]
  405a62:	1978      	adds	r0, r7, r5
  405a64:	4586      	cmp	lr, r0
  405a66:	f000 80ce 	beq.w	405c06 <_realloc_r+0x1e2>
  405a6a:	6842      	ldr	r2, [r0, #4]
  405a6c:	f022 0c01 	bic.w	ip, r2, #1
  405a70:	4484      	add	ip, r0
  405a72:	f8dc c004 	ldr.w	ip, [ip, #4]
  405a76:	f01c 0f01 	tst.w	ip, #1
  405a7a:	d07a      	beq.n	405b72 <_realloc_r+0x14e>
  405a7c:	2200      	movs	r2, #0
  405a7e:	4610      	mov	r0, r2
  405a80:	07db      	lsls	r3, r3, #31
  405a82:	f100 8092 	bmi.w	405baa <_realloc_r+0x186>
  405a86:	f854 3c08 	ldr.w	r3, [r4, #-8]
  405a8a:	ebc3 0a07 	rsb	sl, r3, r7
  405a8e:	f8da 3004 	ldr.w	r3, [sl, #4]
  405a92:	f023 0303 	bic.w	r3, r3, #3
  405a96:	442b      	add	r3, r5
  405a98:	b388      	cbz	r0, 405afe <_realloc_r+0xda>
  405a9a:	4570      	cmp	r0, lr
  405a9c:	f000 80ed 	beq.w	405c7a <_realloc_r+0x256>
  405aa0:	eb02 0e03 	add.w	lr, r2, r3
  405aa4:	458e      	cmp	lr, r1
  405aa6:	db2a      	blt.n	405afe <_realloc_r+0xda>
  405aa8:	68c3      	ldr	r3, [r0, #12]
  405aaa:	6882      	ldr	r2, [r0, #8]
  405aac:	4657      	mov	r7, sl
  405aae:	60d3      	str	r3, [r2, #12]
  405ab0:	609a      	str	r2, [r3, #8]
  405ab2:	f857 1f08 	ldr.w	r1, [r7, #8]!
  405ab6:	f8da 300c 	ldr.w	r3, [sl, #12]
  405aba:	60cb      	str	r3, [r1, #12]
  405abc:	1f2a      	subs	r2, r5, #4
  405abe:	2a24      	cmp	r2, #36	; 0x24
  405ac0:	6099      	str	r1, [r3, #8]
  405ac2:	f200 8126 	bhi.w	405d12 <_realloc_r+0x2ee>
  405ac6:	2a13      	cmp	r2, #19
  405ac8:	f240 80b3 	bls.w	405c32 <_realloc_r+0x20e>
  405acc:	6823      	ldr	r3, [r4, #0]
  405ace:	f8ca 3008 	str.w	r3, [sl, #8]
  405ad2:	6863      	ldr	r3, [r4, #4]
  405ad4:	f8ca 300c 	str.w	r3, [sl, #12]
  405ad8:	2a1b      	cmp	r2, #27
  405ada:	f200 8130 	bhi.w	405d3e <_realloc_r+0x31a>
  405ade:	3408      	adds	r4, #8
  405ae0:	f10a 0310 	add.w	r3, sl, #16
  405ae4:	e0a6      	b.n	405c34 <_realloc_r+0x210>
  405ae6:	f026 0607 	bic.w	r6, r6, #7
  405aea:	2e00      	cmp	r6, #0
  405aec:	4631      	mov	r1, r6
  405aee:	dab0      	bge.n	405a52 <_realloc_r+0x2e>
  405af0:	230c      	movs	r3, #12
  405af2:	2000      	movs	r0, #0
  405af4:	f8c9 3000 	str.w	r3, [r9]
  405af8:	b003      	add	sp, #12
  405afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405afe:	428b      	cmp	r3, r1
  405b00:	db53      	blt.n	405baa <_realloc_r+0x186>
  405b02:	4657      	mov	r7, sl
  405b04:	f8da 100c 	ldr.w	r1, [sl, #12]
  405b08:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405b0c:	1f2a      	subs	r2, r5, #4
  405b0e:	2a24      	cmp	r2, #36	; 0x24
  405b10:	60c1      	str	r1, [r0, #12]
  405b12:	6088      	str	r0, [r1, #8]
  405b14:	f200 8109 	bhi.w	405d2a <_realloc_r+0x306>
  405b18:	2a13      	cmp	r2, #19
  405b1a:	f240 8104 	bls.w	405d26 <_realloc_r+0x302>
  405b1e:	6821      	ldr	r1, [r4, #0]
  405b20:	f8ca 1008 	str.w	r1, [sl, #8]
  405b24:	6861      	ldr	r1, [r4, #4]
  405b26:	f8ca 100c 	str.w	r1, [sl, #12]
  405b2a:	2a1b      	cmp	r2, #27
  405b2c:	f200 811c 	bhi.w	405d68 <_realloc_r+0x344>
  405b30:	3408      	adds	r4, #8
  405b32:	f10a 0210 	add.w	r2, sl, #16
  405b36:	6821      	ldr	r1, [r4, #0]
  405b38:	6011      	str	r1, [r2, #0]
  405b3a:	6861      	ldr	r1, [r4, #4]
  405b3c:	6051      	str	r1, [r2, #4]
  405b3e:	68a1      	ldr	r1, [r4, #8]
  405b40:	6091      	str	r1, [r2, #8]
  405b42:	461d      	mov	r5, r3
  405b44:	f8da 3004 	ldr.w	r3, [sl, #4]
  405b48:	463c      	mov	r4, r7
  405b4a:	4657      	mov	r7, sl
  405b4c:	1baa      	subs	r2, r5, r6
  405b4e:	2a0f      	cmp	r2, #15
  405b50:	f003 0301 	and.w	r3, r3, #1
  405b54:	d819      	bhi.n	405b8a <_realloc_r+0x166>
  405b56:	432b      	orrs	r3, r5
  405b58:	443d      	add	r5, r7
  405b5a:	607b      	str	r3, [r7, #4]
  405b5c:	686b      	ldr	r3, [r5, #4]
  405b5e:	f043 0301 	orr.w	r3, r3, #1
  405b62:	606b      	str	r3, [r5, #4]
  405b64:	4648      	mov	r0, r9
  405b66:	f7ff fc51 	bl	40540c <__malloc_unlock>
  405b6a:	4620      	mov	r0, r4
  405b6c:	b003      	add	sp, #12
  405b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b72:	f022 0203 	bic.w	r2, r2, #3
  405b76:	eb02 0c05 	add.w	ip, r2, r5
  405b7a:	458c      	cmp	ip, r1
  405b7c:	db80      	blt.n	405a80 <_realloc_r+0x5c>
  405b7e:	68c2      	ldr	r2, [r0, #12]
  405b80:	6881      	ldr	r1, [r0, #8]
  405b82:	4665      	mov	r5, ip
  405b84:	60ca      	str	r2, [r1, #12]
  405b86:	6091      	str	r1, [r2, #8]
  405b88:	e7e0      	b.n	405b4c <_realloc_r+0x128>
  405b8a:	19b9      	adds	r1, r7, r6
  405b8c:	f042 0001 	orr.w	r0, r2, #1
  405b90:	431e      	orrs	r6, r3
  405b92:	440a      	add	r2, r1
  405b94:	607e      	str	r6, [r7, #4]
  405b96:	6048      	str	r0, [r1, #4]
  405b98:	6853      	ldr	r3, [r2, #4]
  405b9a:	f043 0301 	orr.w	r3, r3, #1
  405b9e:	3108      	adds	r1, #8
  405ba0:	6053      	str	r3, [r2, #4]
  405ba2:	4648      	mov	r0, r9
  405ba4:	f7fe ff52 	bl	404a4c <_free_r>
  405ba8:	e7dc      	b.n	405b64 <_realloc_r+0x140>
  405baa:	4641      	mov	r1, r8
  405bac:	4648      	mov	r0, r9
  405bae:	f7ff f84d 	bl	404c4c <_malloc_r>
  405bb2:	4680      	mov	r8, r0
  405bb4:	b1d0      	cbz	r0, 405bec <_realloc_r+0x1c8>
  405bb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405bba:	f023 0201 	bic.w	r2, r3, #1
  405bbe:	443a      	add	r2, r7
  405bc0:	f1a0 0108 	sub.w	r1, r0, #8
  405bc4:	4291      	cmp	r1, r2
  405bc6:	f000 809e 	beq.w	405d06 <_realloc_r+0x2e2>
  405bca:	1f2a      	subs	r2, r5, #4
  405bcc:	2a24      	cmp	r2, #36	; 0x24
  405bce:	d850      	bhi.n	405c72 <_realloc_r+0x24e>
  405bd0:	2a13      	cmp	r2, #19
  405bd2:	d823      	bhi.n	405c1c <_realloc_r+0x1f8>
  405bd4:	4603      	mov	r3, r0
  405bd6:	4622      	mov	r2, r4
  405bd8:	6811      	ldr	r1, [r2, #0]
  405bda:	6019      	str	r1, [r3, #0]
  405bdc:	6851      	ldr	r1, [r2, #4]
  405bde:	6059      	str	r1, [r3, #4]
  405be0:	6892      	ldr	r2, [r2, #8]
  405be2:	609a      	str	r2, [r3, #8]
  405be4:	4621      	mov	r1, r4
  405be6:	4648      	mov	r0, r9
  405be8:	f7fe ff30 	bl	404a4c <_free_r>
  405bec:	4648      	mov	r0, r9
  405bee:	f7ff fc0d 	bl	40540c <__malloc_unlock>
  405bf2:	4640      	mov	r0, r8
  405bf4:	b003      	add	sp, #12
  405bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bfa:	4611      	mov	r1, r2
  405bfc:	b003      	add	sp, #12
  405bfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c02:	f7ff b823 	b.w	404c4c <_malloc_r>
  405c06:	f8de 2004 	ldr.w	r2, [lr, #4]
  405c0a:	f022 0203 	bic.w	r2, r2, #3
  405c0e:	1950      	adds	r0, r2, r5
  405c10:	f106 0c10 	add.w	ip, r6, #16
  405c14:	4560      	cmp	r0, ip
  405c16:	da19      	bge.n	405c4c <_realloc_r+0x228>
  405c18:	4670      	mov	r0, lr
  405c1a:	e731      	b.n	405a80 <_realloc_r+0x5c>
  405c1c:	6823      	ldr	r3, [r4, #0]
  405c1e:	6003      	str	r3, [r0, #0]
  405c20:	6863      	ldr	r3, [r4, #4]
  405c22:	6043      	str	r3, [r0, #4]
  405c24:	2a1b      	cmp	r2, #27
  405c26:	d863      	bhi.n	405cf0 <_realloc_r+0x2cc>
  405c28:	f100 0308 	add.w	r3, r0, #8
  405c2c:	f104 0208 	add.w	r2, r4, #8
  405c30:	e7d2      	b.n	405bd8 <_realloc_r+0x1b4>
  405c32:	463b      	mov	r3, r7
  405c34:	6822      	ldr	r2, [r4, #0]
  405c36:	601a      	str	r2, [r3, #0]
  405c38:	6862      	ldr	r2, [r4, #4]
  405c3a:	605a      	str	r2, [r3, #4]
  405c3c:	68a2      	ldr	r2, [r4, #8]
  405c3e:	609a      	str	r2, [r3, #8]
  405c40:	463c      	mov	r4, r7
  405c42:	4675      	mov	r5, lr
  405c44:	f8da 3004 	ldr.w	r3, [sl, #4]
  405c48:	4657      	mov	r7, sl
  405c4a:	e77f      	b.n	405b4c <_realloc_r+0x128>
  405c4c:	4437      	add	r7, r6
  405c4e:	1b83      	subs	r3, r0, r6
  405c50:	f043 0301 	orr.w	r3, r3, #1
  405c54:	f8cb 7008 	str.w	r7, [fp, #8]
  405c58:	607b      	str	r3, [r7, #4]
  405c5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405c5e:	f003 0301 	and.w	r3, r3, #1
  405c62:	431e      	orrs	r6, r3
  405c64:	4648      	mov	r0, r9
  405c66:	f844 6c04 	str.w	r6, [r4, #-4]
  405c6a:	f7ff fbcf 	bl	40540c <__malloc_unlock>
  405c6e:	4620      	mov	r0, r4
  405c70:	e77c      	b.n	405b6c <_realloc_r+0x148>
  405c72:	4621      	mov	r1, r4
  405c74:	f7ff fb68 	bl	405348 <memmove>
  405c78:	e7b4      	b.n	405be4 <_realloc_r+0x1c0>
  405c7a:	eb02 0c03 	add.w	ip, r2, r3
  405c7e:	f106 0210 	add.w	r2, r6, #16
  405c82:	4594      	cmp	ip, r2
  405c84:	f6ff af3b 	blt.w	405afe <_realloc_r+0xda>
  405c88:	4657      	mov	r7, sl
  405c8a:	f8da 300c 	ldr.w	r3, [sl, #12]
  405c8e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  405c92:	1f2a      	subs	r2, r5, #4
  405c94:	2a24      	cmp	r2, #36	; 0x24
  405c96:	60cb      	str	r3, [r1, #12]
  405c98:	6099      	str	r1, [r3, #8]
  405c9a:	f200 8087 	bhi.w	405dac <_realloc_r+0x388>
  405c9e:	2a13      	cmp	r2, #19
  405ca0:	d978      	bls.n	405d94 <_realloc_r+0x370>
  405ca2:	6823      	ldr	r3, [r4, #0]
  405ca4:	f8ca 3008 	str.w	r3, [sl, #8]
  405ca8:	6863      	ldr	r3, [r4, #4]
  405caa:	f8ca 300c 	str.w	r3, [sl, #12]
  405cae:	2a1b      	cmp	r2, #27
  405cb0:	f200 8085 	bhi.w	405dbe <_realloc_r+0x39a>
  405cb4:	3408      	adds	r4, #8
  405cb6:	f10a 0310 	add.w	r3, sl, #16
  405cba:	6822      	ldr	r2, [r4, #0]
  405cbc:	601a      	str	r2, [r3, #0]
  405cbe:	6862      	ldr	r2, [r4, #4]
  405cc0:	605a      	str	r2, [r3, #4]
  405cc2:	68a2      	ldr	r2, [r4, #8]
  405cc4:	609a      	str	r2, [r3, #8]
  405cc6:	eb0a 0306 	add.w	r3, sl, r6
  405cca:	ebc6 020c 	rsb	r2, r6, ip
  405cce:	f042 0201 	orr.w	r2, r2, #1
  405cd2:	f8cb 3008 	str.w	r3, [fp, #8]
  405cd6:	605a      	str	r2, [r3, #4]
  405cd8:	f8da 3004 	ldr.w	r3, [sl, #4]
  405cdc:	f003 0301 	and.w	r3, r3, #1
  405ce0:	431e      	orrs	r6, r3
  405ce2:	4648      	mov	r0, r9
  405ce4:	f8ca 6004 	str.w	r6, [sl, #4]
  405ce8:	f7ff fb90 	bl	40540c <__malloc_unlock>
  405cec:	4638      	mov	r0, r7
  405cee:	e73d      	b.n	405b6c <_realloc_r+0x148>
  405cf0:	68a3      	ldr	r3, [r4, #8]
  405cf2:	6083      	str	r3, [r0, #8]
  405cf4:	68e3      	ldr	r3, [r4, #12]
  405cf6:	60c3      	str	r3, [r0, #12]
  405cf8:	2a24      	cmp	r2, #36	; 0x24
  405cfa:	d02c      	beq.n	405d56 <_realloc_r+0x332>
  405cfc:	f100 0310 	add.w	r3, r0, #16
  405d00:	f104 0210 	add.w	r2, r4, #16
  405d04:	e768      	b.n	405bd8 <_realloc_r+0x1b4>
  405d06:	f850 2c04 	ldr.w	r2, [r0, #-4]
  405d0a:	f022 0203 	bic.w	r2, r2, #3
  405d0e:	4415      	add	r5, r2
  405d10:	e71c      	b.n	405b4c <_realloc_r+0x128>
  405d12:	4621      	mov	r1, r4
  405d14:	4638      	mov	r0, r7
  405d16:	4675      	mov	r5, lr
  405d18:	463c      	mov	r4, r7
  405d1a:	f7ff fb15 	bl	405348 <memmove>
  405d1e:	4657      	mov	r7, sl
  405d20:	f8da 3004 	ldr.w	r3, [sl, #4]
  405d24:	e712      	b.n	405b4c <_realloc_r+0x128>
  405d26:	463a      	mov	r2, r7
  405d28:	e705      	b.n	405b36 <_realloc_r+0x112>
  405d2a:	4621      	mov	r1, r4
  405d2c:	4638      	mov	r0, r7
  405d2e:	461d      	mov	r5, r3
  405d30:	463c      	mov	r4, r7
  405d32:	f7ff fb09 	bl	405348 <memmove>
  405d36:	4657      	mov	r7, sl
  405d38:	f8da 3004 	ldr.w	r3, [sl, #4]
  405d3c:	e706      	b.n	405b4c <_realloc_r+0x128>
  405d3e:	68a3      	ldr	r3, [r4, #8]
  405d40:	f8ca 3010 	str.w	r3, [sl, #16]
  405d44:	68e3      	ldr	r3, [r4, #12]
  405d46:	f8ca 3014 	str.w	r3, [sl, #20]
  405d4a:	2a24      	cmp	r2, #36	; 0x24
  405d4c:	d018      	beq.n	405d80 <_realloc_r+0x35c>
  405d4e:	3410      	adds	r4, #16
  405d50:	f10a 0318 	add.w	r3, sl, #24
  405d54:	e76e      	b.n	405c34 <_realloc_r+0x210>
  405d56:	6923      	ldr	r3, [r4, #16]
  405d58:	6103      	str	r3, [r0, #16]
  405d5a:	6963      	ldr	r3, [r4, #20]
  405d5c:	6143      	str	r3, [r0, #20]
  405d5e:	f104 0218 	add.w	r2, r4, #24
  405d62:	f100 0318 	add.w	r3, r0, #24
  405d66:	e737      	b.n	405bd8 <_realloc_r+0x1b4>
  405d68:	68a1      	ldr	r1, [r4, #8]
  405d6a:	f8ca 1010 	str.w	r1, [sl, #16]
  405d6e:	68e1      	ldr	r1, [r4, #12]
  405d70:	f8ca 1014 	str.w	r1, [sl, #20]
  405d74:	2a24      	cmp	r2, #36	; 0x24
  405d76:	d00f      	beq.n	405d98 <_realloc_r+0x374>
  405d78:	3410      	adds	r4, #16
  405d7a:	f10a 0218 	add.w	r2, sl, #24
  405d7e:	e6da      	b.n	405b36 <_realloc_r+0x112>
  405d80:	6923      	ldr	r3, [r4, #16]
  405d82:	f8ca 3018 	str.w	r3, [sl, #24]
  405d86:	6963      	ldr	r3, [r4, #20]
  405d88:	f8ca 301c 	str.w	r3, [sl, #28]
  405d8c:	3418      	adds	r4, #24
  405d8e:	f10a 0320 	add.w	r3, sl, #32
  405d92:	e74f      	b.n	405c34 <_realloc_r+0x210>
  405d94:	463b      	mov	r3, r7
  405d96:	e790      	b.n	405cba <_realloc_r+0x296>
  405d98:	6922      	ldr	r2, [r4, #16]
  405d9a:	f8ca 2018 	str.w	r2, [sl, #24]
  405d9e:	6962      	ldr	r2, [r4, #20]
  405da0:	f8ca 201c 	str.w	r2, [sl, #28]
  405da4:	3418      	adds	r4, #24
  405da6:	f10a 0220 	add.w	r2, sl, #32
  405daa:	e6c4      	b.n	405b36 <_realloc_r+0x112>
  405dac:	4621      	mov	r1, r4
  405dae:	4638      	mov	r0, r7
  405db0:	f8cd c004 	str.w	ip, [sp, #4]
  405db4:	f7ff fac8 	bl	405348 <memmove>
  405db8:	f8dd c004 	ldr.w	ip, [sp, #4]
  405dbc:	e783      	b.n	405cc6 <_realloc_r+0x2a2>
  405dbe:	68a3      	ldr	r3, [r4, #8]
  405dc0:	f8ca 3010 	str.w	r3, [sl, #16]
  405dc4:	68e3      	ldr	r3, [r4, #12]
  405dc6:	f8ca 3014 	str.w	r3, [sl, #20]
  405dca:	2a24      	cmp	r2, #36	; 0x24
  405dcc:	d003      	beq.n	405dd6 <_realloc_r+0x3b2>
  405dce:	3410      	adds	r4, #16
  405dd0:	f10a 0318 	add.w	r3, sl, #24
  405dd4:	e771      	b.n	405cba <_realloc_r+0x296>
  405dd6:	6923      	ldr	r3, [r4, #16]
  405dd8:	f8ca 3018 	str.w	r3, [sl, #24]
  405ddc:	6963      	ldr	r3, [r4, #20]
  405dde:	f8ca 301c 	str.w	r3, [sl, #28]
  405de2:	3418      	adds	r4, #24
  405de4:	f10a 0320 	add.w	r3, sl, #32
  405de8:	e767      	b.n	405cba <_realloc_r+0x296>
  405dea:	bf00      	nop
  405dec:	2000047c 	.word	0x2000047c

00405df0 <__fpclassifyd>:
  405df0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405df4:	b410      	push	{r4}
  405df6:	d008      	beq.n	405e0a <__fpclassifyd+0x1a>
  405df8:	4a0f      	ldr	r2, [pc, #60]	; (405e38 <__fpclassifyd+0x48>)
  405dfa:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  405dfe:	4294      	cmp	r4, r2
  405e00:	d80a      	bhi.n	405e18 <__fpclassifyd+0x28>
  405e02:	2004      	movs	r0, #4
  405e04:	f85d 4b04 	ldr.w	r4, [sp], #4
  405e08:	4770      	bx	lr
  405e0a:	2800      	cmp	r0, #0
  405e0c:	bf0c      	ite	eq
  405e0e:	2002      	moveq	r0, #2
  405e10:	2003      	movne	r0, #3
  405e12:	f85d 4b04 	ldr.w	r4, [sp], #4
  405e16:	4770      	bx	lr
  405e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  405e1c:	d201      	bcs.n	405e22 <__fpclassifyd+0x32>
  405e1e:	2003      	movs	r0, #3
  405e20:	e7f7      	b.n	405e12 <__fpclassifyd+0x22>
  405e22:	4a06      	ldr	r2, [pc, #24]	; (405e3c <__fpclassifyd+0x4c>)
  405e24:	4293      	cmp	r3, r2
  405e26:	d001      	beq.n	405e2c <__fpclassifyd+0x3c>
  405e28:	2000      	movs	r0, #0
  405e2a:	e7f2      	b.n	405e12 <__fpclassifyd+0x22>
  405e2c:	f1d0 0001 	rsbs	r0, r0, #1
  405e30:	bf38      	it	cc
  405e32:	2000      	movcc	r0, #0
  405e34:	e7ed      	b.n	405e12 <__fpclassifyd+0x22>
  405e36:	bf00      	nop
  405e38:	7fdfffff 	.word	0x7fdfffff
  405e3c:	7ff00000 	.word	0x7ff00000

00405e40 <_sbrk_r>:
  405e40:	b538      	push	{r3, r4, r5, lr}
  405e42:	4c07      	ldr	r4, [pc, #28]	; (405e60 <_sbrk_r+0x20>)
  405e44:	2300      	movs	r3, #0
  405e46:	4605      	mov	r5, r0
  405e48:	4608      	mov	r0, r1
  405e4a:	6023      	str	r3, [r4, #0]
  405e4c:	f7fb f908 	bl	401060 <_sbrk>
  405e50:	1c43      	adds	r3, r0, #1
  405e52:	d000      	beq.n	405e56 <_sbrk_r+0x16>
  405e54:	bd38      	pop	{r3, r4, r5, pc}
  405e56:	6823      	ldr	r3, [r4, #0]
  405e58:	2b00      	cmp	r3, #0
  405e5a:	d0fb      	beq.n	405e54 <_sbrk_r+0x14>
  405e5c:	602b      	str	r3, [r5, #0]
  405e5e:	bd38      	pop	{r3, r4, r5, pc}
  405e60:	20000978 	.word	0x20000978

00405e64 <__sread>:
  405e64:	b510      	push	{r4, lr}
  405e66:	460c      	mov	r4, r1
  405e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405e6c:	f000 f9c2 	bl	4061f4 <_read_r>
  405e70:	2800      	cmp	r0, #0
  405e72:	db03      	blt.n	405e7c <__sread+0x18>
  405e74:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405e76:	4403      	add	r3, r0
  405e78:	6523      	str	r3, [r4, #80]	; 0x50
  405e7a:	bd10      	pop	{r4, pc}
  405e7c:	89a3      	ldrh	r3, [r4, #12]
  405e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405e82:	81a3      	strh	r3, [r4, #12]
  405e84:	bd10      	pop	{r4, pc}
  405e86:	bf00      	nop

00405e88 <__swrite>:
  405e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e8c:	460c      	mov	r4, r1
  405e8e:	8989      	ldrh	r1, [r1, #12]
  405e90:	461d      	mov	r5, r3
  405e92:	05cb      	lsls	r3, r1, #23
  405e94:	4616      	mov	r6, r2
  405e96:	4607      	mov	r7, r0
  405e98:	d506      	bpl.n	405ea8 <__swrite+0x20>
  405e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405e9e:	2200      	movs	r2, #0
  405ea0:	2302      	movs	r3, #2
  405ea2:	f000 f993 	bl	4061cc <_lseek_r>
  405ea6:	89a1      	ldrh	r1, [r4, #12]
  405ea8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  405eac:	81a1      	strh	r1, [r4, #12]
  405eae:	4638      	mov	r0, r7
  405eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405eb4:	4632      	mov	r2, r6
  405eb6:	462b      	mov	r3, r5
  405eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ebc:	f000 b894 	b.w	405fe8 <_write_r>

00405ec0 <__sseek>:
  405ec0:	b510      	push	{r4, lr}
  405ec2:	460c      	mov	r4, r1
  405ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405ec8:	f000 f980 	bl	4061cc <_lseek_r>
  405ecc:	89a3      	ldrh	r3, [r4, #12]
  405ece:	1c42      	adds	r2, r0, #1
  405ed0:	bf0e      	itee	eq
  405ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405eda:	6520      	strne	r0, [r4, #80]	; 0x50
  405edc:	81a3      	strh	r3, [r4, #12]
  405ede:	bd10      	pop	{r4, pc}

00405ee0 <__sclose>:
  405ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405ee4:	f000 b918 	b.w	406118 <_close_r>

00405ee8 <__ssprint_r>:
  405ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405eec:	6894      	ldr	r4, [r2, #8]
  405eee:	6816      	ldr	r6, [r2, #0]
  405ef0:	b083      	sub	sp, #12
  405ef2:	4692      	mov	sl, r2
  405ef4:	4680      	mov	r8, r0
  405ef6:	460d      	mov	r5, r1
  405ef8:	2c00      	cmp	r4, #0
  405efa:	d06f      	beq.n	405fdc <__ssprint_r+0xf4>
  405efc:	f04f 0b00 	mov.w	fp, #0
  405f00:	6808      	ldr	r0, [r1, #0]
  405f02:	688b      	ldr	r3, [r1, #8]
  405f04:	465c      	mov	r4, fp
  405f06:	2c00      	cmp	r4, #0
  405f08:	d043      	beq.n	405f92 <__ssprint_r+0xaa>
  405f0a:	429c      	cmp	r4, r3
  405f0c:	461f      	mov	r7, r3
  405f0e:	d345      	bcc.n	405f9c <__ssprint_r+0xb4>
  405f10:	89ab      	ldrh	r3, [r5, #12]
  405f12:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405f16:	d044      	beq.n	405fa2 <__ssprint_r+0xba>
  405f18:	696f      	ldr	r7, [r5, #20]
  405f1a:	6929      	ldr	r1, [r5, #16]
  405f1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  405f20:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  405f24:	ebc1 0900 	rsb	r9, r1, r0
  405f28:	1c62      	adds	r2, r4, #1
  405f2a:	107f      	asrs	r7, r7, #1
  405f2c:	444a      	add	r2, r9
  405f2e:	4297      	cmp	r7, r2
  405f30:	bf34      	ite	cc
  405f32:	4617      	movcc	r7, r2
  405f34:	463a      	movcs	r2, r7
  405f36:	055b      	lsls	r3, r3, #21
  405f38:	d535      	bpl.n	405fa6 <__ssprint_r+0xbe>
  405f3a:	4611      	mov	r1, r2
  405f3c:	4640      	mov	r0, r8
  405f3e:	f7fe fe85 	bl	404c4c <_malloc_r>
  405f42:	2800      	cmp	r0, #0
  405f44:	d039      	beq.n	405fba <__ssprint_r+0xd2>
  405f46:	6929      	ldr	r1, [r5, #16]
  405f48:	9001      	str	r0, [sp, #4]
  405f4a:	464a      	mov	r2, r9
  405f4c:	f7ff f962 	bl	405214 <memcpy>
  405f50:	89aa      	ldrh	r2, [r5, #12]
  405f52:	9b01      	ldr	r3, [sp, #4]
  405f54:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405f58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405f5c:	81aa      	strh	r2, [r5, #12]
  405f5e:	ebc9 0207 	rsb	r2, r9, r7
  405f62:	eb03 0009 	add.w	r0, r3, r9
  405f66:	616f      	str	r7, [r5, #20]
  405f68:	612b      	str	r3, [r5, #16]
  405f6a:	6028      	str	r0, [r5, #0]
  405f6c:	60aa      	str	r2, [r5, #8]
  405f6e:	4627      	mov	r7, r4
  405f70:	46a1      	mov	r9, r4
  405f72:	464a      	mov	r2, r9
  405f74:	4659      	mov	r1, fp
  405f76:	f7ff f9e7 	bl	405348 <memmove>
  405f7a:	f8da 2008 	ldr.w	r2, [sl, #8]
  405f7e:	68ab      	ldr	r3, [r5, #8]
  405f80:	6828      	ldr	r0, [r5, #0]
  405f82:	1bdb      	subs	r3, r3, r7
  405f84:	4448      	add	r0, r9
  405f86:	1b14      	subs	r4, r2, r4
  405f88:	60ab      	str	r3, [r5, #8]
  405f8a:	6028      	str	r0, [r5, #0]
  405f8c:	f8ca 4008 	str.w	r4, [sl, #8]
  405f90:	b324      	cbz	r4, 405fdc <__ssprint_r+0xf4>
  405f92:	f8d6 b000 	ldr.w	fp, [r6]
  405f96:	6874      	ldr	r4, [r6, #4]
  405f98:	3608      	adds	r6, #8
  405f9a:	e7b4      	b.n	405f06 <__ssprint_r+0x1e>
  405f9c:	4627      	mov	r7, r4
  405f9e:	46a1      	mov	r9, r4
  405fa0:	e7e7      	b.n	405f72 <__ssprint_r+0x8a>
  405fa2:	46b9      	mov	r9, r7
  405fa4:	e7e5      	b.n	405f72 <__ssprint_r+0x8a>
  405fa6:	4640      	mov	r0, r8
  405fa8:	f7ff fd3c 	bl	405a24 <_realloc_r>
  405fac:	4603      	mov	r3, r0
  405fae:	2800      	cmp	r0, #0
  405fb0:	d1d5      	bne.n	405f5e <__ssprint_r+0x76>
  405fb2:	4640      	mov	r0, r8
  405fb4:	6929      	ldr	r1, [r5, #16]
  405fb6:	f7fe fd49 	bl	404a4c <_free_r>
  405fba:	89aa      	ldrh	r2, [r5, #12]
  405fbc:	230c      	movs	r3, #12
  405fbe:	f8c8 3000 	str.w	r3, [r8]
  405fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405fc6:	2300      	movs	r3, #0
  405fc8:	f04f 30ff 	mov.w	r0, #4294967295
  405fcc:	81aa      	strh	r2, [r5, #12]
  405fce:	f8ca 3008 	str.w	r3, [sl, #8]
  405fd2:	f8ca 3004 	str.w	r3, [sl, #4]
  405fd6:	b003      	add	sp, #12
  405fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fdc:	4620      	mov	r0, r4
  405fde:	f8ca 4004 	str.w	r4, [sl, #4]
  405fe2:	b003      	add	sp, #12
  405fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405fe8 <_write_r>:
  405fe8:	b570      	push	{r4, r5, r6, lr}
  405fea:	4c08      	ldr	r4, [pc, #32]	; (40600c <_write_r+0x24>)
  405fec:	4606      	mov	r6, r0
  405fee:	2500      	movs	r5, #0
  405ff0:	4608      	mov	r0, r1
  405ff2:	4611      	mov	r1, r2
  405ff4:	461a      	mov	r2, r3
  405ff6:	6025      	str	r5, [r4, #0]
  405ff8:	f7fa fa10 	bl	40041c <_write>
  405ffc:	1c43      	adds	r3, r0, #1
  405ffe:	d000      	beq.n	406002 <_write_r+0x1a>
  406000:	bd70      	pop	{r4, r5, r6, pc}
  406002:	6823      	ldr	r3, [r4, #0]
  406004:	2b00      	cmp	r3, #0
  406006:	d0fb      	beq.n	406000 <_write_r+0x18>
  406008:	6033      	str	r3, [r6, #0]
  40600a:	bd70      	pop	{r4, r5, r6, pc}
  40600c:	20000978 	.word	0x20000978

00406010 <__register_exitproc>:
  406010:	b5f0      	push	{r4, r5, r6, r7, lr}
  406012:	4c27      	ldr	r4, [pc, #156]	; (4060b0 <__register_exitproc+0xa0>)
  406014:	6826      	ldr	r6, [r4, #0]
  406016:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  40601a:	b085      	sub	sp, #20
  40601c:	4607      	mov	r7, r0
  40601e:	2c00      	cmp	r4, #0
  406020:	d041      	beq.n	4060a6 <__register_exitproc+0x96>
  406022:	6865      	ldr	r5, [r4, #4]
  406024:	2d1f      	cmp	r5, #31
  406026:	dd1e      	ble.n	406066 <__register_exitproc+0x56>
  406028:	4822      	ldr	r0, [pc, #136]	; (4060b4 <__register_exitproc+0xa4>)
  40602a:	b918      	cbnz	r0, 406034 <__register_exitproc+0x24>
  40602c:	f04f 30ff 	mov.w	r0, #4294967295
  406030:	b005      	add	sp, #20
  406032:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406034:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406038:	9103      	str	r1, [sp, #12]
  40603a:	9202      	str	r2, [sp, #8]
  40603c:	9301      	str	r3, [sp, #4]
  40603e:	f7fe fdfd 	bl	404c3c <malloc>
  406042:	9903      	ldr	r1, [sp, #12]
  406044:	9a02      	ldr	r2, [sp, #8]
  406046:	9b01      	ldr	r3, [sp, #4]
  406048:	4604      	mov	r4, r0
  40604a:	2800      	cmp	r0, #0
  40604c:	d0ee      	beq.n	40602c <__register_exitproc+0x1c>
  40604e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  406052:	6025      	str	r5, [r4, #0]
  406054:	2000      	movs	r0, #0
  406056:	6060      	str	r0, [r4, #4]
  406058:	4605      	mov	r5, r0
  40605a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  40605e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  406062:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  406066:	b93f      	cbnz	r7, 406078 <__register_exitproc+0x68>
  406068:	1cab      	adds	r3, r5, #2
  40606a:	2000      	movs	r0, #0
  40606c:	3501      	adds	r5, #1
  40606e:	6065      	str	r5, [r4, #4]
  406070:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  406074:	b005      	add	sp, #20
  406076:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406078:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  40607c:	f04f 0c01 	mov.w	ip, #1
  406080:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  406084:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  406088:	fa0c f205 	lsl.w	r2, ip, r5
  40608c:	4316      	orrs	r6, r2
  40608e:	2f02      	cmp	r7, #2
  406090:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  406094:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  406098:	d1e6      	bne.n	406068 <__register_exitproc+0x58>
  40609a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40609e:	431a      	orrs	r2, r3
  4060a0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4060a4:	e7e0      	b.n	406068 <__register_exitproc+0x58>
  4060a6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  4060aa:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4060ae:	e7b8      	b.n	406022 <__register_exitproc+0x12>
  4060b0:	004079f4 	.word	0x004079f4
  4060b4:	00404c3d 	.word	0x00404c3d

004060b8 <_calloc_r>:
  4060b8:	b510      	push	{r4, lr}
  4060ba:	fb02 f101 	mul.w	r1, r2, r1
  4060be:	f7fe fdc5 	bl	404c4c <_malloc_r>
  4060c2:	4604      	mov	r4, r0
  4060c4:	b168      	cbz	r0, 4060e2 <_calloc_r+0x2a>
  4060c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4060ca:	f022 0203 	bic.w	r2, r2, #3
  4060ce:	3a04      	subs	r2, #4
  4060d0:	2a24      	cmp	r2, #36	; 0x24
  4060d2:	d818      	bhi.n	406106 <_calloc_r+0x4e>
  4060d4:	2a13      	cmp	r2, #19
  4060d6:	d806      	bhi.n	4060e6 <_calloc_r+0x2e>
  4060d8:	4603      	mov	r3, r0
  4060da:	2200      	movs	r2, #0
  4060dc:	601a      	str	r2, [r3, #0]
  4060de:	605a      	str	r2, [r3, #4]
  4060e0:	609a      	str	r2, [r3, #8]
  4060e2:	4620      	mov	r0, r4
  4060e4:	bd10      	pop	{r4, pc}
  4060e6:	2300      	movs	r3, #0
  4060e8:	2a1b      	cmp	r2, #27
  4060ea:	6003      	str	r3, [r0, #0]
  4060ec:	6043      	str	r3, [r0, #4]
  4060ee:	d90f      	bls.n	406110 <_calloc_r+0x58>
  4060f0:	2a24      	cmp	r2, #36	; 0x24
  4060f2:	6083      	str	r3, [r0, #8]
  4060f4:	60c3      	str	r3, [r0, #12]
  4060f6:	bf05      	ittet	eq
  4060f8:	6103      	streq	r3, [r0, #16]
  4060fa:	6143      	streq	r3, [r0, #20]
  4060fc:	f100 0310 	addne.w	r3, r0, #16
  406100:	f100 0318 	addeq.w	r3, r0, #24
  406104:	e7e9      	b.n	4060da <_calloc_r+0x22>
  406106:	2100      	movs	r1, #0
  406108:	f7fb ff8c 	bl	402024 <memset>
  40610c:	4620      	mov	r0, r4
  40610e:	bd10      	pop	{r4, pc}
  406110:	f100 0308 	add.w	r3, r0, #8
  406114:	e7e1      	b.n	4060da <_calloc_r+0x22>
  406116:	bf00      	nop

00406118 <_close_r>:
  406118:	b538      	push	{r3, r4, r5, lr}
  40611a:	4c07      	ldr	r4, [pc, #28]	; (406138 <_close_r+0x20>)
  40611c:	2300      	movs	r3, #0
  40611e:	4605      	mov	r5, r0
  406120:	4608      	mov	r0, r1
  406122:	6023      	str	r3, [r4, #0]
  406124:	f7fa ffb6 	bl	401094 <_close>
  406128:	1c43      	adds	r3, r0, #1
  40612a:	d000      	beq.n	40612e <_close_r+0x16>
  40612c:	bd38      	pop	{r3, r4, r5, pc}
  40612e:	6823      	ldr	r3, [r4, #0]
  406130:	2b00      	cmp	r3, #0
  406132:	d0fb      	beq.n	40612c <_close_r+0x14>
  406134:	602b      	str	r3, [r5, #0]
  406136:	bd38      	pop	{r3, r4, r5, pc}
  406138:	20000978 	.word	0x20000978

0040613c <_fclose_r>:
  40613c:	b570      	push	{r4, r5, r6, lr}
  40613e:	460c      	mov	r4, r1
  406140:	4605      	mov	r5, r0
  406142:	b131      	cbz	r1, 406152 <_fclose_r+0x16>
  406144:	b110      	cbz	r0, 40614c <_fclose_r+0x10>
  406146:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406148:	2b00      	cmp	r3, #0
  40614a:	d02f      	beq.n	4061ac <_fclose_r+0x70>
  40614c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406150:	b90b      	cbnz	r3, 406156 <_fclose_r+0x1a>
  406152:	2000      	movs	r0, #0
  406154:	bd70      	pop	{r4, r5, r6, pc}
  406156:	4628      	mov	r0, r5
  406158:	4621      	mov	r1, r4
  40615a:	f7fe fb77 	bl	40484c <_fflush_r>
  40615e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406160:	4606      	mov	r6, r0
  406162:	b133      	cbz	r3, 406172 <_fclose_r+0x36>
  406164:	4628      	mov	r0, r5
  406166:	69e1      	ldr	r1, [r4, #28]
  406168:	4798      	blx	r3
  40616a:	2800      	cmp	r0, #0
  40616c:	bfb8      	it	lt
  40616e:	f04f 36ff 	movlt.w	r6, #4294967295
  406172:	89a3      	ldrh	r3, [r4, #12]
  406174:	061b      	lsls	r3, r3, #24
  406176:	d41c      	bmi.n	4061b2 <_fclose_r+0x76>
  406178:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40617a:	b141      	cbz	r1, 40618e <_fclose_r+0x52>
  40617c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406180:	4299      	cmp	r1, r3
  406182:	d002      	beq.n	40618a <_fclose_r+0x4e>
  406184:	4628      	mov	r0, r5
  406186:	f7fe fc61 	bl	404a4c <_free_r>
  40618a:	2300      	movs	r3, #0
  40618c:	6323      	str	r3, [r4, #48]	; 0x30
  40618e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406190:	b121      	cbz	r1, 40619c <_fclose_r+0x60>
  406192:	4628      	mov	r0, r5
  406194:	f7fe fc5a 	bl	404a4c <_free_r>
  406198:	2300      	movs	r3, #0
  40619a:	6463      	str	r3, [r4, #68]	; 0x44
  40619c:	f7fe fbec 	bl	404978 <__sfp_lock_acquire>
  4061a0:	2300      	movs	r3, #0
  4061a2:	81a3      	strh	r3, [r4, #12]
  4061a4:	f7fe fbea 	bl	40497c <__sfp_lock_release>
  4061a8:	4630      	mov	r0, r6
  4061aa:	bd70      	pop	{r4, r5, r6, pc}
  4061ac:	f7fe fb6a 	bl	404884 <__sinit>
  4061b0:	e7cc      	b.n	40614c <_fclose_r+0x10>
  4061b2:	4628      	mov	r0, r5
  4061b4:	6921      	ldr	r1, [r4, #16]
  4061b6:	f7fe fc49 	bl	404a4c <_free_r>
  4061ba:	e7dd      	b.n	406178 <_fclose_r+0x3c>

004061bc <fclose>:
  4061bc:	4b02      	ldr	r3, [pc, #8]	; (4061c8 <fclose+0xc>)
  4061be:	4601      	mov	r1, r0
  4061c0:	6818      	ldr	r0, [r3, #0]
  4061c2:	f7ff bfbb 	b.w	40613c <_fclose_r>
  4061c6:	bf00      	nop
  4061c8:	20000440 	.word	0x20000440

004061cc <_lseek_r>:
  4061cc:	b570      	push	{r4, r5, r6, lr}
  4061ce:	4c08      	ldr	r4, [pc, #32]	; (4061f0 <_lseek_r+0x24>)
  4061d0:	4606      	mov	r6, r0
  4061d2:	2500      	movs	r5, #0
  4061d4:	4608      	mov	r0, r1
  4061d6:	4611      	mov	r1, r2
  4061d8:	461a      	mov	r2, r3
  4061da:	6025      	str	r5, [r4, #0]
  4061dc:	f7fa ff5e 	bl	40109c <_lseek>
  4061e0:	1c43      	adds	r3, r0, #1
  4061e2:	d000      	beq.n	4061e6 <_lseek_r+0x1a>
  4061e4:	bd70      	pop	{r4, r5, r6, pc}
  4061e6:	6823      	ldr	r3, [r4, #0]
  4061e8:	2b00      	cmp	r3, #0
  4061ea:	d0fb      	beq.n	4061e4 <_lseek_r+0x18>
  4061ec:	6033      	str	r3, [r6, #0]
  4061ee:	bd70      	pop	{r4, r5, r6, pc}
  4061f0:	20000978 	.word	0x20000978

004061f4 <_read_r>:
  4061f4:	b570      	push	{r4, r5, r6, lr}
  4061f6:	4c08      	ldr	r4, [pc, #32]	; (406218 <_read_r+0x24>)
  4061f8:	4606      	mov	r6, r0
  4061fa:	2500      	movs	r5, #0
  4061fc:	4608      	mov	r0, r1
  4061fe:	4611      	mov	r1, r2
  406200:	461a      	mov	r2, r3
  406202:	6025      	str	r5, [r4, #0]
  406204:	f7fa f8ea 	bl	4003dc <_read>
  406208:	1c43      	adds	r3, r0, #1
  40620a:	d000      	beq.n	40620e <_read_r+0x1a>
  40620c:	bd70      	pop	{r4, r5, r6, pc}
  40620e:	6823      	ldr	r3, [r4, #0]
  406210:	2b00      	cmp	r3, #0
  406212:	d0fb      	beq.n	40620c <_read_r+0x18>
  406214:	6033      	str	r3, [r6, #0]
  406216:	bd70      	pop	{r4, r5, r6, pc}
  406218:	20000978 	.word	0x20000978

0040621c <__gedf2>:
  40621c:	f04f 3cff 	mov.w	ip, #4294967295
  406220:	e006      	b.n	406230 <__cmpdf2+0x4>
  406222:	bf00      	nop

00406224 <__ledf2>:
  406224:	f04f 0c01 	mov.w	ip, #1
  406228:	e002      	b.n	406230 <__cmpdf2+0x4>
  40622a:	bf00      	nop

0040622c <__cmpdf2>:
  40622c:	f04f 0c01 	mov.w	ip, #1
  406230:	f84d cd04 	str.w	ip, [sp, #-4]!
  406234:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406238:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40623c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406240:	bf18      	it	ne
  406242:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406246:	d01b      	beq.n	406280 <__cmpdf2+0x54>
  406248:	b001      	add	sp, #4
  40624a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40624e:	bf0c      	ite	eq
  406250:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406254:	ea91 0f03 	teqne	r1, r3
  406258:	bf02      	ittt	eq
  40625a:	ea90 0f02 	teqeq	r0, r2
  40625e:	2000      	moveq	r0, #0
  406260:	4770      	bxeq	lr
  406262:	f110 0f00 	cmn.w	r0, #0
  406266:	ea91 0f03 	teq	r1, r3
  40626a:	bf58      	it	pl
  40626c:	4299      	cmppl	r1, r3
  40626e:	bf08      	it	eq
  406270:	4290      	cmpeq	r0, r2
  406272:	bf2c      	ite	cs
  406274:	17d8      	asrcs	r0, r3, #31
  406276:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40627a:	f040 0001 	orr.w	r0, r0, #1
  40627e:	4770      	bx	lr
  406280:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406288:	d102      	bne.n	406290 <__cmpdf2+0x64>
  40628a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40628e:	d107      	bne.n	4062a0 <__cmpdf2+0x74>
  406290:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406294:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406298:	d1d6      	bne.n	406248 <__cmpdf2+0x1c>
  40629a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40629e:	d0d3      	beq.n	406248 <__cmpdf2+0x1c>
  4062a0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4062a4:	4770      	bx	lr
  4062a6:	bf00      	nop

004062a8 <__aeabi_cdrcmple>:
  4062a8:	4684      	mov	ip, r0
  4062aa:	4610      	mov	r0, r2
  4062ac:	4662      	mov	r2, ip
  4062ae:	468c      	mov	ip, r1
  4062b0:	4619      	mov	r1, r3
  4062b2:	4663      	mov	r3, ip
  4062b4:	e000      	b.n	4062b8 <__aeabi_cdcmpeq>
  4062b6:	bf00      	nop

004062b8 <__aeabi_cdcmpeq>:
  4062b8:	b501      	push	{r0, lr}
  4062ba:	f7ff ffb7 	bl	40622c <__cmpdf2>
  4062be:	2800      	cmp	r0, #0
  4062c0:	bf48      	it	mi
  4062c2:	f110 0f00 	cmnmi.w	r0, #0
  4062c6:	bd01      	pop	{r0, pc}

004062c8 <__aeabi_dcmpeq>:
  4062c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062cc:	f7ff fff4 	bl	4062b8 <__aeabi_cdcmpeq>
  4062d0:	bf0c      	ite	eq
  4062d2:	2001      	moveq	r0, #1
  4062d4:	2000      	movne	r0, #0
  4062d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4062da:	bf00      	nop

004062dc <__aeabi_dcmplt>:
  4062dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062e0:	f7ff ffea 	bl	4062b8 <__aeabi_cdcmpeq>
  4062e4:	bf34      	ite	cc
  4062e6:	2001      	movcc	r0, #1
  4062e8:	2000      	movcs	r0, #0
  4062ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4062ee:	bf00      	nop

004062f0 <__aeabi_dcmple>:
  4062f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062f4:	f7ff ffe0 	bl	4062b8 <__aeabi_cdcmpeq>
  4062f8:	bf94      	ite	ls
  4062fa:	2001      	movls	r0, #1
  4062fc:	2000      	movhi	r0, #0
  4062fe:	f85d fb08 	ldr.w	pc, [sp], #8
  406302:	bf00      	nop

00406304 <__aeabi_dcmpge>:
  406304:	f84d ed08 	str.w	lr, [sp, #-8]!
  406308:	f7ff ffce 	bl	4062a8 <__aeabi_cdrcmple>
  40630c:	bf94      	ite	ls
  40630e:	2001      	movls	r0, #1
  406310:	2000      	movhi	r0, #0
  406312:	f85d fb08 	ldr.w	pc, [sp], #8
  406316:	bf00      	nop

00406318 <__aeabi_dcmpgt>:
  406318:	f84d ed08 	str.w	lr, [sp, #-8]!
  40631c:	f7ff ffc4 	bl	4062a8 <__aeabi_cdrcmple>
  406320:	bf34      	ite	cc
  406322:	2001      	movcc	r0, #1
  406324:	2000      	movcs	r0, #0
  406326:	f85d fb08 	ldr.w	pc, [sp], #8
  40632a:	bf00      	nop

0040632c <__aeabi_d2iz>:
  40632c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406330:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406334:	d215      	bcs.n	406362 <__aeabi_d2iz+0x36>
  406336:	d511      	bpl.n	40635c <__aeabi_d2iz+0x30>
  406338:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40633c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406340:	d912      	bls.n	406368 <__aeabi_d2iz+0x3c>
  406342:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40634a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40634e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406352:	fa23 f002 	lsr.w	r0, r3, r2
  406356:	bf18      	it	ne
  406358:	4240      	negne	r0, r0
  40635a:	4770      	bx	lr
  40635c:	f04f 0000 	mov.w	r0, #0
  406360:	4770      	bx	lr
  406362:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406366:	d105      	bne.n	406374 <__aeabi_d2iz+0x48>
  406368:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40636c:	bf08      	it	eq
  40636e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406372:	4770      	bx	lr
  406374:	f04f 0000 	mov.w	r0, #0
  406378:	4770      	bx	lr
  40637a:	bf00      	nop

0040637c <__aeabi_uldivmod>:
  40637c:	b94b      	cbnz	r3, 406392 <__aeabi_uldivmod+0x16>
  40637e:	b942      	cbnz	r2, 406392 <__aeabi_uldivmod+0x16>
  406380:	2900      	cmp	r1, #0
  406382:	bf08      	it	eq
  406384:	2800      	cmpeq	r0, #0
  406386:	d002      	beq.n	40638e <__aeabi_uldivmod+0x12>
  406388:	f04f 31ff 	mov.w	r1, #4294967295
  40638c:	4608      	mov	r0, r1
  40638e:	f000 b83b 	b.w	406408 <__aeabi_idiv0>
  406392:	b082      	sub	sp, #8
  406394:	46ec      	mov	ip, sp
  406396:	e92d 5000 	stmdb	sp!, {ip, lr}
  40639a:	f000 f81d 	bl	4063d8 <__gnu_uldivmod_helper>
  40639e:	f8dd e004 	ldr.w	lr, [sp, #4]
  4063a2:	b002      	add	sp, #8
  4063a4:	bc0c      	pop	{r2, r3}
  4063a6:	4770      	bx	lr

004063a8 <__gnu_ldivmod_helper>:
  4063a8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  4063ac:	9e06      	ldr	r6, [sp, #24]
  4063ae:	4614      	mov	r4, r2
  4063b0:	461d      	mov	r5, r3
  4063b2:	4680      	mov	r8, r0
  4063b4:	4689      	mov	r9, r1
  4063b6:	f000 f829 	bl	40640c <__divdi3>
  4063ba:	fb04 f301 	mul.w	r3, r4, r1
  4063be:	fb00 3305 	mla	r3, r0, r5, r3
  4063c2:	fba4 4500 	umull	r4, r5, r4, r0
  4063c6:	441d      	add	r5, r3
  4063c8:	ebb8 0404 	subs.w	r4, r8, r4
  4063cc:	eb69 0505 	sbc.w	r5, r9, r5
  4063d0:	e9c6 4500 	strd	r4, r5, [r6]
  4063d4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

004063d8 <__gnu_uldivmod_helper>:
  4063d8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  4063dc:	9e06      	ldr	r6, [sp, #24]
  4063de:	4614      	mov	r4, r2
  4063e0:	4680      	mov	r8, r0
  4063e2:	4689      	mov	r9, r1
  4063e4:	461d      	mov	r5, r3
  4063e6:	f000 f95d 	bl	4066a4 <__udivdi3>
  4063ea:	fb00 f505 	mul.w	r5, r0, r5
  4063ee:	fb04 5301 	mla	r3, r4, r1, r5
  4063f2:	fba0 4504 	umull	r4, r5, r0, r4
  4063f6:	441d      	add	r5, r3
  4063f8:	ebb8 0404 	subs.w	r4, r8, r4
  4063fc:	eb69 0505 	sbc.w	r5, r9, r5
  406400:	e9c6 4500 	strd	r4, r5, [r6]
  406404:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00406408 <__aeabi_idiv0>:
  406408:	4770      	bx	lr
  40640a:	bf00      	nop

0040640c <__divdi3>:
  40640c:	2900      	cmp	r1, #0
  40640e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406412:	f2c0 809f 	blt.w	406554 <__divdi3+0x148>
  406416:	2400      	movs	r4, #0
  406418:	2b00      	cmp	r3, #0
  40641a:	f2c0 8096 	blt.w	40654a <__divdi3+0x13e>
  40641e:	4615      	mov	r5, r2
  406420:	4606      	mov	r6, r0
  406422:	460f      	mov	r7, r1
  406424:	2b00      	cmp	r3, #0
  406426:	d13e      	bne.n	4064a6 <__divdi3+0x9a>
  406428:	428a      	cmp	r2, r1
  40642a:	d957      	bls.n	4064dc <__divdi3+0xd0>
  40642c:	fab2 f382 	clz	r3, r2
  406430:	b14b      	cbz	r3, 406446 <__divdi3+0x3a>
  406432:	f1c3 0220 	rsb	r2, r3, #32
  406436:	fa01 f703 	lsl.w	r7, r1, r3
  40643a:	fa20 f202 	lsr.w	r2, r0, r2
  40643e:	409d      	lsls	r5, r3
  406440:	4317      	orrs	r7, r2
  406442:	fa00 f603 	lsl.w	r6, r0, r3
  406446:	0c29      	lsrs	r1, r5, #16
  406448:	fbb7 f2f1 	udiv	r2, r7, r1
  40644c:	0c33      	lsrs	r3, r6, #16
  40644e:	fb01 7c12 	mls	ip, r1, r2, r7
  406452:	b2a8      	uxth	r0, r5
  406454:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  406458:	fb00 f302 	mul.w	r3, r0, r2
  40645c:	42bb      	cmp	r3, r7
  40645e:	d909      	bls.n	406474 <__divdi3+0x68>
  406460:	197f      	adds	r7, r7, r5
  406462:	f102 3cff 	add.w	ip, r2, #4294967295
  406466:	f080 8101 	bcs.w	40666c <__divdi3+0x260>
  40646a:	42bb      	cmp	r3, r7
  40646c:	f240 80fe 	bls.w	40666c <__divdi3+0x260>
  406470:	3a02      	subs	r2, #2
  406472:	442f      	add	r7, r5
  406474:	1aff      	subs	r7, r7, r3
  406476:	fbb7 f3f1 	udiv	r3, r7, r1
  40647a:	b2b6      	uxth	r6, r6
  40647c:	fb01 7113 	mls	r1, r1, r3, r7
  406480:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  406484:	fb00 f003 	mul.w	r0, r0, r3
  406488:	4288      	cmp	r0, r1
  40648a:	d908      	bls.n	40649e <__divdi3+0x92>
  40648c:	1949      	adds	r1, r1, r5
  40648e:	f103 37ff 	add.w	r7, r3, #4294967295
  406492:	f080 80ed 	bcs.w	406670 <__divdi3+0x264>
  406496:	4288      	cmp	r0, r1
  406498:	f240 80ea 	bls.w	406670 <__divdi3+0x264>
  40649c:	3b02      	subs	r3, #2
  40649e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4064a2:	2300      	movs	r3, #0
  4064a4:	e003      	b.n	4064ae <__divdi3+0xa2>
  4064a6:	428b      	cmp	r3, r1
  4064a8:	d90a      	bls.n	4064c0 <__divdi3+0xb4>
  4064aa:	2300      	movs	r3, #0
  4064ac:	461a      	mov	r2, r3
  4064ae:	4610      	mov	r0, r2
  4064b0:	4619      	mov	r1, r3
  4064b2:	b114      	cbz	r4, 4064ba <__divdi3+0xae>
  4064b4:	4240      	negs	r0, r0
  4064b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4064ba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4064be:	4770      	bx	lr
  4064c0:	fab3 f883 	clz	r8, r3
  4064c4:	f1b8 0f00 	cmp.w	r8, #0
  4064c8:	f040 8084 	bne.w	4065d4 <__divdi3+0x1c8>
  4064cc:	428b      	cmp	r3, r1
  4064ce:	d302      	bcc.n	4064d6 <__divdi3+0xca>
  4064d0:	4282      	cmp	r2, r0
  4064d2:	f200 80de 	bhi.w	406692 <__divdi3+0x286>
  4064d6:	2300      	movs	r3, #0
  4064d8:	2201      	movs	r2, #1
  4064da:	e7e8      	b.n	4064ae <__divdi3+0xa2>
  4064dc:	b912      	cbnz	r2, 4064e4 <__divdi3+0xd8>
  4064de:	2301      	movs	r3, #1
  4064e0:	fbb3 f5f2 	udiv	r5, r3, r2
  4064e4:	fab5 f285 	clz	r2, r5
  4064e8:	2a00      	cmp	r2, #0
  4064ea:	d139      	bne.n	406560 <__divdi3+0x154>
  4064ec:	1b7f      	subs	r7, r7, r5
  4064ee:	0c28      	lsrs	r0, r5, #16
  4064f0:	fa1f fc85 	uxth.w	ip, r5
  4064f4:	2301      	movs	r3, #1
  4064f6:	fbb7 f1f0 	udiv	r1, r7, r0
  4064fa:	0c32      	lsrs	r2, r6, #16
  4064fc:	fb00 7711 	mls	r7, r0, r1, r7
  406500:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  406504:	fb0c f201 	mul.w	r2, ip, r1
  406508:	42ba      	cmp	r2, r7
  40650a:	d907      	bls.n	40651c <__divdi3+0x110>
  40650c:	197f      	adds	r7, r7, r5
  40650e:	f101 38ff 	add.w	r8, r1, #4294967295
  406512:	d202      	bcs.n	40651a <__divdi3+0x10e>
  406514:	42ba      	cmp	r2, r7
  406516:	f200 80c1 	bhi.w	40669c <__divdi3+0x290>
  40651a:	4641      	mov	r1, r8
  40651c:	1abf      	subs	r7, r7, r2
  40651e:	fbb7 f2f0 	udiv	r2, r7, r0
  406522:	b2b6      	uxth	r6, r6
  406524:	fb00 7012 	mls	r0, r0, r2, r7
  406528:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  40652c:	fb0c fc02 	mul.w	ip, ip, r2
  406530:	4584      	cmp	ip, r0
  406532:	d907      	bls.n	406544 <__divdi3+0x138>
  406534:	1940      	adds	r0, r0, r5
  406536:	f102 37ff 	add.w	r7, r2, #4294967295
  40653a:	d202      	bcs.n	406542 <__divdi3+0x136>
  40653c:	4584      	cmp	ip, r0
  40653e:	f200 80ab 	bhi.w	406698 <__divdi3+0x28c>
  406542:	463a      	mov	r2, r7
  406544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  406548:	e7b1      	b.n	4064ae <__divdi3+0xa2>
  40654a:	43e4      	mvns	r4, r4
  40654c:	4252      	negs	r2, r2
  40654e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406552:	e764      	b.n	40641e <__divdi3+0x12>
  406554:	4240      	negs	r0, r0
  406556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40655a:	f04f 34ff 	mov.w	r4, #4294967295
  40655e:	e75b      	b.n	406418 <__divdi3+0xc>
  406560:	4095      	lsls	r5, r2
  406562:	f1c2 0320 	rsb	r3, r2, #32
  406566:	fa27 f103 	lsr.w	r1, r7, r3
  40656a:	0c28      	lsrs	r0, r5, #16
  40656c:	fa26 f303 	lsr.w	r3, r6, r3
  406570:	4097      	lsls	r7, r2
  406572:	fbb1 f8f0 	udiv	r8, r1, r0
  406576:	431f      	orrs	r7, r3
  406578:	0c3b      	lsrs	r3, r7, #16
  40657a:	fb00 1118 	mls	r1, r0, r8, r1
  40657e:	fa1f fc85 	uxth.w	ip, r5
  406582:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  406586:	fb0c f308 	mul.w	r3, ip, r8
  40658a:	428b      	cmp	r3, r1
  40658c:	fa06 f602 	lsl.w	r6, r6, r2
  406590:	d908      	bls.n	4065a4 <__divdi3+0x198>
  406592:	1949      	adds	r1, r1, r5
  406594:	f108 32ff 	add.w	r2, r8, #4294967295
  406598:	d279      	bcs.n	40668e <__divdi3+0x282>
  40659a:	428b      	cmp	r3, r1
  40659c:	d977      	bls.n	40668e <__divdi3+0x282>
  40659e:	f1a8 0802 	sub.w	r8, r8, #2
  4065a2:	4429      	add	r1, r5
  4065a4:	1ac9      	subs	r1, r1, r3
  4065a6:	fbb1 f3f0 	udiv	r3, r1, r0
  4065aa:	b2bf      	uxth	r7, r7
  4065ac:	fb00 1113 	mls	r1, r0, r3, r1
  4065b0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  4065b4:	fb0c f203 	mul.w	r2, ip, r3
  4065b8:	42ba      	cmp	r2, r7
  4065ba:	d907      	bls.n	4065cc <__divdi3+0x1c0>
  4065bc:	197f      	adds	r7, r7, r5
  4065be:	f103 31ff 	add.w	r1, r3, #4294967295
  4065c2:	d260      	bcs.n	406686 <__divdi3+0x27a>
  4065c4:	42ba      	cmp	r2, r7
  4065c6:	d95e      	bls.n	406686 <__divdi3+0x27a>
  4065c8:	3b02      	subs	r3, #2
  4065ca:	442f      	add	r7, r5
  4065cc:	1abf      	subs	r7, r7, r2
  4065ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4065d2:	e790      	b.n	4064f6 <__divdi3+0xea>
  4065d4:	f1c8 0220 	rsb	r2, r8, #32
  4065d8:	fa03 fc08 	lsl.w	ip, r3, r8
  4065dc:	fa25 f302 	lsr.w	r3, r5, r2
  4065e0:	ea43 0c0c 	orr.w	ip, r3, ip
  4065e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
  4065e8:	fa21 f302 	lsr.w	r3, r1, r2
  4065ec:	fa01 f708 	lsl.w	r7, r1, r8
  4065f0:	fa20 f202 	lsr.w	r2, r0, r2
  4065f4:	fbb3 f1f9 	udiv	r1, r3, r9
  4065f8:	4317      	orrs	r7, r2
  4065fa:	fb09 3311 	mls	r3, r9, r1, r3
  4065fe:	0c3a      	lsrs	r2, r7, #16
  406600:	fa1f fb8c 	uxth.w	fp, ip
  406604:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  406608:	fb0b fa01 	mul.w	sl, fp, r1
  40660c:	459a      	cmp	sl, r3
  40660e:	fa05 f008 	lsl.w	r0, r5, r8
  406612:	d908      	bls.n	406626 <__divdi3+0x21a>
  406614:	eb13 030c 	adds.w	r3, r3, ip
  406618:	f101 32ff 	add.w	r2, r1, #4294967295
  40661c:	d235      	bcs.n	40668a <__divdi3+0x27e>
  40661e:	459a      	cmp	sl, r3
  406620:	d933      	bls.n	40668a <__divdi3+0x27e>
  406622:	3902      	subs	r1, #2
  406624:	4463      	add	r3, ip
  406626:	ebca 0303 	rsb	r3, sl, r3
  40662a:	fbb3 f2f9 	udiv	r2, r3, r9
  40662e:	fb09 3312 	mls	r3, r9, r2, r3
  406632:	b2bf      	uxth	r7, r7
  406634:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  406638:	fb0b f902 	mul.w	r9, fp, r2
  40663c:	45b9      	cmp	r9, r7
  40663e:	d908      	bls.n	406652 <__divdi3+0x246>
  406640:	eb17 070c 	adds.w	r7, r7, ip
  406644:	f102 33ff 	add.w	r3, r2, #4294967295
  406648:	d21b      	bcs.n	406682 <__divdi3+0x276>
  40664a:	45b9      	cmp	r9, r7
  40664c:	d919      	bls.n	406682 <__divdi3+0x276>
  40664e:	3a02      	subs	r2, #2
  406650:	4467      	add	r7, ip
  406652:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  406656:	fba5 0100 	umull	r0, r1, r5, r0
  40665a:	ebc9 0707 	rsb	r7, r9, r7
  40665e:	428f      	cmp	r7, r1
  406660:	f04f 0300 	mov.w	r3, #0
  406664:	d30a      	bcc.n	40667c <__divdi3+0x270>
  406666:	d005      	beq.n	406674 <__divdi3+0x268>
  406668:	462a      	mov	r2, r5
  40666a:	e720      	b.n	4064ae <__divdi3+0xa2>
  40666c:	4662      	mov	r2, ip
  40666e:	e701      	b.n	406474 <__divdi3+0x68>
  406670:	463b      	mov	r3, r7
  406672:	e714      	b.n	40649e <__divdi3+0x92>
  406674:	fa06 f608 	lsl.w	r6, r6, r8
  406678:	4286      	cmp	r6, r0
  40667a:	d2f5      	bcs.n	406668 <__divdi3+0x25c>
  40667c:	1e6a      	subs	r2, r5, #1
  40667e:	2300      	movs	r3, #0
  406680:	e715      	b.n	4064ae <__divdi3+0xa2>
  406682:	461a      	mov	r2, r3
  406684:	e7e5      	b.n	406652 <__divdi3+0x246>
  406686:	460b      	mov	r3, r1
  406688:	e7a0      	b.n	4065cc <__divdi3+0x1c0>
  40668a:	4611      	mov	r1, r2
  40668c:	e7cb      	b.n	406626 <__divdi3+0x21a>
  40668e:	4690      	mov	r8, r2
  406690:	e788      	b.n	4065a4 <__divdi3+0x198>
  406692:	4643      	mov	r3, r8
  406694:	4642      	mov	r2, r8
  406696:	e70a      	b.n	4064ae <__divdi3+0xa2>
  406698:	3a02      	subs	r2, #2
  40669a:	e753      	b.n	406544 <__divdi3+0x138>
  40669c:	3902      	subs	r1, #2
  40669e:	442f      	add	r7, r5
  4066a0:	e73c      	b.n	40651c <__divdi3+0x110>
  4066a2:	bf00      	nop

004066a4 <__udivdi3>:
  4066a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4066a8:	4614      	mov	r4, r2
  4066aa:	4605      	mov	r5, r0
  4066ac:	460e      	mov	r6, r1
  4066ae:	2b00      	cmp	r3, #0
  4066b0:	d143      	bne.n	40673a <__udivdi3+0x96>
  4066b2:	428a      	cmp	r2, r1
  4066b4:	d953      	bls.n	40675e <__udivdi3+0xba>
  4066b6:	fab2 f782 	clz	r7, r2
  4066ba:	b157      	cbz	r7, 4066d2 <__udivdi3+0x2e>
  4066bc:	f1c7 0620 	rsb	r6, r7, #32
  4066c0:	fa20 f606 	lsr.w	r6, r0, r6
  4066c4:	fa01 f307 	lsl.w	r3, r1, r7
  4066c8:	fa02 f407 	lsl.w	r4, r2, r7
  4066cc:	431e      	orrs	r6, r3
  4066ce:	fa00 f507 	lsl.w	r5, r0, r7
  4066d2:	0c21      	lsrs	r1, r4, #16
  4066d4:	fbb6 f2f1 	udiv	r2, r6, r1
  4066d8:	0c2b      	lsrs	r3, r5, #16
  4066da:	fb01 6712 	mls	r7, r1, r2, r6
  4066de:	b2a0      	uxth	r0, r4
  4066e0:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  4066e4:	fb00 f302 	mul.w	r3, r0, r2
  4066e8:	42b3      	cmp	r3, r6
  4066ea:	d909      	bls.n	406700 <__udivdi3+0x5c>
  4066ec:	1936      	adds	r6, r6, r4
  4066ee:	f102 37ff 	add.w	r7, r2, #4294967295
  4066f2:	f080 80f6 	bcs.w	4068e2 <__udivdi3+0x23e>
  4066f6:	42b3      	cmp	r3, r6
  4066f8:	f240 80f3 	bls.w	4068e2 <__udivdi3+0x23e>
  4066fc:	3a02      	subs	r2, #2
  4066fe:	4426      	add	r6, r4
  406700:	1af6      	subs	r6, r6, r3
  406702:	fbb6 f3f1 	udiv	r3, r6, r1
  406706:	b2ad      	uxth	r5, r5
  406708:	fb01 6113 	mls	r1, r1, r3, r6
  40670c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  406710:	fb00 f003 	mul.w	r0, r0, r3
  406714:	4288      	cmp	r0, r1
  406716:	d908      	bls.n	40672a <__udivdi3+0x86>
  406718:	1909      	adds	r1, r1, r4
  40671a:	f103 36ff 	add.w	r6, r3, #4294967295
  40671e:	f080 80e2 	bcs.w	4068e6 <__udivdi3+0x242>
  406722:	4288      	cmp	r0, r1
  406724:	f240 80df 	bls.w	4068e6 <__udivdi3+0x242>
  406728:	3b02      	subs	r3, #2
  40672a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40672e:	2300      	movs	r3, #0
  406730:	4610      	mov	r0, r2
  406732:	4619      	mov	r1, r3
  406734:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406738:	4770      	bx	lr
  40673a:	428b      	cmp	r3, r1
  40673c:	d84a      	bhi.n	4067d4 <__udivdi3+0x130>
  40673e:	fab3 f683 	clz	r6, r3
  406742:	2e00      	cmp	r6, #0
  406744:	d14d      	bne.n	4067e2 <__udivdi3+0x13e>
  406746:	428b      	cmp	r3, r1
  406748:	d302      	bcc.n	406750 <__udivdi3+0xac>
  40674a:	4282      	cmp	r2, r0
  40674c:	f200 80d6 	bhi.w	4068fc <__udivdi3+0x258>
  406750:	2300      	movs	r3, #0
  406752:	2201      	movs	r2, #1
  406754:	4610      	mov	r0, r2
  406756:	4619      	mov	r1, r3
  406758:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40675c:	4770      	bx	lr
  40675e:	b912      	cbnz	r2, 406766 <__udivdi3+0xc2>
  406760:	2401      	movs	r4, #1
  406762:	fbb4 f4f2 	udiv	r4, r4, r2
  406766:	fab4 f284 	clz	r2, r4
  40676a:	2a00      	cmp	r2, #0
  40676c:	d17c      	bne.n	406868 <__udivdi3+0x1c4>
  40676e:	1b09      	subs	r1, r1, r4
  406770:	0c26      	lsrs	r6, r4, #16
  406772:	b2a7      	uxth	r7, r4
  406774:	2301      	movs	r3, #1
  406776:	fbb1 f0f6 	udiv	r0, r1, r6
  40677a:	0c2a      	lsrs	r2, r5, #16
  40677c:	fb06 1110 	mls	r1, r6, r0, r1
  406780:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  406784:	fb07 f200 	mul.w	r2, r7, r0
  406788:	428a      	cmp	r2, r1
  40678a:	d907      	bls.n	40679c <__udivdi3+0xf8>
  40678c:	1909      	adds	r1, r1, r4
  40678e:	f100 3cff 	add.w	ip, r0, #4294967295
  406792:	d202      	bcs.n	40679a <__udivdi3+0xf6>
  406794:	428a      	cmp	r2, r1
  406796:	f200 80c3 	bhi.w	406920 <__udivdi3+0x27c>
  40679a:	4660      	mov	r0, ip
  40679c:	1a89      	subs	r1, r1, r2
  40679e:	fbb1 f2f6 	udiv	r2, r1, r6
  4067a2:	b2ad      	uxth	r5, r5
  4067a4:	fb06 1112 	mls	r1, r6, r2, r1
  4067a8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  4067ac:	fb07 f702 	mul.w	r7, r7, r2
  4067b0:	42af      	cmp	r7, r5
  4067b2:	d908      	bls.n	4067c6 <__udivdi3+0x122>
  4067b4:	192c      	adds	r4, r5, r4
  4067b6:	f102 31ff 	add.w	r1, r2, #4294967295
  4067ba:	f080 8096 	bcs.w	4068ea <__udivdi3+0x246>
  4067be:	42a7      	cmp	r7, r4
  4067c0:	f240 8093 	bls.w	4068ea <__udivdi3+0x246>
  4067c4:	3a02      	subs	r2, #2
  4067c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  4067ca:	4610      	mov	r0, r2
  4067cc:	4619      	mov	r1, r3
  4067ce:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4067d2:	4770      	bx	lr
  4067d4:	2300      	movs	r3, #0
  4067d6:	461a      	mov	r2, r3
  4067d8:	4610      	mov	r0, r2
  4067da:	4619      	mov	r1, r3
  4067dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4067e0:	4770      	bx	lr
  4067e2:	f1c6 0520 	rsb	r5, r6, #32
  4067e6:	fa22 f405 	lsr.w	r4, r2, r5
  4067ea:	40b3      	lsls	r3, r6
  4067ec:	431c      	orrs	r4, r3
  4067ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4067f2:	fa21 f305 	lsr.w	r3, r1, r5
  4067f6:	fa01 f706 	lsl.w	r7, r1, r6
  4067fa:	fa20 f505 	lsr.w	r5, r0, r5
  4067fe:	fbb3 fcf8 	udiv	ip, r3, r8
  406802:	432f      	orrs	r7, r5
  406804:	fb08 331c 	mls	r3, r8, ip, r3
  406808:	0c3d      	lsrs	r5, r7, #16
  40680a:	fa1f fa84 	uxth.w	sl, r4
  40680e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  406812:	fb0a f90c 	mul.w	r9, sl, ip
  406816:	4599      	cmp	r9, r3
  406818:	fa02 fb06 	lsl.w	fp, r2, r6
  40681c:	d904      	bls.n	406828 <__udivdi3+0x184>
  40681e:	191b      	adds	r3, r3, r4
  406820:	f10c 32ff 	add.w	r2, ip, #4294967295
  406824:	d36d      	bcc.n	406902 <__udivdi3+0x25e>
  406826:	4694      	mov	ip, r2
  406828:	ebc9 0303 	rsb	r3, r9, r3
  40682c:	fbb3 f5f8 	udiv	r5, r3, r8
  406830:	fb08 3315 	mls	r3, r8, r5, r3
  406834:	b2bf      	uxth	r7, r7
  406836:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40683a:	fb0a f805 	mul.w	r8, sl, r5
  40683e:	45b8      	cmp	r8, r7
  406840:	d904      	bls.n	40684c <__udivdi3+0x1a8>
  406842:	193f      	adds	r7, r7, r4
  406844:	f105 33ff 	add.w	r3, r5, #4294967295
  406848:	d361      	bcc.n	40690e <__udivdi3+0x26a>
  40684a:	461d      	mov	r5, r3
  40684c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  406850:	fbac 230b 	umull	r2, r3, ip, fp
  406854:	ebc8 0707 	rsb	r7, r8, r7
  406858:	429f      	cmp	r7, r3
  40685a:	f04f 0500 	mov.w	r5, #0
  40685e:	d349      	bcc.n	4068f4 <__udivdi3+0x250>
  406860:	d045      	beq.n	4068ee <__udivdi3+0x24a>
  406862:	4662      	mov	r2, ip
  406864:	462b      	mov	r3, r5
  406866:	e763      	b.n	406730 <__udivdi3+0x8c>
  406868:	4094      	lsls	r4, r2
  40686a:	f1c2 0320 	rsb	r3, r2, #32
  40686e:	fa21 fc03 	lsr.w	ip, r1, r3
  406872:	0c26      	lsrs	r6, r4, #16
  406874:	fa20 f303 	lsr.w	r3, r0, r3
  406878:	fa01 f502 	lsl.w	r5, r1, r2
  40687c:	fbbc f8f6 	udiv	r8, ip, r6
  406880:	ea43 0105 	orr.w	r1, r3, r5
  406884:	0c0b      	lsrs	r3, r1, #16
  406886:	fb06 cc18 	mls	ip, r6, r8, ip
  40688a:	b2a7      	uxth	r7, r4
  40688c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  406890:	fb07 f308 	mul.w	r3, r7, r8
  406894:	4563      	cmp	r3, ip
  406896:	fa00 f502 	lsl.w	r5, r0, r2
  40689a:	d909      	bls.n	4068b0 <__udivdi3+0x20c>
  40689c:	eb1c 0c04 	adds.w	ip, ip, r4
  4068a0:	f108 32ff 	add.w	r2, r8, #4294967295
  4068a4:	d23a      	bcs.n	40691c <__udivdi3+0x278>
  4068a6:	4563      	cmp	r3, ip
  4068a8:	d938      	bls.n	40691c <__udivdi3+0x278>
  4068aa:	f1a8 0802 	sub.w	r8, r8, #2
  4068ae:	44a4      	add	ip, r4
  4068b0:	ebc3 0c0c 	rsb	ip, r3, ip
  4068b4:	fbbc f3f6 	udiv	r3, ip, r6
  4068b8:	b289      	uxth	r1, r1
  4068ba:	fb06 cc13 	mls	ip, r6, r3, ip
  4068be:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  4068c2:	fb07 f203 	mul.w	r2, r7, r3
  4068c6:	428a      	cmp	r2, r1
  4068c8:	d907      	bls.n	4068da <__udivdi3+0x236>
  4068ca:	1909      	adds	r1, r1, r4
  4068cc:	f103 30ff 	add.w	r0, r3, #4294967295
  4068d0:	d222      	bcs.n	406918 <__udivdi3+0x274>
  4068d2:	428a      	cmp	r2, r1
  4068d4:	d920      	bls.n	406918 <__udivdi3+0x274>
  4068d6:	3b02      	subs	r3, #2
  4068d8:	4421      	add	r1, r4
  4068da:	1a89      	subs	r1, r1, r2
  4068dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4068e0:	e749      	b.n	406776 <__udivdi3+0xd2>
  4068e2:	463a      	mov	r2, r7
  4068e4:	e70c      	b.n	406700 <__udivdi3+0x5c>
  4068e6:	4633      	mov	r3, r6
  4068e8:	e71f      	b.n	40672a <__udivdi3+0x86>
  4068ea:	460a      	mov	r2, r1
  4068ec:	e76b      	b.n	4067c6 <__udivdi3+0x122>
  4068ee:	40b0      	lsls	r0, r6
  4068f0:	4290      	cmp	r0, r2
  4068f2:	d2b6      	bcs.n	406862 <__udivdi3+0x1be>
  4068f4:	f10c 32ff 	add.w	r2, ip, #4294967295
  4068f8:	2300      	movs	r3, #0
  4068fa:	e719      	b.n	406730 <__udivdi3+0x8c>
  4068fc:	4633      	mov	r3, r6
  4068fe:	4632      	mov	r2, r6
  406900:	e716      	b.n	406730 <__udivdi3+0x8c>
  406902:	4599      	cmp	r9, r3
  406904:	d98f      	bls.n	406826 <__udivdi3+0x182>
  406906:	f1ac 0c02 	sub.w	ip, ip, #2
  40690a:	4423      	add	r3, r4
  40690c:	e78c      	b.n	406828 <__udivdi3+0x184>
  40690e:	45b8      	cmp	r8, r7
  406910:	d99b      	bls.n	40684a <__udivdi3+0x1a6>
  406912:	3d02      	subs	r5, #2
  406914:	4427      	add	r7, r4
  406916:	e799      	b.n	40684c <__udivdi3+0x1a8>
  406918:	4603      	mov	r3, r0
  40691a:	e7de      	b.n	4068da <__udivdi3+0x236>
  40691c:	4690      	mov	r8, r2
  40691e:	e7c7      	b.n	4068b0 <__udivdi3+0x20c>
  406920:	3802      	subs	r0, #2
  406922:	4421      	add	r1, r4
  406924:	e73a      	b.n	40679c <__udivdi3+0xf8>
  406926:	bf00      	nop

00406928 <ORIG_P>:
  406928:	6a88 243f 08d3 85a3 8a2e 1319 7344 0370     .j?$........Dsp.
  406938:	3822 a409 31d0 299f fa98 082e 6c89 ec4e     "8...1.).....lN.
  406948:	21e6 4528 1377 38d0 66cf be54 0c6c 34e9     .!(Ew..8.fT.l..4
  406958:	29b7 c0ac 50dd c97c d5b5 3f84 0917 b547     .)...P|....?..G.
  406968:	d5d9 9216 fb1b 8979                         ......y.

00406970 <ORIG_S>:
  406970:	0ba6 d131 b5ac 98df 72db 2ffd dfb7 d01a     ..1......r./....
  406980:	afed b8e1 7e96 6a26 9045 ba7c 7f99 f12c     .....~&jE.|...,.
  406990:	9947 24a1 6cf7 b391 f2e2 0801 fc16 858e     G..$.l..........
  4069a0:	20d8 6369 4e69 7157 fea3 a458 3d7e f493     . iciNWq..X.~=..
  4069b0:	748f 0d95 b658 728e cd58 718b 4aee 8215     .t..X..rX..q.J..
  4069c0:	a41d 7b54 59b5 c25a d539 9c30 6013 2af2     ..T{.YZ.9.0..`.*
  4069d0:	b023 c5d1 85f0 2860 7918 ca41 38ef b8db     #.....`(.yA..8..
  4069e0:	dcb0 8e79 180e 603a 0e8b 6c9e 8a3e b01e     ..y...:`...l>...
  4069f0:	77c1 d715 4b27 bd31 2fda 78af 5c60 5560     .w..'K1../.x`\`U
  406a00:	25f3 e655 ab94 aa55 9862 5748 1440 63e8     .%U...U.b.HW@..c
  406a10:	396a 55ca 10b6 2aab 5c34 b4cc e8ce 1141     j9.U...*4\....A.
  406a20:	86af a154 e993 7c72 1411 b3ee bc2a 636f     ..T...r|....*.oc
  406a30:	c55d 2ba9 31f6 7418 3e16 ce5c 931e 9b87     ]..+.1.t.>\.....
  406a40:	ba33 afd6 cf5c 6c24 5381 7a32 8677 2895     3...\.$l.S2zw..(
  406a50:	4898 3b8f b9af 6b4b e81b c4bf 2193 6628     .H.;..Kk.....!(f
  406a60:	09cc 61d8 a991 fb21 ac60 487c 8032 5dec     ...a..!.`.|H2..]
  406a70:	5d5d ef84 75b1 e985 2302 dc26 1b88 eb65     ]]...u...#&...e.
  406a80:	3e81 2389 acc5 d396 6ff3 0f6d 4239 83f4     .>.#.....om.9B..
  406a90:	4482 2e0b 2004 a484 f04a 69c8 9b5e 9e1f     .D... ..J..i^...
  406aa0:	6842 21c6 6c9a f6e9 9c61 670c 88f0 abd3     Bh.!.l..a..g....
  406ab0:	a0d2 6a51 2f68 d854 a728 960f 33a3 ab51     ..Qjh/T.(....3Q.
  406ac0:	0b6c 6eef 3be4 137a f050 ba3b 2a98 7efb     l..n.;z.P.;..*.~
  406ad0:	651d a1f1 0176 39af 593e 66ca 0e88 8243     .e..v..9>Y.f..C.
  406ae0:	8619 8cee 9fb4 456f a5c3 7d84 5ebe 3b8b     ......oE...}.^.;
  406af0:	75d8 e06f 2073 85c1 449f 401a 6aa6 56c1     .uo.s ...D.@.j.V
  406b00:	aa62 4ed3 7706 363f df72 1bfe 023d 429b     b..N.w?6r...=..B
  406b10:	d724 37d0 1248 d00a ead3 db0f c09b 49f1     $..7H..........I
  406b20:	72c9 0753 1b7b 8099 79d8 25d4 def7 f6e8     .rS.{....y.%....
  406b30:	501a e3fe 4c3b b679 e0bd 976c 06ba 04c0     .P..;Ly...l.....
  406b40:	4fb6 c1a9 60c4 409f 9ec2 5e5c 2463 196a     .O...`.@..\^c$j.
  406b50:	6faf 68fb 53b5 3e6c b2eb 1339 ec6f 3b52     .o.h.Sl>..9.o.R;
  406b60:	511f 6dfc 952c 9b30 4544 cc81 bd09 af5e     .Q.m,.0.DE....^.
  406b70:	d004 bee3 4afd de33 2807 660f 4bb3 192e     .....J3..(.f.K..
  406b80:	a857 c0cb 740f 45c8 5f39 d20b fbdb b9d3     W....t.E9_......
  406b90:	c0bd 5579 320a 1a60 00c6 d6a1 7279 402c     ..yU.2`.....yr,@
  406ba0:	25fe 679f a3cc fb1f e9f8 8ea5 22f8 db32     .%.g........."2.
  406bb0:	16df 3c75 6b15 fd61 1ec8 2f50 52ab ad05     ..u<.ka...P/.R..
  406bc0:	b5fa 323d 8760 fd23 7b48 5331 df82 3e00     ..=2`.#.H{1S...>
  406bd0:	57bb 9e5c 8ca0 ca6f 562e 1a87 69db df17     .W\...o..V...i..
  406be0:	a8f6 d542 ffc3 287e 32c6 ac67 5573 8c4f     ..B...~(.2g.sUO.
  406bf0:	27b0 695b 58c8 bbca a35d e1ff 11a0 b8f0     .'[i.X..].......
  406c00:	3d98 10fa 83b8 fd21 b56c 4afc d35b 2dd1     .=....!.l..J[..-
  406c10:	e479 9a53 4565 b6f8 49bc d28e 9790 4bfb     y.S.eE...I.....K
  406c20:	f2da e1dd 7e33 a4cb 1341 62fb c6e8 cee4     ....3~..A..b....
  406c30:	cada ef20 4c01 3677 9efe d07e 1fb4 2bf1     .. ..Lw6..~....+
  406c40:	da4d 95db 9198 ae90 8e71 eaad d5a0 6b93     M.......q......k
  406c50:	d1d0 d08e 25e0 afc7 5b2f 8e3c 94b7 8e75     .....%../[<...u.
  406c60:	e2fb 8ff6 2b64 f212 b812 8888 f01c 900d     ....d+..........
  406c70:	5ea0 4fad c31c 688f f191 d1cf c1ad b3a8     .^.O...h........
  406c80:	2218 2f2f 1777 be0e 2dfe ea75 1fa1 8b02     ."//w....-u.....
  406c90:	cc0f e5a0 74e8 b56f f3d6 18ac e299 ce89     .....to.........
  406ca0:	4fe0 b4a8 e0b7 fd13 3b81 7cc4 a8d9 d2ad     .O.......;.|....
  406cb0:	a266 165f 7705 8095 7314 93cc 1477 211a     f._..w...s..w..!
  406cc0:	2065 e6ad fa86 77b5 42f5 c754 35cf fb9d     e .....w.BT..5..
  406cd0:	af0c ebcd 89a0 7b3e 1bd3 d641 7e49 ae1e     ......>{..A.I~..
  406ce0:	0e2d 0025 b35e 2071 00bb 2268 e0af 57b8     -.%.^.q ..h"...W
  406cf0:	369b 2464 b91e f009 911d 5563 a6aa 59df     .6d$......cU...Y
  406d00:	4389 78c1 537f d95a 5ba2 207d b9c5 02e5     .C.x.SZ..[} ....
  406d10:	0376 8326 cfa9 6295 1968 11c8 4a41 4e73     v.&....bh...AJsN
  406d20:	2dca b347 a94a 7b14 0052 1b51 2915 9a53     .-G.J..{R.Q..)S.
  406d30:	573f d60f c6e4 bc9b a476 2b60 7400 81e6     ?W......v.`+.t..
  406d40:	6fb5 08ba e91f 571b ec6b f296 d915 2a0d     .o.....Wk......*
  406d50:	6521 b663 f9b6 e7b9 052e ff34 5664 c585     !ec.......4.dV..
  406d60:	2d5d 53b0 8fa1 a99f 4799 08ba 076a 6e85     ]-.S.....G..j..n
  406d70:	70e9 4b7a 2944 b5b3 092e db75 2623 c419     .pzKD)....u.#&..
  406d80:	a6b0 ad6e df7d 49a7 60b8 9cee b266 8fed     ..n.}..I.`..f...
  406d90:	8c71 ecaa 17ff 699a 526c 5664 9ee1 c2b1     q......ilRdV....
  406da0:	02a5 1936 4c29 7509 1340 a059 3a3e e418     ..6.)L.u@.Y.>:..
  406db0:	989a 3f54 9d65 5b42 e4d6 6b8f 3fd6 99f7     ..T?e.B[...k.?..
  406dc0:	9c07 a1d2 30f5 efe8 38e6 4d2d 5dc1 f025     .....0...8-M.]%.
  406dd0:	2086 4cdd eb26 8470 e9c6 6382 cc5e 021e     . .L&.p....c^...
  406de0:	6b3f 0968 efc9 3eba 1814 3c97 70a1 6b6a     ?kh....>...<.pjk
  406df0:	3584 687f e286 52a0 5305 b79c 0737 aa50     .5.h...R.S..7.P.
  406e00:	841c 3e07 ae5c 7fde 44ec 8e7d f2b8 5716     ...>\....D}....W
  406e10:	da37 b03a 0c0d f050 1f04 f01c b3ff 0200     7.:...P.........
  406e20:	f51a ae0c 74b2 3cb5 7a58 2583 21bd dc09     .....t.<Xz.%.!..
  406e30:	13f9 d191 2ff6 7ca9 4773 9432 4701 22f5     ...../.|sG2..G."
  406e40:	e581 3ae5 dadc 37c2 7634 c8b5 dda7 9af3     ...:...74v......
  406e50:	6146 a944 030e 0fd0 c73e ecc8 1e41 a475     FaD.....>...A.u.
  406e60:	cd99 e238 0e2f 3bea bba1 3280 b331 183e     ..8./..;...21.>.
  406e70:	8b38 4e54 b908 4f6d 0d03 6f42 04bf f60a     8.TN..mO..Bo....
  406e80:	1290 2cb8 7c79 2497 b072 5679 89af bcaf     ...,y|.$r.yV....
  406e90:	771f de9a 0810 d993 ae12 b38b 3f2e dccf     .w...........?..
  406ea0:	721f 5512 7124 2e6b dde6 501a cd87 9f84     .r.U$qk....P....
  406eb0:	4718 7a58 da17 7408 9abc bc9f 7d8c e94b     .GXz...t.....}K.
  406ec0:	ec3a ec7a 1dfa db85 4366 6309 c3d2 c464     :.z.....fC.c..d.
  406ed0:	1847 ef1c d908 3215 3b37 dd43 ba16 24c2     G......27;C....$
  406ee0:	4d43 12a1 c451 2a65 0002 5094 e4dd 133a     CM..Q.e*...P..:.
  406ef0:	f89e 71df 4e55 1031 77d6 81ac 199b 5f11     ...qUN1..w....._
  406f00:	56f1 0435 c76b d7a3 183b 3c11 a509 5924     .V5.k...;..<..$Y
  406f10:	e6ed f28f fbfa 97f1 bf2c 9eba 3c6e 1e15     ........,...n<..
  406f20:	4570 86e3 6fb1 eae9 5e0a 860e 2ab3 5a3e     pE...o...^...*>Z
  406f30:	e71c 771f 06fa 4e3d dcb9 2965 1d0f 99e7     ...w..=N..e)....
  406f40:	89d6 803e c825 5266 c978 2e4c b36a 9c10     ..>.%.fRx.L.j...
  406f50:	0eba c615 ea78 94e2 3c53 a5fc 2df4 1e0a     ....x...S<...-..
  406f60:	4ea7 f2f7 2b3d 361d 260f 1939 7960 19c2     .N..=+.6.&9.`y..
  406f70:	a708 5223 12b6 f713 fe6e ebad 1f66 eac3     ..#R....n...f...
  406f80:	4595 e3bc c883 a67b 37d1 b17f ff28 018c     .E....{..7..(...
  406f90:	ddef c332 5aa5 be6c 2185 6558 9802 68ab     ..2..Zl..!Xe...h
  406fa0:	a50f eece 953b db2f 7dad 2aef 2f84 5b6e     ....;./..}.*./n[
  406fb0:	b628 1521 6170 2907 4775 ecdd 1510 619f     (.!.pa.)uG.....a
  406fc0:	a830 13cc bd96 eb61 fe1e 0334 63cf aa03     0.....a...4..c..
  406fd0:	5c90 b573 a239 4c70 9e0b d59e de14 cbaa     .\s.9.pL........
  406fe0:	86bc eecc 2ca7 6062 5cab 9cab 846e b2f3     .....,b`.\..n...
  406ff0:	1eaf 648b f0ca 19bd 69b9 a023 bb50 655a     ...d.....i#.P.Ze
  407000:	5a32 4068 b4b3 3c2a e9d5 319e b8f7 c021     2Zh@..*<...1..!.
  407010:	0b19 9b54 a099 875f 997e 95f7 7da8 623d     ..T..._.~....}=b
  407020:	889a f837 2d77 97e3 935f 11ed 1281 1668     ..7.w-.._.....h.
  407030:	8829 0e35 1fd6 c7e6 dfa1 96de ba99 7858     ).5...........Xx
  407040:	84a5 57f5 7263 1b22 c3ff 9b83 4696 1ac2     ...Wcr"......F..
  407050:	0aeb cdb3 3054 532e 48e4 8fd9 3128 6dbc     ....T0.S.H..(1.m
  407060:	f2ef 58eb ffea 34c6 ed61 fe28 3c73 ee7c     ...X...4a.(.s<|.
  407070:	14d9 5d4a b7e3 e864 5d14 4210 13e0 203e     ..J]..d..].B..> 
  407080:	e2b6 45ee abea a3aa 4f15 db6c 4fd0 facb     ...E.....Ol..O..
  407090:	f442 c742 bbb5 ef6a 3b1d 654f 2105 41cd     B.B...j..;Oe.!.A
  4070a0:	799e d81e 4dc7 8685 476a e44b 6250 3d81     .y...M..jGK.Pb.=
  4070b0:	a1f2 cf62 2646 5b8d 83a0 fc88 b6a3 c1c7     ..b.F&.[........
  4070c0:	24c3 7f15 7492 69cb 8a0b 4784 b285 5692     .$...t.i...G...V
  4070d0:	bf00 095b 489d ad19 b174 1462 0e00 2382     ..[..H..t.b....#
  4070e0:	8d2a 5842 f5ea 0c55 f43e 1dad 7061 233f     *.BX..U.>...ap?#
  4070f0:	f092 3372 7e41 8d93 ecf1 d65f 3bdb 6c22     ..r3A~...._..;"l
  407100:	3759 7cde 7460 cbee f2a7 4085 326e ce77     Y7.|`t.....@n2w.
  407110:	8084 a607 509e 19f8 d855 e8ef 9735 61d9     .....P..U...5..a
  407120:	a7aa a969 06c2 c50c abfc 5a04 cadc 800b     ..i........Z....
  407130:	7a2e 9e44 3484 c345 6705 fdd5 9ec9 0e1e     .zD..4E..g......
  407140:	dbd3 db73 88cd 1055 da79 675f 4340 e367     ..s...U.y._g@Cg.
  407150:	3465 c5c4 38d8 713e f89e 3d28 ff20 f16d     e4...8>q..(= .m.
  407160:	21e7 153e 3d4a 8fb0 9f2b e6e3 adf7 db83     .!>.J=..+.......
  407170:	5a68 e93d 40f7 9481 261c f64c 2934 9469     hZ=..@...&L.4)i.
  407180:	20f7 4115 d4f7 7602 6b2e bcf4 0068 d4a2     . .A...v.k..h...
  407190:	2471 d408 f46a 3320 d4b7 43b7 61af 5000     q$..j. 3...C.a.P
  4071a0:	f62e 1e39 4546 9724 4f74 1421 8840 bf8b     ..9.FE$.tO!.@...
  4071b0:	fc1d 4d95 91af 96b5 ddd3 70f4 2f45 66a0     ...M.......pE/.f
  4071c0:	09ec bfbc 9785 03bd 6dd0 7fac 8504 31cb     .........m.....1
  4071d0:	27b3 96eb 3941 55fd 47e6 da25 0a9a abca     .'..A9.U.G%.....
  4071e0:	7825 2850 29f4 5304 86da 0a2c 6dfb e9b6     %xP(.).S..,..m..
  4071f0:	1462 68dc 6900 d748 c0a4 680e 8dee 27a1     b..h.iH....h...'
  407200:	fea2 4f3f ad8c e887 e006 b58c d6b6 7af4     ..?O...........z
  407210:	1e7c aace 5fec d337 a399 ce78 2a42 406b     |...._7...x.B*k@
  407220:	9e35 20fe 85b9 d9f3 d7ab ee39 4e8b 3b12     5.. ......9..N.;
  407230:	faf7 1dc9 1856 4b6d 6631 26a3 97b2 eae3     ....V.mK1f.&....
  407240:	fa74 3a6e 4332 dd5b e7f7 6841 20fb ca78     t.n:2C[...Ah. x.
  407250:	f54e fb0a b397 d8fe 56ac 4540 9527 ba48     N........V@E'.H.
  407260:	3a3a 5553 8d87 2083 a9b7 fe6b 954b d096     ::SU... ..k.K...
  407270:	67bc 55a8 9a58 a115 2963 cca9 db33 99e1     .g.UX...c)..3...
  407280:	4a56 a62a 25f9 3f31 7e1c 5ef4 317c 9029     VJ*..%1?.~.^|1).
  407290:	e802 fdf8 2f70 0427 155c 80bb 2ce3 0528     ....p/'.\....,(.
  4072a0:	1548 95c1 6d22 e4c6 133f 48c1 86dc c70f     H..."m..?..H....
  4072b0:	c9ee 07f9 1f0f 4104 79a4 4047 6e17 5d88     .......A.yG@.n.]
  4072c0:	51eb 325f c0d1 d59b c18f f2bc 3564 4111     .Q_2........d5.A
  4072d0:	7834 257b 9c60 602a e8a3 dff8 6c1b 1f63     4x{%`.*`.....lc.
  4072e0:	b4c2 0e12 329e 02e1 4fd1 af66 8115 cad1     .....2...Of.....
  4072f0:	95e0 6b23 92e1 333e 0b62 3b24 b922 eebe     ..#k..>3b.$;"...
  407300:	a20e 85b2 0d99 e6ba 0c8c de72 f728 2da2     ..........r.(..-
  407310:	7845 d012 94fd 95b7 0862 647d f5f0 e7cc     Ex......b.}d....
  407320:	a36f 5449 48fa 877d fd27 c39d 8d1e f33e     o.IT.H}.'.....>.
  407330:	6341 0a47 ff74 992e 6eab 3a6f fd37 f4f8     AcG.t....no:7...
  407340:	dc60 a812 ddf8 a1eb e14c 991b 6b0d db6e     `.......L....kn.
  407350:	5510 c67b 2c37 6d67 d43b 2765 e804 dcd0     .U{.7,gm;.e'....
  407360:	0dc7 f129 ffa3 cc00 0f92 b539 ed0b 690f     ..).......9....i
  407370:	9ffb 667b 7d9c cedb cf0b a091 5ea3 d915     ..{f.}.......^..
  407380:	2f88 bb13 ad24 515b 79bf 7b94 d6eb 763b     ./..$.[Q.y.{..;v
  407390:	2eb3 3739 5979 cc11 e297 8026 312d f42e     ..97yY....&.-1..
  4073a0:	ada7 6842 2b3b c66a 4ccc 1275 f11c 782e     ..Bh;+j..Lu....x
  4073b0:	4237 6a12 51e7 b792 bbe6 06a1 6350 4bfb     7B.j.Q......Pc.K
  4073c0:	1018 1a6b edfa 11ca bdd8 3d25 c3c9 e2e1     ..k.......%=....
  4073d0:	1659 4442 1386 0a12 ec6e d90c ea2a d5ab     Y.BD....n...*...
  4073e0:	674e 64af a85f da86 e988 bebf c3fe 64e4     Ng.d_..........d
  4073f0:	8057 9dbc c086 f0f7 7bf8 6078 604d 6003     W........{x`M`.`
  407400:	8346 d1fd 1fb0 f638 ae04 7745 fccc d736     F.....8...Ew..6.
  407410:	6b33 8342 ab71 f01e 4187 b080 5e5f 3c00     3kB.q....A.._^.<
  407420:	57be 77a0 ae24 bde8 4299 5546 2e61 bf58     .W.w$....BFUa.X.
  407430:	f48f 4e58 fda2 f2dd ef38 f474 bdc2 8789     ..XN....8.t.....
  407440:	f9c3 5366 8e74 c8b3 f255 b475 d9b9 46fc     ..fSt...U.u....F
  407450:	2661 7aeb df84 8b1d 0e79 846a 95e2 915f     a&.z....y.j..._.
  407460:	598e 466e 5770 20b4 5591 8cd5 de4c c902     .YnFpW. .U..L...
  407470:	ace1 b90b 05d0 bb82 6248 11a8 a99e 7574     ........Hb....tu
  407480:	19b6 b77f dc09 e0a9 09a1 662d 4633 c432     ..........-f3F2.
  407490:	1f02 e85a be8c 09f0 a025 4a99 fe10 1d6e     ..Z.....%..J..n.
  4074a0:	3d1d 1ab9 a4df 0ba5 f20f a186 f169 2868     .=..........i.h(
  4074b0:	da83 dcb7 06fe 5739 ce9b a1e2 7f52 4fcd     ......9W....R..O
  4074c0:	5e01 5011 83fa a706 b5c4 a002 d027 0de6     .^.P........'...
  4074d0:	8c27 9af8 8641 773f 4c06 c360 06b5 61a8     '...A.?w.L`....a
  4074e0:	7a28 f017 86e0 c0f5 58aa 0060 7d62 30dc     (z.......X`.b}.0
  4074f0:	9ed7 11e6 ea63 2338 dd94 53c2 1634 c2c2     ....c.8#...S4...
  407500:	ee56 bbcb b6de 90bc 7da1 ebfc 1d76 ce59     V........}..v.Y.
  407510:	e409 6f05 0188 4b7c 0a3d 3972 7c24 7c92     ...o..|K=.r9$|.|
  407520:	725f 86e3 9db9 724d 5bb4 1ac1 b8fc d39e     _r....Mr.[......
  407530:	5578 ed54 a5b5 08fc 7cd3 d83d 0fc4 4dad     xUT......|=....M
  407540:	ef5e 1e50 e6f8 b161 14d9 a285 133c 6c51     ^.P...a.....<.Ql
  407550:	c7e7 6fd5 4ec4 56e1 bfce 362a c837 ddc6     ...o.N.V..*67...
  407560:	3234 d79a 8212 9263 fa8e 670e 00e0 4060     42....c....g..`@
  407570:	ce37 3a39 f5cf d3fa 7737 abc2 2d1b 5ac5     7.9:....7w...-.Z
  407580:	679e 5cb0 3742 4fa3 2740 d382 9bbe 99bc     .g.\B7.O@'......
  407590:	8e9d d511 7315 bf0f 1c7e d62d c47b c700     .....s..~.-.{...
  4075a0:	1b6b b78c 9045 21a1 b1be b26e 6eb4 6a36     k...E..!..n..n6j
  4075b0:	ab2f 5748 6e79 bc94 76d2 c6a3 c2c8 6549     /.HWyn...v....Ie
  4075c0:	f8ee 530f de7d 468d 0a1d d573 4dc6 4cd0     ...S}..F..s..M.L
  4075d0:	bbdb 2939 4650 a9ba 26e8 ac95 e304 be5e     ..9)PF...&....^.
  4075e0:	d5f0 a1fa 519a 6a2d 8ce2 63ef ee22 9a86     .....Q-j...c"...
  4075f0:	c2b8 c089 2ef6 4324 03aa a51e d0a4 9cf2     ......$C........
  407600:	61ba 83c0 6a4d 9be9 1550 8fe5 5bd6 ba64     .a..Mj..P....[d.
  407610:	a2f9 2826 3ae1 a73a 9586 4ba9 62e9 ef55     ..&(.::....K.bU.
  407620:	efd3 c72f f7da f752 6f69 3f04 0a59 77fa     ../...R.io.?Y..w
  407630:	a915 80e4 8601 87b0 e6ad 9b09 e593 3b3e     ..............>;
  407640:	fd5a e990 d797 9e34 b7d9 2cf0 8b51 022b     Z.....4....,Q.+.
  407650:	ac3a 96d5 a67d 017d 3ed6 d1cf 2d28 7c7d     :...}.}..>..(-}|
  407660:	25cf 1f9f b89b adf2 b472 5ad6 f54c 5a88     .%......r..ZL..Z
  407670:	ac71 e029 a5e6 e019 acfd 47b0 fa9b ed93     q.)........G....
  407680:	c48d e8d3 57cc 283b 6629 f8d5 2e28 7913     .....W;()f..(..y
  407690:	0191 785f 6055 ed75 0e44 f796 5e8c e3d3     .._xU`u.D....^..
  4076a0:	6dd4 1505 6dba 88f4 6125 03a1 f0bd 0564     .m...m..%a....d.
  4076b0:	9e15 c3eb 57a2 3c90 1aec 9727 072a a93a     .....W.<..'.*.:.
  4076c0:	6d9b 1b3f 21f5 1e63 66fb f59c f319 26dc     .m?..!c..f.....&
  4076d0:	d928 7533 fdf5 b155 3482 0356 3cbb 8aba     (.3u..U..4V..<..
  4076e0:	7711 2851 d9f8 c20a 5167 abcc 925f ccad     .wQ(....gQ.._...
  4076f0:	1751 4de8 dc8e 3830 5862 379d f991 9320     Q..M..08bX.7.. .
  407700:	90c2 ea7a 7bce fb3e ce64 5121 be32 774f     ..z..{>.d.!Q2.Ow
  407710:	e37e a8b6 3d46 c329 5369 48de e680 6413     ~...F=).iS.H...d
  407720:	0810 a2ae b224 dd6d 2dfd 6985 2166 0907     ....$.m..-.if!..
  407730:	460a b39a c0dd 6445 decf 586c c8ae 1c20     .F....Ed..lX.. .
  407740:	f7dd 5bbe 8d40 1b58 017f ccd2 e3bb 6bb4     ...[@.X........k
  407750:	6a7e dda2 ff45 3a59 0a44 3e35 cdd5 bcb4     ~j..E.Y:D.5>....
  407760:	cea8 72ea 84bb fa64 12ae 8d66 6f47 bf3c     ...r..d...f.Go<.
  407770:	e463 d29b 5d9e 542f 771b aec2 6370 f64e     c....]/T.w..pcN.
  407780:	0d8d 740e 1357 e75b 1671 f872 7d5d af53     ...tW.[.q.r.]}S.
  407790:	cb08 4040 e2cc 4eb4 466a 34d2 af84 0115     ..@@...NjF.4....
  4077a0:	0428 e1b0 3a1d 9598 9fb4 06b8 a048 ce6e     (....:......H.n.
  4077b0:	3b82 6f3f ab82 3520 1d4b 011a 27f8 2772     .;?o.. 5K....'r'
  4077c0:	60b1 6115 3fdc e793 792b bb3a 25bd 3445     .`.a.?..+y:..%E4
  4077d0:	39e1 a088 794b 51ce c9b7 2f32 bac9 a01f     .9..Ky.Q..2/....
  4077e0:	c87e e01c d1f6 bcc7 11c3 cf01 aac7 a1e8     ~...............
  4077f0:	8749 1a90 bd9a d44f decb d0da da38 d50a     I.....O.....8...
  407800:	c32a 0339 3667 c691 317c 8df9 2b4f e0b1     *.9.g6..|1..O+..
  407810:	59b7 f79e bb3a 43f5 19ff f2d5 459c 27d9     .Y..:..C.....E.'
  407820:	222c bf97 fc2a 15e6 fc71 0f91 1525 9b94     ,"..*...q...%...
  407830:	9361 fae5 9ceb ceb6 6459 c2a8 a8d1 12ba     a.......Yd......
  407840:	075e b6c1 6a0c e305 5065 10d2 a442 cb03     ^....j..eP..B...
  407850:	6e0e e0ec db3b 1698 a0be 4c98 e964 3278     .n..;......Ld.x2
  407860:	9532 9f1f 92df e0d3 342b d3a0 f21e 8971     2.......+4....q.
  407870:	7441 1b0a 348c 4ba3 7120 c5be 32d8 c376     At...4.K q...2v.
  407880:	9f8d df35 2f2e 9b99 6f47 e60b f11d 0fe3     ..5../..Go......
  407890:	da54 e54c d891 1eda 79cf ce62 7e6f cd3e     T.L......yb.o~>.
  4078a0:	b166 1618 1d05 fd2c d2c5 848f 2299 f6fb     f.....,......"..
  4078b0:	f357 f523 7623 a632 3531 93a8 cd02 56cc     W.#.#v2.15.....V
  4078c0:	8162 acf0 ebb5 5a75 3697 6e16 73cc 88d2     b.....uZ.6.n.s..
  4078d0:	6292 de96 49d0 81b9 901b 4c50 5614 71c6     .b...I....PL.V.q
  4078e0:	c7bd e6c6 140a 327a d006 45e1 7b9a c3f2     ......z2...E.{..
  4078f0:	53fd c9aa 0f00 62a8 bfe2 bb25 d2f6 35bd     .S.....b..%....5
  407900:	6905 7112 0222 b204 cf7c b6cb 9c2b cd76     .i.q"...|...+.v.
  407910:	3ec0 5311 e3d3 1640 bd60 38ab adf0 2547     .>.S..@.`..8..G%
  407920:	209c ba38 ce76 f746 a1c5 77af 6060 2075     . 8.v.F....w``u 
  407930:	fe4e 85cb 8dd8 8ae8 f9b0 7aaa aa7e 4cf9     N..........z~..L
  407940:	c25c 1948 8a8c 02fb 6ae4 01c3 e1f9 d6eb     \.H......j......
  407950:	f869 90d4 dea0 a65c 252d 3f09 e69f c208     i.....\.-%.?....
  407960:	6132 b74e e25b ce77 dfe3 578f 72e6 3ac3     2aN.[.w....W.r.:
  407970:	3025 6c38 2058 3025 6c38 0a58 0000 0000     %08lX %08lX.....
  407980:	4554 5453 454b 0059 6554 7473 6520 636e     TESTKEY.Test enc
  407990:	7972 7470 6f69 206e 4b4f 0a2e 0000 0000     ryption OK......
  4079a0:	6554 7473 6520 636e 7972 7470 6f69 206e     Test encryption 
  4079b0:	6166 6c69 6465 0a2e 0000 0000 6554 7473     failed......Test
  4079c0:	6420 6365 7972 7470 6f69 206e 4b4f 0a2e      decryption OK..
  4079d0:	0000 0000 6554 7473 6420 6365 7972 7470     ....Test decrypt
  4079e0:	6f69 206e 6166 6c69 6465 0a2e 0000 0000     ion failed......
  4079f0:	0043 0000                                   C...

004079f4 <_global_impure_ptr>:
  4079f4:	0018 2000                                   ... 

004079f8 <zeroes.6763>:
  4079f8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  407a08:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  407a18:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  407a28:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  407a38:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  407a48:	0030 0000                                   0...

00407a4c <blanks.6762>:
  407a4c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  407a5c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  407a6c:	4f50 4953 0058 0000 002e 0000               POSIX.......

00407a78 <__mprec_tens>:
  407a78:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  407a88:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  407a98:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  407aa8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  407ab8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407ac8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407ad8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  407ae8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  407af8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  407b08:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  407b18:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  407b28:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  407b38:	9db4 79d9 7843 44ea                         ...yCx.D

00407b40 <__mprec_bigtens>:
  407b40:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  407b50:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  407b60:	bf3c 7f73 4fdd 7515                         <.s..O.u

00407b68 <p05.5269>:
  407b68:	0005 0000 0019 0000 007d 0000               ........}...

00407b74 <_init>:
  407b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b76:	bf00      	nop
  407b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407b7a:	bc08      	pop	{r3}
  407b7c:	469e      	mov	lr, r3
  407b7e:	4770      	bx	lr

00407b80 <__init_array_start>:
  407b80:	0040376d 	.word	0x0040376d

00407b84 <__frame_dummy_init_array_entry>:
  407b84:	004000f1                                ..@.

00407b88 <_fini>:
  407b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b8a:	bf00      	nop
  407b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407b8e:	bc08      	pop	{r3}
  407b90:	469e      	mov	lr, r3
  407b92:	4770      	bx	lr

00407b94 <__fini_array_start>:
  407b94:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <app_mode>:
20000010:	0002 0000                                   ....

20000014 <app_mode_switch>:
20000014:	0001 0000                                   ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	79f0 0040 0000 0000 0000 0000 0000 0000     .y@.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <_impure_ptr>:
20000440:	0018 2000                                   ... 

20000444 <lconv>:
20000444:	7a74 0040 79d0 0040 79d0 0040 79d0 0040     tz@..y@..y@..y@.
20000454:	79d0 0040 79d0 0040 79d0 0040 79d0 0040     .y@..y@..y@..y@.
20000464:	79d0 0040 79d0 0040 ffff ffff ffff ffff     .y@..y@.........
20000474:	ffff ffff ffff 0000                         ........

2000047c <__malloc_av_>:
	...
20000484:	047c 2000 047c 2000 0484 2000 0484 2000     |.. |.. ... ... 
20000494:	048c 2000 048c 2000 0494 2000 0494 2000     ... ... ... ... 
200004a4:	049c 2000 049c 2000 04a4 2000 04a4 2000     ... ... ... ... 
200004b4:	04ac 2000 04ac 2000 04b4 2000 04b4 2000     ... ... ... ... 
200004c4:	04bc 2000 04bc 2000 04c4 2000 04c4 2000     ... ... ... ... 
200004d4:	04cc 2000 04cc 2000 04d4 2000 04d4 2000     ... ... ... ... 
200004e4:	04dc 2000 04dc 2000 04e4 2000 04e4 2000     ... ... ... ... 
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 

20000884 <__malloc_trim_threshold>:
20000884:	0000 0002                                   ....

20000888 <__malloc_sbrk_base>:
20000888:	ffff ffff                                   ....
